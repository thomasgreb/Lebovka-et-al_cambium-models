/*
 *
 *  This file is part of the Virtual Leaf.
 *
 *  VirtualLeaf is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  VirtualLeaf is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2010 Roeland Merks.
 *
 */

// WARNING: This file is automatically generated by make_parameter_source.pl.
// Do not edit. All edits will be discarded.

#include "parameter.h"
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cerrno>
#include <iostream>
#include <sstream>
#include "output.h"
#include "parse.h"
#include "xmlwrite.h"
#include "warning.h"
#include <QLocale>
#include <QDir>
#include <QStringList>

using namespace std;

static const std::string _module_id("$Id$");

Parameter::Parameter() {
  arrowcolor = strdup("white");
  arrowlength = 10;
  textcolor = strdup("red");
  cellnumsize = 1;
  nodenumsize = 1;
  node_mag = 1;
  outlinewidth = 1;
  cell_outline_color = strdup("forestgreen");
  resize_stride = 0;
  datadir = strdup("/dev/null/");
  datadir = AppendHomeDirIfPathRelative(datadir);
  export_fn_prefix = strdup("tissue.");
  export_interval = 1;
  xml_storage_stride = 0;
  movie = false;
  storage_stride = 1;
  dt = 0.1;
  rd_dt = 1;
  ode_accuracy = 0.0001;
  nit = 0;
  maxt = 150;
  rseed = -1;
  T = 1;
  lambda_length = 100;
  mc_stepsize = 0.4;
  collapse_node_threshold = 0.05;
  yielding_threshold = 2;
  rel_perimeter_stiffness = 2;
  copy_wall = false;
  energy_threshold = 1000;
  mc_cell_stepsize = 0.2;
  lambda_celllength = 0;
  target_length = 0;
  bend_lambda = 0;
  alignment_lambda = 0;
  D = new double[15];
  D[0] = 0.;
  D[1] = 0.0;
  D[2] = 0.0;
  D[3] = 0.;
  D[4] = 0.;
  D[5] = 0.;
  D[6] = 0.;
  D[7] = 0.;
  D[8] = 0.;
  D[9] = 0.;
  D[10] = 0.;
  D[11] = 0.;
  D[12] = 0.;
  D[13] = 0.;
  D[14] = 0.;
  initval = new double[15];
  initval[0] = 0.;
  initval[1] = 0.;
  initval[2] = 0.;
  initval[3] = 0.;
  initval[4] = 0.;
  initval[5] = 0.;
  initval[6] = 0.;
  initval[7] = 0.;
  initval[8] = 0.;
  initval[9] = 0.;
  initval[10] = 0.;
  initval[11] = 0.;
  initval[12] = 0.;
  initval[13] = 0.;
  initval[14] = 0.;
  k1 = 0;
  k2 = 0;
  k3 = 0;
  k4 = 0;
  k5 = 0;
  k6 = 0;
  k7 = 0;
  k8 = 0;
  k9 = 0;
  k10 = 0;
  wk1 = 0;
  wk2 = 0;
  wk3 = 0;
  wk4 = 0;
  wk5 = 0;
  wk6 = 0;
  wk7 = 0;
  wk8 = 0;
  wk9 = 0;
  wk10 = 0;
}

Parameter::~Parameter() {
    
// destruct parameter object
// free string parameter
CleanUp();
}

void Parameter::CleanUp(void) {
  if (arrowcolor) 
     free(arrowcolor);
  if (textcolor) 
     free(textcolor);
  if (cell_outline_color) 
     free(cell_outline_color);
  if (datadir) 
     free(datadir);
  if (export_fn_prefix) 
     free(export_fn_prefix);
  if (D) 
     free(D);
  if (initval) 
     free(initval);

}

void Parameter::Read(const char *filename) {
    
  static bool ReadP=false;

  if (ReadP) {

    //throw "Run Time Error in parameter.cpp: Please Read parameter file only once!!";
    CleanUp();
	
  } else
    ReadP=true;

  FILE *fp=OpenReadFile(filename);


  arrowcolor = sgetpar(fp, "arrowcolor", "white", true);
  arrowlength = fgetpar(fp, "arrowlength", 10, true);
  textcolor = sgetpar(fp, "textcolor", "red", true);
  cellnumsize = igetpar(fp, "cellnumsize", 1, true);
  nodenumsize = igetpar(fp, "nodenumsize", 1, true);
  node_mag = fgetpar(fp, "node_mag", 1, true);
  outlinewidth = fgetpar(fp, "outlinewidth", 1, true);
  cell_outline_color = sgetpar(fp, "cell_outline_color", "forestgreen", true);
  resize_stride = igetpar(fp, "resize_stride", 0, true);
  datadir = sgetpar(fp, "datadir", "/dev/null/", true);
  datadir = AppendHomeDirIfPathRelative(datadir);
  if (strcmp(datadir, "."))
    MakeDir(datadir);
  export_fn_prefix = sgetpar(fp, "export_fn_prefix", "tissue.", true);
  export_interval = igetpar(fp, "export_interval", 1, true);
  xml_storage_stride = igetpar(fp, "xml_storage_stride", 0, true);
  movie = bgetpar(fp, "movie", false, true);
  storage_stride = igetpar(fp, "storage_stride", 1, true);
  dt = fgetpar(fp, "dt", 0.1, true);
  rd_dt = fgetpar(fp, "rd_dt", 1, true);
  ode_accuracy = fgetpar(fp, "ode_accuracy", 0.0001, true);
  nit = igetpar(fp, "nit", 0, true);
  maxt = fgetpar(fp, "maxt", 150, true);
  rseed = igetpar(fp, "rseed", -1, true);
  T = fgetpar(fp, "T", 1, true);
  lambda_length = fgetpar(fp, "lambda_length", 100, true);
  mc_stepsize = fgetpar(fp, "mc_stepsize", 0.4, true);
  collapse_node_threshold = fgetpar(fp, "collapse_node_threshold", 0.05, true);
  yielding_threshold = fgetpar(fp, "yielding_threshold", 2, true);
  rel_perimeter_stiffness = fgetpar(fp, "rel_perimeter_stiffness", 2, true);
  copy_wall = bgetpar(fp, "copy_wall", false, true);
  energy_threshold = fgetpar(fp, "energy_threshold", 1000, true);
  mc_cell_stepsize = fgetpar(fp, "mc_cell_stepsize", 0.2, true);
  lambda_celllength = fgetpar(fp, "lambda_celllength", 0, true);
  target_length = fgetpar(fp, "target_length", 0, true);
  bend_lambda = fgetpar(fp, "bend_lambda", 0, true);
  alignment_lambda = fgetpar(fp, "alignment_lambda", 0, true);
  D = dgetparlist(fp, "D", 15, true);
  initval = dgetparlist(fp, "initval", 15, true);
  k1 = fgetpar(fp, "k1", 0, true);
  k2 = fgetpar(fp, "k2", 0, true);
  k3 = fgetpar(fp, "k3", 0, true);
  k4 = fgetpar(fp, "k4", 0, true);
  k5 = fgetpar(fp, "k5", 0, true);
  k6 = fgetpar(fp, "k6", 0, true);
  k7 = fgetpar(fp, "k7", 0, true);
  k8 = fgetpar(fp, "k8", 0, true);
  k9 = fgetpar(fp, "k9", 0, true);
  k10 = fgetpar(fp, "k10", 0, true);
  wk1 = fgetpar(fp, "wk1", 0, true);
  wk2 = fgetpar(fp, "wk2", 0, true);
  wk3 = fgetpar(fp, "wk3", 0, true);
  wk4 = fgetpar(fp, "wk4", 0, true);
  wk5 = fgetpar(fp, "wk5", 0, true);
  wk6 = fgetpar(fp, "wk6", 0, true);
  wk7 = fgetpar(fp, "wk7", 0, true);
  wk8 = fgetpar(fp, "wk8", 0, true);
  wk9 = fgetpar(fp, "wk9", 0, true);
  wk10 = fgetpar(fp, "wk10", 0, true);
}

const char *sbool(const bool &p) {

  const char *true_str="true";
  const char *false_str="false";
  if (p)
    return true_str;
  else
    return false_str;
}

void Parameter::Write(ostream &os) const {


  if (arrowcolor) 
  os << " arrowcolor = " << arrowcolor << "\n";
  os << " arrowlength = " << arrowlength << "\n";

  if (textcolor) 
  os << " textcolor = " << textcolor << "\n";
  os << " cellnumsize = " << cellnumsize << "\n";
  os << " nodenumsize = " << nodenumsize << "\n";
  os << " node_mag = " << node_mag << "\n";
  os << " outlinewidth = " << outlinewidth << "\n";

  if (cell_outline_color) 
  os << " cell_outline_color = " << cell_outline_color << "\n";
  os << " resize_stride = " << resize_stride << "\n";
  if (datadir) {
                                     QDir dataDir = QDir::home().relativeFilePath(datadir);
                                     os << " datadir = " << dataDir.dirName().toStdString() << "\n";
                                 }
                                 else {
                                     os << "datadir = ." << "\n";
                                 }

  if (export_fn_prefix) 
  os << " export_fn_prefix = " << export_fn_prefix << "\n";
  os << " export_interval = " << export_interval << "\n";
  os << " xml_storage_stride = " << xml_storage_stride << "\n";
  os << " movie = " << sbool(movie) << "\n";
  os << " storage_stride = " << storage_stride << "\n";
  os << " dt = " << dt << "\n";
  os << " rd_dt = " << rd_dt << "\n";
  os << " ode_accuracy = " << ode_accuracy << "\n";
  os << " nit = " << nit << "\n";
  os << " maxt = " << maxt << "\n";
  os << " rseed = " << rseed << "\n";
  os << " T = " << T << "\n";
  os << " lambda_length = " << lambda_length << "\n";
  os << " mc_stepsize = " << mc_stepsize << "\n";
  os << " collapse_node_threshold = " << collapse_node_threshold << "\n";
  os << " yielding_threshold = " << yielding_threshold << "\n";
  os << " rel_perimeter_stiffness = " << rel_perimeter_stiffness << "\n";
  os << " copy_wall = " << sbool(copy_wall) << "\n";
  os << " energy_threshold = " << energy_threshold << "\n";
  os << " mc_cell_stepsize = " << mc_cell_stepsize << "\n";
  os << " lambda_celllength = " << lambda_celllength << "\n";
  os << " target_length = " << target_length << "\n";
  os << " bend_lambda = " << bend_lambda << "\n";
  os << " alignment_lambda = " << alignment_lambda << "\n";
  os << " D = "<< D[0] << ", " << D[1] << ", " << D[2] << ", " << D[3] << ", " << D[4] << ", " << D[5] << ", " << D[6] << ", " << D[7] << ", " << D[8] << ", " << D[9] << ", " << D[10] << ", " << D[11] << ", " << D[12] << ", " << D[13] << ", " << D[14] << "\n";
  os << " initval = "<< initval[0] << ", " << initval[1] << ", " << initval[2] << ", " << initval[3] << ", " << initval[4] << ", " << initval[5] << ", " << initval[6] << ", " << initval[7] << ", " << initval[8] << ", " << initval[9] << ", " << initval[10] << ", " << initval[11] << ", " << initval[12] << ", " << initval[13] << ", " << initval[14] << "\n";
  os << " k1 = " << k1 << "\n";
  os << " k2 = " << k2 << "\n";
  os << " k3 = " << k3 << "\n";
  os << " k4 = " << k4 << "\n";
  os << " k5 = " << k5 << "\n";
  os << " k6 = " << k6 << "\n";
  os << " k7 = " << k7 << "\n";
  os << " k8 = " << k8 << "\n";
  os << " k9 = " << k9 << "\n";
  os << " k10 = " << k10 << "\n";
  os << " wk1 = " << wk1 << "\n";
  os << " wk2 = " << wk2 << "\n";
  os << " wk3 = " << wk3 << "\n";
  os << " wk4 = " << wk4 << "\n";
  os << " wk5 = " << wk5 << "\n";
  os << " wk6 = " << wk6 << "\n";
  os << " wk7 = " << wk7 << "\n";
  os << " wk8 = " << wk8 << "\n";
  os << " wk9 = " << wk9 << "\n";
  os << " wk10 = " << wk10 << "\n";
}

void Parameter::XMLAdd(xmlNode *root) const {
    xmlNode *xmlparameter = xmlNewChild(root, NULL, BAD_CAST "parameter", NULL);
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "arrowcolor" );
  ostringstream text;

  if (arrowcolor) 
    text << arrowcolor;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "arrowlength" );
  ostringstream text;
    text << arrowlength;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "textcolor" );
  ostringstream text;

  if (textcolor) 
    text << textcolor;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "cellnumsize" );
  ostringstream text;
    text << cellnumsize;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "nodenumsize" );
  ostringstream text;
    text << nodenumsize;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "node_mag" );
  ostringstream text;
    text << node_mag;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "outlinewidth" );
  ostringstream text;
    text << outlinewidth;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "cell_outline_color" );
  ostringstream text;

  if (cell_outline_color) 
    text << cell_outline_color;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "resize_stride" );
  ostringstream text;
    text << resize_stride;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "datadir" );
  ostringstream text;

  if (datadir) {
                                     QDir dataDir = QDir::home().relativeFilePath(datadir);
                                     text << dataDir.dirName().toStdString();
                                   }
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "export_fn_prefix" );
  ostringstream text;

  if (export_fn_prefix) 
    text << export_fn_prefix;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "export_interval" );
  ostringstream text;
    text << export_interval;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "xml_storage_stride" );
  ostringstream text;
    text << xml_storage_stride;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "movie" );
  ostringstream text;
text << sbool(movie);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "storage_stride" );
  ostringstream text;
    text << storage_stride;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "dt" );
  ostringstream text;
    text << dt;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "rd_dt" );
  ostringstream text;
    text << rd_dt;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "ode_accuracy" );
  ostringstream text;
    text << ode_accuracy;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "nit" );
  ostringstream text;
    text << nit;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "maxt" );
  ostringstream text;
    text << maxt;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "rseed" );
  ostringstream text;
    text << rseed;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "T" );
  ostringstream text;
    text << T;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "lambda_length" );
  ostringstream text;
    text << lambda_length;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "mc_stepsize" );
  ostringstream text;
    text << mc_stepsize;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "collapse_node_threshold" );
  ostringstream text;
    text << collapse_node_threshold;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "yielding_threshold" );
  ostringstream text;
    text << yielding_threshold;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "rel_perimeter_stiffness" );
  ostringstream text;
    text << rel_perimeter_stiffness;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "copy_wall" );
  ostringstream text;
text << sbool(copy_wall);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "energy_threshold" );
  ostringstream text;
    text << energy_threshold;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "mc_cell_stepsize" );
  ostringstream text;
    text << mc_cell_stepsize;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "lambda_celllength" );
  ostringstream text;
    text << lambda_celllength;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "target_length" );
  ostringstream text;
    text << target_length;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "bend_lambda" );
  ostringstream text;
    text << bend_lambda;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "alignment_lambda" );
  ostringstream text;
    text << alignment_lambda;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "D" );
  xmlNode *xmlvalarray = xmlNewChild(xmlpar, NULL, BAD_CAST "valarray", NULL);
  {
    ostringstream text;
    text << D[0];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[1];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[2];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[3];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[4];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[5];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[6];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[7];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[8];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[9];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[10];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[11];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[12];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[13];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << D[14];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "initval" );
  xmlNode *xmlvalarray = xmlNewChild(xmlpar, NULL, BAD_CAST "valarray", NULL);
  {
    ostringstream text;
    text << initval[0];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[1];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[2];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[3];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[4];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[5];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[6];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[7];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[8];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[9];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[10];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[11];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[12];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[13];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
  {
    ostringstream text;
    text << initval[14];
    xmlNode *xmlval = xmlNewChild(xmlvalarray, NULL, BAD_CAST "val", NULL);
    xmlNewProp(xmlval, BAD_CAST "v", BAD_CAST text.str().c_str());
  }
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k1" );
  ostringstream text;
    text << k1;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k2" );
  ostringstream text;
    text << k2;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k3" );
  ostringstream text;
    text << k3;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k4" );
  ostringstream text;
    text << k4;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k5" );
  ostringstream text;
    text << k5;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k6" );
  ostringstream text;
    text << k6;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k7" );
  ostringstream text;
    text << k7;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k8" );
  ostringstream text;
    text << k8;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k9" );
  ostringstream text;
    text << k9;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "k10" );
  ostringstream text;
    text << k10;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk1" );
  ostringstream text;
    text << wk1;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk2" );
  ostringstream text;
    text << wk2;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk3" );
  ostringstream text;
    text << wk3;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk4" );
  ostringstream text;
    text << wk4;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk5" );
  ostringstream text;
    text << wk5;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk6" );
  ostringstream text;
    text << wk6;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk7" );
  ostringstream text;
    text << wk7;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk8" );
  ostringstream text;
    text << wk8;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk9" );
  ostringstream text;
    text << wk9;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "wk10" );
  ostringstream text;
    text << wk10;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
}
void Parameter::AssignValToPar(const char *namec, const char *valc) {
  QLocale standardlocale(QLocale::C);
  bool ok;
if (!strcmp(namec, "arrowcolor")) {
  if (arrowcolor) { free(arrowcolor); }
  arrowcolor=strdup(valc);
}
if (!strcmp(namec, "arrowlength")) {
  arrowlength = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'arrowlength' from XML file.",valc); }
}
if (!strcmp(namec, "textcolor")) {
  if (textcolor) { free(textcolor); }
  textcolor=strdup(valc);
}
if (!strcmp(namec, "cellnumsize")) {
  cellnumsize = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'cellnumsize' from XML file.",valc); }
}
if (!strcmp(namec, "nodenumsize")) {
  nodenumsize = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'nodenumsize' from XML file.",valc); }
}
if (!strcmp(namec, "node_mag")) {
  node_mag = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'node_mag' from XML file.",valc); }
}
if (!strcmp(namec, "outlinewidth")) {
  outlinewidth = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'outlinewidth' from XML file.",valc); }
}
if (!strcmp(namec, "cell_outline_color")) {
  if (cell_outline_color) { free(cell_outline_color); }
  cell_outline_color=strdup(valc);
}
if (!strcmp(namec, "resize_stride")) {
  resize_stride = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'resize_stride' from XML file.",valc); }
}
if (!strcmp(namec, "datadir")) {
  if (datadir) { free(datadir); }
  datadir=strdup(valc);
  datadir = AppendHomeDirIfPathRelative(datadir);
}
if (!strcmp(namec, "export_fn_prefix")) {
  if (export_fn_prefix) { free(export_fn_prefix); }
  export_fn_prefix=strdup(valc);
}
if (!strcmp(namec, "export_interval")) {
  export_interval = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'export_interval' from XML file.",valc); }
}
if (!strcmp(namec, "xml_storage_stride")) {
  xml_storage_stride = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'xml_storage_stride' from XML file.",valc); }
}
if (!strcmp(namec, "movie")) {
movie = strtobool(valc);
}
if (!strcmp(namec, "storage_stride")) {
  storage_stride = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'storage_stride' from XML file.",valc); }
}
if (!strcmp(namec, "dt")) {
  dt = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'dt' from XML file.",valc); }
}
if (!strcmp(namec, "rd_dt")) {
  rd_dt = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'rd_dt' from XML file.",valc); }
}
if (!strcmp(namec, "ode_accuracy")) {
  ode_accuracy = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'ode_accuracy' from XML file.",valc); }
}
if (!strcmp(namec, "nit")) {
  nit = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'nit' from XML file.",valc); }
}
if (!strcmp(namec, "maxt")) {
  maxt = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'maxt' from XML file.",valc); }
}
if (!strcmp(namec, "rseed")) {
  rseed = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'rseed' from XML file.",valc); }
}
if (!strcmp(namec, "T")) {
  T = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'T' from XML file.",valc); }
}
if (!strcmp(namec, "lambda_length")) {
  lambda_length = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'lambda_length' from XML file.",valc); }
}
if (!strcmp(namec, "mc_stepsize")) {
  mc_stepsize = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'mc_stepsize' from XML file.",valc); }
}
if (!strcmp(namec, "collapse_node_threshold")) {
  collapse_node_threshold = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'collapse_node_threshold' from XML file.",valc); }
}
if (!strcmp(namec, "yielding_threshold")) {
  yielding_threshold = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'yielding_threshold' from XML file.",valc); }
}
if (!strcmp(namec, "rel_perimeter_stiffness")) {
  rel_perimeter_stiffness = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'rel_perimeter_stiffness' from XML file.",valc); }
}
if (!strcmp(namec, "copy_wall")) {
copy_wall = strtobool(valc);
}
if (!strcmp(namec, "energy_threshold")) {
  energy_threshold = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'energy_threshold' from XML file.",valc); }
}
if (!strcmp(namec, "mc_cell_stepsize")) {
  mc_cell_stepsize = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'mc_cell_stepsize' from XML file.",valc); }
}
if (!strcmp(namec, "lambda_celllength")) {
  lambda_celllength = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'lambda_celllength' from XML file.",valc); }
}
if (!strcmp(namec, "target_length")) {
  target_length = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'target_length' from XML file.",valc); }
}
if (!strcmp(namec, "bend_lambda")) {
  bend_lambda = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'bend_lambda' from XML file.",valc); }
}
if (!strcmp(namec, "alignment_lambda")) {
  alignment_lambda = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'alignment_lambda' from XML file.",valc); }
}
if (!strcmp(namec, "k1")) {
  k1 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k1' from XML file.",valc); }
}
if (!strcmp(namec, "k2")) {
  k2 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k2' from XML file.",valc); }
}
if (!strcmp(namec, "k3")) {
  k3 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k3' from XML file.",valc); }
}
if (!strcmp(namec, "k4")) {
  k4 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k4' from XML file.",valc); }
}
if (!strcmp(namec, "k5")) {
  k5 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k5' from XML file.",valc); }
}
if (!strcmp(namec, "k6")) {
  k6 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k6' from XML file.",valc); }
}
if (!strcmp(namec, "k7")) {
  k7 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k7' from XML file.",valc); }
}
if (!strcmp(namec, "k8")) {
  k8 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k8' from XML file.",valc); }
}
if (!strcmp(namec, "k9")) {
  k9 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k9' from XML file.",valc); }
}
if (!strcmp(namec, "k10")) {
  k10 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'k10' from XML file.",valc); }
}
if (!strcmp(namec, "wk1")) {
  wk1 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk1' from XML file.",valc); }
}
if (!strcmp(namec, "wk2")) {
  wk2 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk2' from XML file.",valc); }
}
if (!strcmp(namec, "wk3")) {
  wk3 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk3' from XML file.",valc); }
}
if (!strcmp(namec, "wk4")) {
  wk4 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk4' from XML file.",valc); }
}
if (!strcmp(namec, "wk5")) {
  wk5 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk5' from XML file.",valc); }
}
if (!strcmp(namec, "wk6")) {
  wk6 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk6' from XML file.",valc); }
}
if (!strcmp(namec, "wk7")) {
  wk7 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk7' from XML file.",valc); }
}
if (!strcmp(namec, "wk8")) {
  wk8 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk8' from XML file.",valc); }
}
if (!strcmp(namec, "wk9")) {
  wk9 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk9' from XML file.",valc); }
}
if (!strcmp(namec, "wk10")) {
  wk10 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'wk10' from XML file.",valc); }
}
}
void Parameter::AssignValArrayToPar(const char *namec, vector<double> valarray) {
if (!strcmp(namec, "D")) {
  int i=0;
  vector<double>::const_iterator v=valarray.begin();
  while (v!=valarray.end() && i <= 14 ) {
     D[i++]=*(v++);
  }
}
if (!strcmp(namec, "initval")) {
  int i=0;
  vector<double>::const_iterator v=valarray.begin();
  while (v!=valarray.end() && i <= 14 ) {
     initval[i++]=*(v++);
  }
}
}

ostream &operator<<(ostream &os, Parameter &p) {
    p.Write(os);
    return os;
}


/*
 *
 *  This file is part of the Virtual Leaf.
 *
 *  VirtualLeaf is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  VirtualLeaf is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2010 Roeland Merks.
 *
 */

// WARNING: This file is automatically generated by make_parameter_source.pl. Do not edit.
// Do not edit. All edits will be discarded.

#include "pardialog.h"
#include "parameter.h"
#include <cstring>
#include <qdialog.h>
#include <qlabel.h>
#include <qlineedit.h>
#include <qmessagebox.h>

static const std::string _module_id("$Id$");

ParameterDialog::ParameterDialog(QWidget *parent, const char *name, Qt::WindowFlags f) : QDialog(parent,name,false,f) {
    extern Parameter par;
  arrowcolor_edit = new QLineEdit( QString("%1").arg(par.arrowcolor), this, "arrowcolor_edit" );
  arrowlength_edit = new QLineEdit( QString("%1").arg(par.arrowlength), this, "arrowlength_edit" );
  textcolor_edit = new QLineEdit( QString("%1").arg(par.textcolor), this, "textcolor_edit" );
  cellnumsize_edit = new QLineEdit( QString("%1").arg(par.cellnumsize), this, "cellnumsize_edit" );
  nodenumsize_edit = new QLineEdit( QString("%1").arg(par.nodenumsize), this, "nodenumsize_edit" );
  node_mag_edit = new QLineEdit( QString("%1").arg(par.node_mag), this, "node_mag_edit" );
  outlinewidth_edit = new QLineEdit( QString("%1").arg(par.outlinewidth), this, "outlinewidth_edit" );
  cell_outline_color_edit = new QLineEdit( QString("%1").arg(par.cell_outline_color), this, "cell_outline_color_edit" );
  resize_stride_edit = new QLineEdit( QString("%1").arg(par.resize_stride), this, "resize_stride_edit" );
  datadir_edit = new QLineEdit( QString("%1").arg(par.datadir), this, "datadir_edit" );
  export_fn_prefix_edit = new QLineEdit( QString("%1").arg(par.export_fn_prefix), this, "export_fn_prefix_edit" );
  export_interval_edit = new QLineEdit( QString("%1").arg(par.export_interval), this, "export_interval_edit" );
  xml_storage_stride_edit = new QLineEdit( QString("%1").arg(par.xml_storage_stride), this, "xml_storage_stride_edit" );
  movie_edit = new QLineEdit( QString("%1").arg(sbool(par.movie)), this, "movie_edit" );
  storage_stride_edit = new QLineEdit( QString("%1").arg(par.storage_stride), this, "storage_stride_edit" );
  dt_edit = new QLineEdit( QString("%1").arg(par.dt), this, "dt_edit" );
  rd_dt_edit = new QLineEdit( QString("%1").arg(par.rd_dt), this, "rd_dt_edit" );
  ode_accuracy_edit = new QLineEdit( QString("%1").arg(par.ode_accuracy), this, "ode_accuracy_edit" );
  nit_edit = new QLineEdit( QString("%1").arg(par.nit), this, "nit_edit" );
  maxt_edit = new QLineEdit( QString("%1").arg(par.maxt), this, "maxt_edit" );
  rseed_edit = new QLineEdit( QString("%1").arg(par.rseed), this, "rseed_edit" );
  T_edit = new QLineEdit( QString("%1").arg(par.T), this, "T_edit" );
  lambda_length_edit = new QLineEdit( QString("%1").arg(par.lambda_length), this, "lambda_length_edit" );
  mc_stepsize_edit = new QLineEdit( QString("%1").arg(par.mc_stepsize), this, "mc_stepsize_edit" );
  collapse_node_threshold_edit = new QLineEdit( QString("%1").arg(par.collapse_node_threshold), this, "collapse_node_threshold_edit" );
  yielding_threshold_edit = new QLineEdit( QString("%1").arg(par.yielding_threshold), this, "yielding_threshold_edit" );
  rel_perimeter_stiffness_edit = new QLineEdit( QString("%1").arg(par.rel_perimeter_stiffness), this, "rel_perimeter_stiffness_edit" );
  copy_wall_edit = new QLineEdit( QString("%1").arg(sbool(par.copy_wall)), this, "copy_wall_edit" );
  energy_threshold_edit = new QLineEdit( QString("%1").arg(par.energy_threshold), this, "energy_threshold_edit" );
  mc_cell_stepsize_edit = new QLineEdit( QString("%1").arg(par.mc_cell_stepsize), this, "mc_cell_stepsize_edit" );
  lambda_celllength_edit = new QLineEdit( QString("%1").arg(par.lambda_celllength), this, "lambda_celllength_edit" );
  target_length_edit = new QLineEdit( QString("%1").arg(par.target_length), this, "target_length_edit" );
  bend_lambda_edit = new QLineEdit( QString("%1").arg(par.bend_lambda), this, "bend_lambda_edit" );
  alignment_lambda_edit = new QLineEdit( QString("%1").arg(par.alignment_lambda), this, "alignment_lambda_edit" );
  QString D_string("%1,%2,%3,%4,%5,%6,%7,%8,%9,%10,%11,%12,%13,%14,%15");
  D_string = D_string.arg(par.D[0]).arg(par.D[1]).arg(par.D[2]).arg(par.D[3]).arg(par.D[4]).arg(par.D[5]).arg(par.D[6]).arg(par.D[7]).arg(par.D[8]).arg(par.D[9]).arg(par.D[10]).arg(par.D[11]).arg(par.D[12]).arg(par.D[13]).arg(par.D[14]);
  D_edit = new QLineEdit( D_string, this, "D_edit" );
  QString initval_string("%1,%2,%3,%4,%5,%6,%7,%8,%9,%10,%11,%12,%13,%14,%15");
  initval_string = initval_string.arg(par.initval[0]).arg(par.initval[1]).arg(par.initval[2]).arg(par.initval[3]).arg(par.initval[4]).arg(par.initval[5]).arg(par.initval[6]).arg(par.initval[7]).arg(par.initval[8]).arg(par.initval[9]).arg(par.initval[10]).arg(par.initval[11]).arg(par.initval[12]).arg(par.initval[13]).arg(par.initval[14]);
  initval_edit = new QLineEdit( initval_string, this, "initval_edit" );
  k1_edit = new QLineEdit( QString("%1").arg(par.k1), this, "k1_edit" );
  k2_edit = new QLineEdit( QString("%1").arg(par.k2), this, "k2_edit" );
  k3_edit = new QLineEdit( QString("%1").arg(par.k3), this, "k3_edit" );
  k4_edit = new QLineEdit( QString("%1").arg(par.k4), this, "k4_edit" );
  k5_edit = new QLineEdit( QString("%1").arg(par.k5), this, "k5_edit" );
  k6_edit = new QLineEdit( QString("%1").arg(par.k6), this, "k6_edit" );
  k7_edit = new QLineEdit( QString("%1").arg(par.k7), this, "k7_edit" );
  k8_edit = new QLineEdit( QString("%1").arg(par.k8), this, "k8_edit" );
  k9_edit = new QLineEdit( QString("%1").arg(par.k9), this, "k9_edit" );
  k10_edit = new QLineEdit( QString("%1").arg(par.k10), this, "k10_edit" );
  wk1_edit = new QLineEdit( QString("%1").arg(par.wk1), this, "wk1_edit" );
  wk2_edit = new QLineEdit( QString("%1").arg(par.wk2), this, "wk2_edit" );
  wk3_edit = new QLineEdit( QString("%1").arg(par.wk3), this, "wk3_edit" );
  wk4_edit = new QLineEdit( QString("%1").arg(par.wk4), this, "wk4_edit" );
  wk5_edit = new QLineEdit( QString("%1").arg(par.wk5), this, "wk5_edit" );
  wk6_edit = new QLineEdit( QString("%1").arg(par.wk6), this, "wk6_edit" );
  wk7_edit = new QLineEdit( QString("%1").arg(par.wk7), this, "wk7_edit" );
  wk8_edit = new QLineEdit( QString("%1").arg(par.wk8), this, "wk8_edit" );
  wk9_edit = new QLineEdit( QString("%1").arg(par.wk9), this, "wk9_edit" );
  wk10_edit = new QLineEdit( QString("%1").arg(par.wk10), this, "wk10_edit" );
// make a 1x1 grid; it will auto-expand
QGridLayout *grid = new QGridLayout( this, 1, 1 );
    
// add the first four widgets with (row, column) addressing
  setWindowTitle( QString( " PARAMETER LIST") );
  grid->addWidget( new QLabel( "<h3> PARAMETER LIST</h3>",this), 0, 0, 1, -1, Qt::AlignCenter);
  grid->addWidget( new QLabel( "", this), 0+1, 0, 1, -1);
  grid->addWidget( new QLabel( " <b>Visualization</b>", this), 3, 0, 1, 2 );
  grid->addWidget( new QLabel( "arrowcolor", this ),4, 0 );
  grid->addWidget( arrowcolor_edit, 4, 0+1  );
  grid->addWidget( new QLabel( "arrowlength", this ),5, 0 );
  grid->addWidget( arrowlength_edit, 5, 0+1  );
  grid->addWidget( new QLabel( "textcolor", this ),6, 0 );
  grid->addWidget( textcolor_edit, 6, 0+1  );
  grid->addWidget( new QLabel( "cellnumsize", this ),7, 0 );
  grid->addWidget( cellnumsize_edit, 7, 0+1  );
  grid->addWidget( new QLabel( "nodenumsize", this ),8, 0 );
  grid->addWidget( nodenumsize_edit, 8, 0+1  );
  grid->addWidget( new QLabel( "node_mag", this ),9, 0 );
  grid->addWidget( node_mag_edit, 9, 0+1  );
  grid->addWidget( new QLabel( "outlinewidth", this ),10, 0 );
  grid->addWidget( outlinewidth_edit, 10, 0+1  );
  grid->addWidget( new QLabel( "cell_outline_color", this ),11, 0 );
  grid->addWidget( cell_outline_color_edit, 11, 0+1  );
  grid->addWidget( new QLabel( "resize_stride", this ),12, 0 );
  grid->addWidget( resize_stride_edit, 12, 0+1  );
  grid->addWidget( new QLabel( "", this), 13, 0, 1, 2 );
  grid->addWidget( new QLabel( " <b>Data Storage</b>", this), 14, 0, 1, 2 );
  grid->addWidget( new QLabel( "datadir", this ),15, 0 );
  grid->addWidget( datadir_edit, 15, 0+1  );
  grid->addWidget( new QLabel( "export_fn_prefix", this ),16, 0 );
  grid->addWidget( export_fn_prefix_edit, 16, 0+1  );
  grid->addWidget( new QLabel( "export_interval", this ),17, 0 );
  grid->addWidget( export_interval_edit, 17, 0+1  );
  grid->addWidget( new QLabel( "xml_storage_stride", this ),18, 0 );
  grid->addWidget( xml_storage_stride_edit, 18, 0+1  );
  grid->addWidget( new QLabel( "movie", this ),19, 0 );
  grid->addWidget( movie_edit, 19, 0+1  );
  grid->addWidget( new QLabel( "storage_stride", this ),20, 0 );
  grid->addWidget( storage_stride_edit, 20, 0+1  );
  grid->addWidget( new QLabel( "", this), 21, 0, 1, 2 );
  grid->addWidget( new QLabel( " <b>Solver</b>", this), 22, 0, 1, 2 );
  grid->addWidget( new QLabel( "dt", this ),23, 0 );
  grid->addWidget( dt_edit, 23, 0+1  );
  grid->addWidget( new QLabel( "rd_dt", this ),24, 0 );
  grid->addWidget( rd_dt_edit, 24, 0+1  );
  grid->addWidget( new QLabel( "ode_accuracy", this ),25, 0 );
  grid->addWidget( ode_accuracy_edit, 25, 0+1  );
  grid->addWidget( new QLabel( "", this), 26, 0, 1, 2 );
  grid->addWidget( new QLabel( " <b>Timers</b>", this), 27, 0, 1, 2 );
  grid->addWidget( new QLabel( "nit", this ),28, 0 );
  grid->addWidget( nit_edit, 28, 0+1  );
  grid->addWidget( new QLabel( "maxt", this ),29, 0 );
  grid->addWidget( maxt_edit, 29, 0+1  );
  grid->addWidget( new QLabel( "", this), 3, 2, 1, 2 );
  grid->addWidget( new QLabel( " <b>Energy Calculations</b>", this), 4, 2, 1, 2 );
  grid->addWidget( new QLabel( "rseed", this ),5, 2 );
  grid->addWidget( rseed_edit, 5, 2+1  );
  grid->addWidget( new QLabel( " Nodes", this), 6, 2, 1, 2 );
  grid->addWidget( new QLabel( "T", this ),7, 2 );
  grid->addWidget( T_edit, 7, 2+1  );
  grid->addWidget( new QLabel( "lambda_length", this ),8, 2 );
  grid->addWidget( lambda_length_edit, 8, 2+1  );
  grid->addWidget( new QLabel( "mc_stepsize", this ),9, 2 );
  grid->addWidget( mc_stepsize_edit, 9, 2+1  );
  grid->addWidget( new QLabel( "collapse_node_threshold", this ),10, 2 );
  grid->addWidget( collapse_node_threshold_edit, 10, 2+1  );
  grid->addWidget( new QLabel( " Walls", this), 11, 2, 1, 2 );
  grid->addWidget( new QLabel( "yielding_threshold", this ),12, 2 );
  grid->addWidget( yielding_threshold_edit, 12, 2+1  );
  grid->addWidget( new QLabel( "rel_perimeter_stiffness", this ),13, 2 );
  grid->addWidget( rel_perimeter_stiffness_edit, 13, 2+1  );
  grid->addWidget( new QLabel( "copy_wall", this ),14, 2 );
  grid->addWidget( copy_wall_edit, 14, 2+1  );
  grid->addWidget( new QLabel( " Cells", this), 15, 2, 1, 2 );
  grid->addWidget( new QLabel( "energy_threshold", this ),16, 2 );
  grid->addWidget( energy_threshold_edit, 16, 2+1  );
  grid->addWidget( new QLabel( "mc_cell_stepsize", this ),17, 2 );
  grid->addWidget( mc_cell_stepsize_edit, 17, 2+1  );
  grid->addWidget( new QLabel( "lambda_celllength", this ),18, 2 );
  grid->addWidget( lambda_celllength_edit, 18, 2+1  );
  grid->addWidget( new QLabel( "target_length", this ),19, 2 );
  grid->addWidget( target_length_edit, 19, 2+1  );
  grid->addWidget( new QLabel( "bend_lambda", this ),20, 2 );
  grid->addWidget( bend_lambda_edit, 20, 2+1  );
  grid->addWidget( new QLabel( "alignment_lambda", this ),21, 2 );
  grid->addWidget( alignment_lambda_edit, 21, 2+1  );
  grid->addWidget( new QLabel( "", this), 22, 2, 1, 2 );
  grid->addWidget( new QLabel( " <b>Substance dynamics</b>", this), 23, 2, 1, 2 );
  grid->addWidget( new QLabel( "D", this ),24, 2 );
  grid->addWidget( D_edit, 24, 2+1  );
  grid->addWidget( new QLabel( "initval", this ),25, 2 );
  grid->addWidget( initval_edit, 25, 2+1  );
  grid->addWidget( new QLabel( "", this), 26, 2, 1, 2 );
  grid->addWidget( new QLabel( "", this), 27, 2, 1, 2 );
  grid->addWidget( new QLabel( "", this), 28, 2, 1, 2 );
  grid->addWidget( new QLabel( "", this), 29, 2, 1, 2 );
  grid->addWidget( new QLabel( " <b>Free parameters</b>", this), 3, 4, 1, 2 );
  grid->addWidget( new QLabel( " Cells", this), 4, 4, 1, 2 );
  grid->addWidget( new QLabel( "k1", this ),5, 4 );
  grid->addWidget( k1_edit, 5, 4+1  );
  grid->addWidget( new QLabel( "k2", this ),6, 4 );
  grid->addWidget( k2_edit, 6, 4+1  );
  grid->addWidget( new QLabel( "k3", this ),7, 4 );
  grid->addWidget( k3_edit, 7, 4+1  );
  grid->addWidget( new QLabel( "k4", this ),8, 4 );
  grid->addWidget( k4_edit, 8, 4+1  );
  grid->addWidget( new QLabel( "k5", this ),9, 4 );
  grid->addWidget( k5_edit, 9, 4+1  );
  grid->addWidget( new QLabel( "k6", this ),10, 4 );
  grid->addWidget( k6_edit, 10, 4+1  );
  grid->addWidget( new QLabel( "k7", this ),11, 4 );
  grid->addWidget( k7_edit, 11, 4+1  );
  grid->addWidget( new QLabel( "k8", this ),12, 4 );
  grid->addWidget( k8_edit, 12, 4+1  );
  grid->addWidget( new QLabel( "k9", this ),13, 4 );
  grid->addWidget( k9_edit, 13, 4+1  );
  grid->addWidget( new QLabel( "k10", this ),14, 4 );
  grid->addWidget( k10_edit, 14, 4+1  );
  grid->addWidget( new QLabel( "", this), 15, 4, 1, 2 );
  grid->addWidget( new QLabel( " Walls", this), 16, 4, 1, 2 );
  grid->addWidget( new QLabel( "wk1", this ),17, 4 );
  grid->addWidget( wk1_edit, 17, 4+1  );
  grid->addWidget( new QLabel( "wk2", this ),18, 4 );
  grid->addWidget( wk2_edit, 18, 4+1  );
  grid->addWidget( new QLabel( "wk3", this ),19, 4 );
  grid->addWidget( wk3_edit, 19, 4+1  );
  grid->addWidget( new QLabel( "wk4", this ),20, 4 );
  grid->addWidget( wk4_edit, 20, 4+1  );
  grid->addWidget( new QLabel( "wk5", this ),21, 4 );
  grid->addWidget( wk5_edit, 21, 4+1  );
  grid->addWidget( new QLabel( "wk6", this ),22, 4 );
  grid->addWidget( wk6_edit, 22, 4+1  );
  grid->addWidget( new QLabel( "wk7", this ),23, 4 );
  grid->addWidget( wk7_edit, 23, 4+1  );
  grid->addWidget( new QLabel( "wk8", this ),24, 4 );
  grid->addWidget( wk8_edit, 24, 4+1  );
  grid->addWidget( new QLabel( "wk9", this ),25, 4 );
  grid->addWidget( wk9_edit, 25, 4+1  );
  grid->addWidget( new QLabel( "wk10", this ),26, 4 );
  grid->addWidget( wk10_edit, 26, 4+1  );
QPushButton *pb = new QPushButton( "&Write", this );
grid->addWidget(pb, 31, 4 );
connect( pb, SIGNAL( clicked() ), this, SLOT( write() ) );
QPushButton *pb2 = new QPushButton( "&Close", this );
grid->addWidget(pb2,31, 4+1 );
connect( pb2, SIGNAL( clicked() ), this, SLOT( close() ) );
QPushButton *pb3 = new QPushButton( "&Reset", this );
grid->addWidget(pb3, 31, 4+2 );
connect( pb3, SIGNAL( clicked() ), this, SLOT( Reset() ) );
show();
};

ParameterDialog::~ParameterDialog(void) {
delete arrowcolor_edit;
delete arrowlength_edit;
delete textcolor_edit;
delete cellnumsize_edit;
delete nodenumsize_edit;
delete node_mag_edit;
delete outlinewidth_edit;
delete cell_outline_color_edit;
delete resize_stride_edit;
delete datadir_edit;
delete export_fn_prefix_edit;
delete export_interval_edit;
delete xml_storage_stride_edit;
delete movie_edit;
delete storage_stride_edit;
delete dt_edit;
delete rd_dt_edit;
delete ode_accuracy_edit;
delete nit_edit;
delete maxt_edit;
delete rseed_edit;
delete T_edit;
delete lambda_length_edit;
delete mc_stepsize_edit;
delete collapse_node_threshold_edit;
delete yielding_threshold_edit;
delete rel_perimeter_stiffness_edit;
delete copy_wall_edit;
delete energy_threshold_edit;
delete mc_cell_stepsize_edit;
delete lambda_celllength_edit;
delete target_length_edit;
delete bend_lambda_edit;
delete alignment_lambda_edit;
delete D_edit;
delete initval_edit;
delete k1_edit;
delete k2_edit;
delete k3_edit;
delete k4_edit;
delete k5_edit;
delete k6_edit;
delete k7_edit;
delete k8_edit;
delete k9_edit;
delete k10_edit;
delete wk1_edit;
delete wk2_edit;
delete wk3_edit;
delete wk4_edit;
delete wk5_edit;
delete wk6_edit;
delete wk7_edit;
delete wk8_edit;
delete wk9_edit;
delete wk10_edit;
}

void ParameterDialog::write(void) {
    
extern Parameter par;
QString tmpval;
  par.arrowcolor = strdup((const char *)arrowcolor_edit->text());
  par.arrowlength = arrowlength_edit->text().toDouble();
  par.textcolor = strdup((const char *)textcolor_edit->text());
  par.cellnumsize = cellnumsize_edit->text().toInt();
  par.nodenumsize = nodenumsize_edit->text().toInt();
  par.node_mag = node_mag_edit->text().toDouble();
  par.outlinewidth = outlinewidth_edit->text().toDouble();
  par.cell_outline_color = strdup((const char *)cell_outline_color_edit->text());
  par.resize_stride = resize_stride_edit->text().toInt();
  par.datadir = strdup((const char *)datadir_edit->text());
  par.export_fn_prefix = strdup((const char *)export_fn_prefix_edit->text());
  par.export_interval = export_interval_edit->text().toInt();
  par.xml_storage_stride = xml_storage_stride_edit->text().toInt();
  tmpval = movie_edit->text().stripWhiteSpace();
  if (tmpval == "true" || tmpval == "yes" ) par.movie = true;
  else if (tmpval == "false" || tmpval == "no") par.movie = false;
  else {
    if (QMessageBox::question(this, "Syntax error", tr("Value %1 of parameter %2 is not recognized as Boolean.\nDo you mean TRUE or FALSE?").arg(tmpval).arg("movie"),"True","False", QString::null, 0, 1)==0) par.movie=true;
      else par.movie=false;
  }
  par.storage_stride = storage_stride_edit->text().toInt();
  par.dt = dt_edit->text().toDouble();
  par.rd_dt = rd_dt_edit->text().toDouble();
  par.ode_accuracy = ode_accuracy_edit->text().toDouble();
  par.nit = nit_edit->text().toInt();
  par.maxt = maxt_edit->text().toDouble();
  par.rseed = rseed_edit->text().toInt();
  par.T = T_edit->text().toDouble();
  par.lambda_length = lambda_length_edit->text().toDouble();
  par.mc_stepsize = mc_stepsize_edit->text().toDouble();
  par.collapse_node_threshold = collapse_node_threshold_edit->text().toDouble();
  par.yielding_threshold = yielding_threshold_edit->text().toDouble();
  par.rel_perimeter_stiffness = rel_perimeter_stiffness_edit->text().toDouble();
  tmpval = copy_wall_edit->text().stripWhiteSpace();
  if (tmpval == "true" || tmpval == "yes" ) par.copy_wall = true;
  else if (tmpval == "false" || tmpval == "no") par.copy_wall = false;
  else {
    if (QMessageBox::question(this, "Syntax error", tr("Value %1 of parameter %2 is not recognized as Boolean.\nDo you mean TRUE or FALSE?").arg(tmpval).arg("copy_wall"),"True","False", QString::null, 0, 1)==0) par.copy_wall=true;
      else par.copy_wall=false;
  }
  par.energy_threshold = energy_threshold_edit->text().toDouble();
  par.mc_cell_stepsize = mc_cell_stepsize_edit->text().toDouble();
  par.lambda_celllength = lambda_celllength_edit->text().toDouble();
  par.target_length = target_length_edit->text().toDouble();
  par.bend_lambda = bend_lambda_edit->text().toDouble();
  par.alignment_lambda = alignment_lambda_edit->text().toDouble();
  tmpval = D_edit->text().section(',', 0, 0);
  par.D[0] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 1, 1);
  par.D[1] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 2, 2);
  par.D[2] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 3, 3);
  par.D[3] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 4, 4);
  par.D[4] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 5, 5);
  par.D[5] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 6, 6);
  par.D[6] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 7, 7);
  par.D[7] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 8, 8);
  par.D[8] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 9, 9);
  par.D[9] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 10, 10);
  par.D[10] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 11, 11);
  par.D[11] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 12, 12);
  par.D[12] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 13, 13);
  par.D[13] = tmpval.toDouble();
  tmpval = D_edit->text().section(',', 14, 14);
  par.D[14] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 0, 0);
  par.initval[0] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 1, 1);
  par.initval[1] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 2, 2);
  par.initval[2] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 3, 3);
  par.initval[3] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 4, 4);
  par.initval[4] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 5, 5);
  par.initval[5] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 6, 6);
  par.initval[6] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 7, 7);
  par.initval[7] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 8, 8);
  par.initval[8] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 9, 9);
  par.initval[9] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 10, 10);
  par.initval[10] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 11, 11);
  par.initval[11] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 12, 12);
  par.initval[12] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 13, 13);
  par.initval[13] = tmpval.toDouble();
  tmpval = initval_edit->text().section(',', 14, 14);
  par.initval[14] = tmpval.toDouble();
  par.k1 = k1_edit->text().toDouble();
  par.k2 = k2_edit->text().toDouble();
  par.k3 = k3_edit->text().toDouble();
  par.k4 = k4_edit->text().toDouble();
  par.k5 = k5_edit->text().toDouble();
  par.k6 = k6_edit->text().toDouble();
  par.k7 = k7_edit->text().toDouble();
  par.k8 = k8_edit->text().toDouble();
  par.k9 = k9_edit->text().toDouble();
  par.k10 = k10_edit->text().toDouble();
  par.wk1 = wk1_edit->text().toDouble();
  par.wk2 = wk2_edit->text().toDouble();
  par.wk3 = wk3_edit->text().toDouble();
  par.wk4 = wk4_edit->text().toDouble();
  par.wk5 = wk5_edit->text().toDouble();
  par.wk6 = wk6_edit->text().toDouble();
  par.wk7 = wk7_edit->text().toDouble();
  par.wk8 = wk8_edit->text().toDouble();
  par.wk9 = wk9_edit->text().toDouble();
  par.wk10 = wk10_edit->text().toDouble();
Reset();

}
void ParameterDialog::Reset(void) {
  extern Parameter par;
  arrowcolor_edit->setText( QString("%1").arg(par.arrowcolor) );
  arrowlength_edit->setText( QString("%1").arg(par.arrowlength) );
  textcolor_edit->setText( QString("%1").arg(par.textcolor) );
  cellnumsize_edit->setText( QString("%1").arg(par.cellnumsize) );
  nodenumsize_edit->setText( QString("%1").arg(par.nodenumsize) );
  node_mag_edit->setText( QString("%1").arg(par.node_mag) );
  outlinewidth_edit->setText( QString("%1").arg(par.outlinewidth) );
  cell_outline_color_edit->setText( QString("%1").arg(par.cell_outline_color) );
  resize_stride_edit->setText( QString("%1").arg(par.resize_stride) );
  datadir_edit->setText( QString("%1").arg(par.datadir) );
  export_fn_prefix_edit->setText( QString("%1").arg(par.export_fn_prefix) );
  export_interval_edit->setText( QString("%1").arg(par.export_interval) );
  xml_storage_stride_edit->setText( QString("%1").arg(par.xml_storage_stride) );
  movie_edit->setText( QString("%1").arg(sbool(par.movie)));
  storage_stride_edit->setText( QString("%1").arg(par.storage_stride) );
  dt_edit->setText( QString("%1").arg(par.dt) );
  rd_dt_edit->setText( QString("%1").arg(par.rd_dt) );
  ode_accuracy_edit->setText( QString("%1").arg(par.ode_accuracy) );
  nit_edit->setText( QString("%1").arg(par.nit) );
  maxt_edit->setText( QString("%1").arg(par.maxt) );
  rseed_edit->setText( QString("%1").arg(par.rseed) );
  T_edit->setText( QString("%1").arg(par.T) );
  lambda_length_edit->setText( QString("%1").arg(par.lambda_length) );
  mc_stepsize_edit->setText( QString("%1").arg(par.mc_stepsize) );
  collapse_node_threshold_edit->setText( QString("%1").arg(par.collapse_node_threshold) );
  yielding_threshold_edit->setText( QString("%1").arg(par.yielding_threshold) );
  rel_perimeter_stiffness_edit->setText( QString("%1").arg(par.rel_perimeter_stiffness) );
  copy_wall_edit->setText( QString("%1").arg(sbool(par.copy_wall)));
  energy_threshold_edit->setText( QString("%1").arg(par.energy_threshold) );
  mc_cell_stepsize_edit->setText( QString("%1").arg(par.mc_cell_stepsize) );
  lambda_celllength_edit->setText( QString("%1").arg(par.lambda_celllength) );
  target_length_edit->setText( QString("%1").arg(par.target_length) );
  bend_lambda_edit->setText( QString("%1").arg(par.bend_lambda) );
  alignment_lambda_edit->setText( QString("%1").arg(par.alignment_lambda) );
  QString D_string("%1,%2,%3,%4,%5,%6,%7,%8,%9,%10,%11,%12,%13,%14,%15");
  D_string = D_string.arg(par.D[0]).arg(par.D[1]).arg(par.D[2]).arg(par.D[3]).arg(par.D[4]).arg(par.D[5]).arg(par.D[6]).arg(par.D[7]).arg(par.D[8]).arg(par.D[9]).arg(par.D[10]).arg(par.D[11]).arg(par.D[12]).arg(par.D[13]).arg(par.D[14]);
  D_edit->setText( D_string );
  QString initval_string("%1,%2,%3,%4,%5,%6,%7,%8,%9,%10,%11,%12,%13,%14,%15");
  initval_string = initval_string.arg(par.initval[0]).arg(par.initval[1]).arg(par.initval[2]).arg(par.initval[3]).arg(par.initval[4]).arg(par.initval[5]).arg(par.initval[6]).arg(par.initval[7]).arg(par.initval[8]).arg(par.initval[9]).arg(par.initval[10]).arg(par.initval[11]).arg(par.initval[12]).arg(par.initval[13]).arg(par.initval[14]);
  initval_edit->setText( initval_string );
  k1_edit->setText( QString("%1").arg(par.k1) );
  k2_edit->setText( QString("%1").arg(par.k2) );
  k3_edit->setText( QString("%1").arg(par.k3) );
  k4_edit->setText( QString("%1").arg(par.k4) );
  k5_edit->setText( QString("%1").arg(par.k5) );
  k6_edit->setText( QString("%1").arg(par.k6) );
  k7_edit->setText( QString("%1").arg(par.k7) );
  k8_edit->setText( QString("%1").arg(par.k8) );
  k9_edit->setText( QString("%1").arg(par.k9) );
  k10_edit->setText( QString("%1").arg(par.k10) );
  wk1_edit->setText( QString("%1").arg(par.wk1) );
  wk2_edit->setText( QString("%1").arg(par.wk2) );
  wk3_edit->setText( QString("%1").arg(par.wk3) );
  wk4_edit->setText( QString("%1").arg(par.wk4) );
  wk5_edit->setText( QString("%1").arg(par.wk5) );
  wk6_edit->setText( QString("%1").arg(par.wk6) );
  wk7_edit->setText( QString("%1").arg(par.wk7) );
  wk8_edit->setText( QString("%1").arg(par.wk8) );
  wk9_edit->setText( QString("%1").arg(par.wk9) );
  wk10_edit->setText( QString("%1").arg(par.wk10) );
}


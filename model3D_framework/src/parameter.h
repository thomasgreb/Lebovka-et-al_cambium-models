/*
 *
 *  $Id$
 *
 *  This file is part of the Virtual Leaf.
 *
 *  VirtualLeaf is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  VirtualLeaf is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2010 Roeland Merks.
 *
 */

// WARNING: This file is automatically generated by make_parameter_source.pl. Do not edit.
// Do not edit. All edits will be discarded.

#ifndef _PARAMETER_H_
#define _PARAMETER_H_
#include "vector.h"
#include <vector>

#include <libxml/parser.h>
#include <libxml/tree.h>

 class Parameter {
		
 public: 
   Parameter();
   ~Parameter();
   void CleanUp(void);
   void Read(const char *filename);
   void Write(ostream &os) const;
   void XMLAdd(xmlNode *root) const;
   void XMLRead(xmlNode *root);
   void AssignValToPar(const char *namec, const char *valc);
   void AssignValArrayToPar(const char *namec, vector<double> valarray);
  char * arrowcolor;
  double arrowlength;
  char * textcolor;
  int cellnumsize;
  int nodenumsize;
  double node_mag;
  double outlinewidth;
  char * cell_outline_color;
  int resize_stride;
  char * datadir;
  char * export_fn_prefix;
  int export_interval;
  int xml_storage_stride;
  bool movie;
  int storage_stride;
  double dt;
  double rd_dt;
  double ode_accuracy;
  int nit;
  double maxt;
  int rseed;
  double T;
  double lambda_length;
  double mc_stepsize;
  double collapse_node_threshold;
  double yielding_threshold;
  double rel_perimeter_stiffness;
  bool copy_wall;
  double energy_threshold;
  double mc_cell_stepsize;
  double lambda_celllength;
  double target_length;
  double bend_lambda;
  double alignment_lambda;
  double * D;
  double * initval;
  double k1;
  double k2;
  double k3;
  double k4;
  double k5;
  double k6;
  double k7;
  double k8;
  double k9;
  double k10;
  double wk1;
  double wk2;
  double wk3;
  double wk4;
  double wk5;
  double wk6;
  double wk7;
  double wk8;
  double wk9;
  double wk10;
 private:
 };

 ostream &operator<<(ostream &os, Parameter &p);
 const char *sbool(const bool &p);


#endif

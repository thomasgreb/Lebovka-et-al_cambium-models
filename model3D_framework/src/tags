!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddCell	mesh.h	/^  inline Cell *AddCell(Cell *c) {$/;"	f	class:Mesh
AddNode	mesh.h	/^  inline Node *AddNode(Node *n) {$/;"	f	class:Mesh
AddNode	nodeset.h	/^  void AddNode(Node * n) {$/;"	f	class:NodeSet
AddNodeSet	mesh.h	/^  void AddNodeSet(NodeSet *node_set) {$/;"	f	class:Mesh
AddNodeToCell	mesh.cpp	/^void Mesh::AddNodeToCell(Cell *c, Node *n, Node *nb1, Node *nb2) {$/;"	f	class:Mesh
AddNodeToCellAtIndex	mesh.cpp	/^void Mesh::AddNodeToCellAtIndex(Cell *c, Node *n, Node *nb1, Node *nb2, list<Node *>::iterator ins_pos) {$/;"	f	class:Mesh
AddValue	data_plot.cpp	/^void DataPlot::AddValue(double t,double *x)$/;"	f	class:DataPlot
AddValue	data_plot.h	/^  void AddValue(double t, double *x) {$/;"	f	class:PlotDialog
AddWall	cell.cpp	/^void Cell::AddWall( Wall *w )$/;"	f	class:Cell
Alloc	matrix.cpp	/^void Matrix::Alloc(void)$/;"	f	class:Matrix
Angle	vector.cpp	/^double Vector::Angle(const Vector &v) const {$/;"	f	class:Vector
ApoplastItem	apoplastitem.cpp	/^ApoplastItem::ApoplastItem( Wall *w, QGraphicsScene *canvas )$/;"	f	class:ApoplastItem
ApoplastItem	apoplastitem.h	/^class ApoplastItem : public QGraphicsLineItem, public SimItemBase$/;"	c
Apoptose	cell.cpp	/^void Cell::Apoptose(void)$/;"	f	class:Cell
AppendHomeDirIfPathRelative	output.cpp	/^char* AppendHomeDirIfPathRelative(char *datadir) {$/;"	f
Area	cellbase.h	/^  inline double Area(void) const { return area; }$/;"	f	class:CellBase
Area	mesh.cpp	/^double Mesh::Area(void) {$/;"	f	class:Mesh
AskSeed	random.cpp	/^void AskSeed(void)$/;"	f
AssignValArrayToPar	parameter.cpp	/^void Parameter::AssignValArrayToPar(const char *namec, vector<double> valarray) {$/;"	f	class:Parameter
AssignValToPar	parameter.cpp	/^void Parameter::AssignValToPar(const char *namec, const char *valc) {$/;"	f	class:Parameter
AtBoundaryP	cellbase.cpp	/^bool CellBase::AtBoundaryP(void) const$/;"	f	class:CellBase
AttemptMove	nodeset.h	/^  void AttemptMove(double rx, double ry) {$/;"	f	class:NodeSet
BaseArea	cellbase.h	/^  static double &BaseArea(void)$/;"	f	class:CellBase
Boundary	cellbase.h	/^  boundary_type Boundary(void) const { return boundary; }$/;"	f	class:CellBase
BoundaryP	node.h	/^  inline bool BoundaryP(void) const { return boundary; }$/;"	f	class:Node
BoundaryPolP	cell.h	/^  virtual bool BoundaryPolP(void) const { return true; } $/;"	f	class:BoundaryPolygon
BoundaryPolP	cellbase.h	/^  virtual bool BoundaryPolP(void) const { return false; } $/;"	f	class:CellBase
BoundaryPolygon	cell.h	/^ BoundaryPolygon(double x,double y,double z=0) : Cell (x,y,z) {$/;"	f	class:BoundaryPolygon
BoundaryPolygon	cell.h	/^ BoundaryPolygon(void) : Cell() {$/;"	f	class:BoundaryPolygon
BoundaryPolygon	cell.h	/^class BoundaryPolygon : public Cell {$/;"	c
BoundaryStr	cellbase.h	/^  inline const char *BoundaryStr(void) { return boundary_type_names[boundary]; }$/;"	f	class:CellBase
BoundingBox	mesh.cpp	/^void Mesh::BoundingBox(Vector &LowerLeft, Vector &UpperRight) {$/;"	f	class:Mesh
C1	wallbase.h	/^  inline CellBase *C1(void) const { return c1; }$/;"	f	class:WallBase
C2	wallbase.h	/^  inline CellBase *C2(void) const { return c2; }$/;"	f	class:WallBase
CSVExportCellData	mesh.cpp	/^void Mesh::CSVExportCellData(QTextStream &csv_stream) const {$/;"	f	class:Mesh
CSVExportMeshData	mesh.cpp	/^void Mesh::CSVExportMeshData(QTextStream &csv_stream) { $/;"	f	class:Mesh
CSVExportWallData	mesh.cpp	/^void Mesh::CSVExportWallData(QTextStream &csv_stream) const {$/;"	f	class:Mesh
CalcArea	cellbase.cpp	/^double CellBase::CalcArea(void) const$/;"	f	class:CellBase
CalcLength	cellbase.cpp	/^double CellBase::CalcLength(Vector *long_axis, double *width)  const$/;"	f	class:CellBase
CalcLumenArea	cellbase.cpp	/^double CellBase::CalcLumenArea(void) $/;"	f	class:CellBase
CalcProtCellsWalls	mesh.cpp	/^double Mesh::CalcProtCellsWalls(int ch) const {$/;"	f	class:Mesh
Cell	cell.cpp	/^Cell::Cell(const Cell &src) :  CellBase(src)$/;"	f	class:Cell
Cell	cell.cpp	/^Cell::Cell(double x, double y, double z) : CellBase(x,y,z)$/;"	f	class:Cell
Cell	cell.cpp	/^Cell::Cell(void) : CellBase()$/;"	f	class:Cell
Cell	cell.h	/^class Cell : public CellBase $/;"	c
CellBase	cellbase.cpp	/^CellBase::CellBase(QObject *parent) : $/;"	f	class:CellBase
CellBase	cellbase.cpp	/^CellBase::CellBase(const CellBase &src) :  QObject(), Vector(src)$/;"	f	class:CellBase
CellBase	cellbase.cpp	/^CellBase::CellBase(double x,double y,double z) : QObject(), Vector(x,y,z)$/;"	f	class:CellBase
CellBase	cellbase.h	/^class CellBase :  public QObject, public Vector $/;"	c
CellEquals	Neighbor.cpp	/^bool Neighbor::CellEquals(int i) const { return cell->Index() == i; } $/;"	f	class:Neighbor
CellFiles	mesh.cpp	/^void Mesh::CellFiles(const Vector ll, const Vector ur) {$/;"	f	class:Mesh
CellInfo	VirtualLeaf.cpp	/^class CellInfo {$/;"	c	file:
CellItem	cellitem.cpp	/^CellItem::CellItem( Cell *c, QGraphicsScene *canvas )$/;"	f	class:CellItem
CellItem	cellitem.h	/^class CellItem : public QGraphicsPolygonItem, public SimItemBase$/;"	c
CellType	cellbase.h	/^  inline int CellType(void) const { return cell_type; } $/;"	f	class:CellBase
CellTypeDefinitor	mesh.cpp	/^void Mesh::CellTypeDefinitor(void){$/;"	f	class:Mesh
CellsSize	node.h	/^  inline int CellsSize(void) const { return owners.size(); }$/;"	f	class:Node
CellsStaticDatamembers	cellbase.h	/^  CellsStaticDatamembers(void) {$/;"	f	class:CellsStaticDatamembers
CellsStaticDatamembers	cellbase.h	/^class CellsStaticDatamembers {$/;"	c
Centroid	cellbase.cpp	/^Vector CellBase::Centroid(void) const$/;"	f	class:CellBase
Centroid	mesh.h	/^  inline Vector Centroid(void) {$/;"	f	class:Mesh
CheckFile	output.cpp	/^void CheckFile(FILE *fp) $/;"	f
ChemMonValue	moc_cell.cpp	/^void Cell::ChemMonValue(double _t1, double * _t2)$/;"	f	class:Cell
Chemical	cellbase.h	/^  inline double Chemical(int c) const { \/\/ returns the value of chemical c$/;"	f	class:CellBase
Chext	output.cpp	/^char *Chext(char *filename) {$/;"	f
CircularCell	mesh.h	/^  Cell &CircularCell(double xc, double yc, double r, int nnodes=10) {$/;"	f	class:Mesh
CircumCircle	mesh.cpp	/^void Mesh::CircumCircle(double x1,double y1,double x2,double y2,double x3,double y3,$/;"	f	class:Mesh
Clean	mesh.cpp	/^void Mesh::Clean(void) {$/;"	f	class:Mesh
CleanChemicals	mesh.cpp	/^void Mesh::CleanChemicals(const vector<double> &clean_chem) {$/;"	f	class:Mesh
CleanMesh	canvas.cpp	/^void Main::CleanMesh(void) $/;"	f	class:Main
CleanMeshChemicals	canvas.cpp	/^void Main::CleanMeshChemicals(void) $/;"	f	class:Main
CleanMeshTransporters	canvas.cpp	/^void Main::CleanMeshTransporters(void) $/;"	f	class:Main
CleanTransporters	mesh.cpp	/^void Mesh::CleanTransporters(const vector<double> &clean_transporters) {$/;"	f	class:Mesh
CleanUp	nodeset.h	/^  void CleanUp(void) {$/;"	f	class:NodeSet
CleanUp	parameter.cpp	/^void Parameter::CleanUp(void) {$/;"	f	class:Parameter
CleanUpCellNodeLists	mesh.cpp	/^void Mesh::CleanUpCellNodeLists(void) {$/;"	f	class:Mesh
CleanUpWalls	mesh.cpp	/^void Mesh::CleanUpWalls(void) {$/;"	f	class:Mesh
Clear	mesh.cpp	/^void Mesh::Clear(void) {$/;"	f	class:Mesh
ClearNCells	cellbase.h	/^  inline static void ClearNCells(void)$/;"	f	class:CellBase
Cmp	Neighbor.cpp	/^bool Neighbor::Cmp(Neighbor &c) const { return cell->Index() < c.cell->Index(); } \/\/ Compare cell indices not pointers.$/;"	f	class:Neighbor
Cmp	cell.cpp	/^bool Cell::Cmp(Cell *c) const { return this->Index() < c->Index(); }$/;"	f	class:Cell
Compactness	mesh.cpp	/^double Mesh::Compactness(double *res_compactness, double *res_area, double *res_cell_area, double *res_circumference) {$/;"	f	class:Mesh
ConstructConnections	cell.cpp	/^void Cell::ConstructConnections(void)$/;"	f	class:Cell
ConstructNeighborList	cellbase.cpp	/^void CellBase::ConstructNeighborList(void)$/;"	f	class:CellBase
ConstructWalls	cell.cpp	/^void Cell::ConstructWalls(void)$/;"	f	class:Cell
ContIfRunning	canvas.cpp	/^void Main::ContIfRunning(void)$/;"	f	class:Main
CopyWallContents	wallbase.cpp	/^void WallBase::CopyWallContents(const WallBase &src)$/;"	f	class:WallBase
CorrectTransporters	wallbase.cpp	/^void WallBase::CorrectTransporters(double orig_length)$/;"	f	class:WallBase
CorrectWall	wall.cpp	/^bool Wall::CorrectWall( void ) {$/;"	f	class:Wall
CurveColors	curvecolors.h	/^  CurveColors(void) {$/;"	f	class:CurveColors
CurveColors	curvecolors.h	/^class CurveColors {$/;"	c
CutAwayBelowLine	mesh.cpp	/^void Mesh::CutAwayBelowLine( Vector startpoint, Vector endpoint) {$/;"	f	class:Mesh
CutAwaySAM	mesh.cpp	/^void Mesh::CutAwaySAM(void) {$/;"	f	class:Mesh
CutSAM	canvas.h	/^  virtual void CutSAM() { MainBase::CutSAM(); Refresh();}$/;"	f	class:Main
CutSAM	mainbase.cpp	/^void MainBase::CutSAM()$/;"	f	class:MainBase
D	parameter.h	/^  double * D;$/;"	m	class:Parameter
DSQR	sqr.h	/^inline double DSQR( double a ) {$/;"	f
D_edit	pardialog.h	/^  QLineEdit *D_edit;$/;"	m	class:ParameterDialog
DataPlot	data_plot.cpp	/^DataPlot::DataPlot(QWidget *parent, const QString title, const QStringList curvenames ):$/;"	f	class:DataPlot
DataPlot	data_plot.h	/^class DataPlot : public QwtPlot$/;"	c
DeadP	cellbase.h	/^  inline bool DeadP(void) { return dead; }$/;"	f	class:CellBase
DeadP	node.h	/^  inline bool DeadP(void) { return dead; }$/;"	f	class:Node
DeadP	wallbase.h	/^  inline bool DeadP(void) const { return dead; }$/;"	f	class:WallBase
DefaultLeafML	simplugin.cpp	/^QString SimPluginInterface::DefaultLeafML(void) { return QString(); }$/;"	f	class:SimPluginInterface
DeleteLooseWalls	mesh.cpp	/^void Mesh::DeleteLooseWalls(void) {$/;"	f	class:Mesh
DeltaIntgrl	mesh.cpp	/^  DeltaIntgrl(double sarea,double six,double siy,double sixx,double sixy,double siyy) {$/;"	f	class:DeltaIntgrl
DeltaIntgrl	mesh.cpp	/^class DeltaIntgrl {$/;"	c	file:
Derivatives	mesh.cpp	/^void Mesh::Derivatives(double *derivs) {$/;"	f	class:Mesh
Det	matrix.cpp	/^double Matrix::Det(void) const$/;"	f	class:Matrix
Displace	cell.cpp	/^double Cell::Displace(double dx, double dy, double dh)$/;"	f	class:Cell
Displace	cell.cpp	/^void Cell::Displace (void)$/;"	f	class:Cell
Displace	modelelement.h	/^  virtual void Displace(void) {};$/;"	f	class:ModelElement
DisplaceNodes	mesh.cpp	/^double Mesh::DisplaceNodes(void) {$/;"	f	class:Mesh
DistPtSeg	modified_division_algorithm.cpp	/^double DistPtSeg(const Vector &p, const Vector &p1, const Vector &p2){$/;"	f
DistToLine	modified_division_algorithm.cpp	/^double WallBase::DistToLine(const Vector &p1, const Vector &p2){$/;"	f	class:WallBase
DistToNode	modified_division_algorithm.cpp	/^double WallBase::DistToNode(Node *p)$/;"	f	class:WallBase
Divide	cell.h	/^  void Divide(void) { \/\/ Divide cell over short axis$/;"	f	class:Cell
Divide	cellbase.h	/^  inline void Divide(void) { flag_for_divide = true; }$/;"	f	class:CellBase
DivideOverAxis	cell.cpp	/^void Cell::DivideOverAxis(Vector axis) $/;"	f	class:Cell
DivideOverAxis	cellbase.h	/^  inline void DivideOverAxis(const Vector &v)$/;"	f	class:CellBase
DivideOverGivenLine	cell.cpp	/^bool Cell::DivideOverGivenLine(const Vector v1, const Vector v2, bool fix_cellwall, NodeSet *node_set )$/;"	f	class:Cell
DivideWalls	cell.cpp	/^void Cell::DivideWalls(ItList new_node_locations, const Vector from, const Vector to, bool fix_cellwall, NodeSet *node_set)$/;"	f	class:Cell
DivideWalls	modified_division_algorithm.cpp	/^void Cell::DivideWalls(ItList new_node_locations, const Vector from, const Vector to, bool fix_cellwall, NodeSet *node_set)$/;"	f	class:Cell
DoCellHouseKeeping	mesh.h	/^  void DoCellHouseKeeping(void) {$/;"	f	class:Mesh
DoneP	nodeset.h	/^  inline bool DoneP(void) { return done; }$/;"	f	class:NodeSet
Draw	cell.cpp	/^void BoundaryPolygon::Draw(QGraphicsScene *c, QString tooltip)$/;"	f	class:BoundaryPolygon
Draw	cell.cpp	/^void Cell::Draw(QGraphicsScene *c, QString tooltip)$/;"	f	class:Cell
Draw	wall.cpp	/^void Wall::Draw(QGraphicsScene *c) {$/;"	f	class:Wall
DrawAxis	cell.cpp	/^void Cell::DrawAxis(QGraphicsScene *c) const {$/;"	f	class:Cell
DrawBoundary	mesh.h	/^  inline void DrawBoundary(QGraphicsScene *c) {$/;"	f	class:Mesh
DrawCell	VirtualLeaf.cpp	/^class DrawCell {$/;"	c	file:
DrawCenter	cell.cpp	/^void Cell::DrawCenter(QGraphicsScene *c) const {$/;"	f	class:Cell
DrawFluxes	cell.cpp	/^void Cell::DrawFluxes(QGraphicsScene *c, double arrowsize)$/;"	f	class:Cell
DrawIndex	cell.cpp	/^void Cell::DrawIndex(QGraphicsScene *c) const {$/;"	f	class:Cell
DrawIndex	node.cpp	/^void Node::DrawIndex(QGraphicsScene *c) const {$/;"	f	class:Node
DrawNodes	cell.cpp	/^void Cell::DrawNodes(QGraphicsScene *c) const {$/;"	f	class:Cell
DrawNodes	mesh.cpp	/^void Mesh::DrawNodes(QGraphicsScene *c) const {$/;"	f	class:Mesh
DrawOwners	node.cpp	/^void Node::DrawOwners(QGraphicsScene *c) const {$/;"	f	class:Node
DrawStrain	cell.cpp	/^void Cell::DrawStrain(QGraphicsScene *c) const {$/;"	f	class:Cell
DrawText	cell.cpp	/^void Cell::DrawText(QGraphicsScene *c, const QString &text) const {$/;"	f	class:Cell
DrawThick	cell.cpp	/^void Cell::DrawThick(QGraphicsScene *c)$/;"	f	class:Cell
DrawValence	cell.cpp	/^void Cell::DrawValence(QGraphicsScene *c) const {$/;"	f	class:Cell
DrawWalls	cell.cpp	/^void Cell::DrawWalls(QGraphicsScene *c) const {$/;"	f	class:Cell
Dump	cellbase.cpp	/^void CellBase::Dump(ostream &os) const$/;"	f	class:CellBase
Dump	vector.h	/^  void Dump(ostream &os) const { $/;"	f	class:Vector
DynamicCellsP	canvas.h	/^  virtual bool DynamicCellsP(void) { return options->isItemChecked(dyn_cells_id); }$/;"	f	class:Main
DynamicCellsP	mainbase.h	/^  virtual bool DynamicCellsP(void) { return dynamicscellsp; }$/;"	f	class:MainBase
Edge	node.h	/^  Edge(Node *f, Node *s) {$/;"	f	class:Edge
Edge	node.h	/^  Edge(const Edge &src) {$/;"	f	class:Edge
Edge	node.h	/^  Edge(void) {$/;"	f	class:Edge
Edge	node.h	/^class Edge {$/;"	c
EdgeSource	VirtualLeaf.cpp	/^class EdgeSource {$/;"	c	file:
EditParameters	canvas.cpp	/^void Main::EditParameters()$/;"	f	class:Main
EllipticCell	mesh.cpp	/^Cell &Mesh::EllipticCell(double xc, double yc, double ra, double rb,  int nnodes, double rotation) {$/;"	f	class:Mesh
EmitValues	cell.cpp	/^void Cell::EmitValues(double t)$/;"	f	class:Cell
Energy	cell.cpp	/^double Cell::Energy(void) const$/;"	f	class:Cell
EnlargeTargetArea	cellbase.h	/^  inline double EnlargeTargetArea(double da) { return target_area+=da; }$/;"	f	class:CellBase
EnterRotationMode	canvas.h	/^  void EnterRotationMode(void)$/;"	f	class:Main
Eq	Neighbor.cpp	/^bool Neighbor::Eq(Neighbor &c) const { return cell->Index() == c.cell->Index(); }$/;"	f	class:Neighbor
Eq	cell.cpp	/^bool Cell::Eq(Cell *c) const { return this->Index() == c->Index(); }$/;"	f	class:Cell
Errcon	forwardeuler.cpp	/^const double ForwardEuler::Errcon = 1.89e-4;$/;"	m	class:ForwardEuler	file:
Errcon	forwardeuler.h	/^  static const double Errcon;$/;"	m	class:ForwardEuler
Errcon	rungekutta.cpp	/^const double RungeKutta::Errcon = 1.89e-4;$/;"	m	class:RungeKutta	file:
Errcon	rungekutta.h	/^  static const double Errcon;$/;"	m	class:RungeKutta
ExactCircumference	cellbase.cpp	/^double CellBase::ExactCircumference(void) const$/;"	f	class:CellBase
ExitRotationMode	canvas.h	/^  void ExitRotationMode(void)$/;"	f	class:Main
FAC	random.h	31;"	d
FALSE	output.h	52;"	d
FMAX	maxmin.h	/^inline double FMAX(double a, double b) { return a>b ? a : b; }$/;"	f
FMIN	maxmin.h	/^inline double FMIN(double a, double b) { return a<b ? a : b; }$/;"	f
FNAMESIZE	canvas.cpp	94;"	d	file:
FNAMESIZE	output.cpp	41;"	d	file:
Factor	cell.h	/^  inline static double Factor(void) {$/;"	f	class:Cell
Factor	mesh.h	/^  inline double Factor(void) {$/;"	f	class:Mesh
FigureEditor	canvas.cpp	/^FigureEditor::FigureEditor($/;"	f	class:FigureEditor
FigureEditor	canvas.h	/^class FigureEditor : public QGraphicsView {$/;"	c
FileExistsP	output.cpp	/^int FileExistsP(const char *fname) {$/;"	f
FirstConcMoment	mesh.cpp	/^Vector Mesh::FirstConcMoment(int chem) {$/;"	f	class:Mesh
FitCanvasToWindow	canvas.cpp	/^void Main::FitCanvasToWindow(void)$/;"	f	class:Main
FitCanvasToWindow	mainbase.h	/^  virtual void FitCanvasToWindow() {};$/;"	f	class:MainBase
FitLeafToCanvas	canvas.cpp	/^void Main::FitLeafToCanvas(void) $/;"	f	class:Main
FitLeafToCanvas	mainbase.h	/^  virtual void FitLeafToCanvas() {};$/;"	f	class:MainBase
Fix	cellbase.h	/^  inline bool Fix(void) {  FixNodes(); return (fixed=true); }$/;"	f	class:CellBase
Fix	node.h	/^  void Fix(void) { fixed=true; }$/;"	f	class:Node
FixNodes	cellbase.cpp	/^void CellBase::FixNodes(void)$/;"	f	class:CellBase
Fixed	node.h	/^  inline bool Fixed(void) const { return fixed; }$/;"	f	class:Node
FixedP	cellbase.h	/^  inline bool FixedP(void) { return fixed; }$/;"	f	class:CellBase
Flux	cell.cpp	/^void Cell::Flux(double *flux, double *D)$/;"	f	class:Cell
ForwardEuler	forwardeuler.h	/^  ForwardEuler(void) {$/;"	f	class:ForwardEuler
ForwardEuler	forwardeuler.h	/^class ForwardEuler  {$/;"	c
FullRedraw	canvas.cpp	/^void FigureEditor::FullRedraw(void)$/;"	f	class:FigureEditor
GetLeafDir	canvas.cpp	/^QDir Main::GetLeafDir(void) {$/;"	f	class:Main
GetStaticDataMemberPointer	cellbase.h	/^  static inline CellsStaticDatamembers *GetStaticDataMemberPointer(void) { return static_data_members; }$/;"	f	class:CellBase
HideCellsP	canvas.h	/^  virtual bool HideCellsP(void) { return view->isItemChecked(hide_cells_id); }$/;"	f	class:Main
HideCellsP	mainbase.h	/^  virtual bool HideCellsP(void) { return hidecellsp; }$/;"	f	class:MainBase
INIT	mainbase.h	142;"	d
INITIAL_BUFSIZE	output.cpp	149;"	d	file:
IllegalP	wallbase.h	/^  bool IllegalP(void) { return c1 == c2; }$/;"	f	class:WallBase
IncreaseCellCapacityIfNecessary	mesh.h	/^  void IncreaseCellCapacityIfNecessary(void) {$/;"	f	class:Mesh
Index	cellbase.h	/^  inline int Index(void) const { return index; }$/;"	f	class:CellBase
Index	node.h	/^  inline int Index(void) const { return index; }$/;"	f	class:Node
Index	wallbase.h	/^  inline int Index(void) const { return wall_index;}$/;"	f	class:WallBase
IndexEquals	cell.h	/^  inline bool IndexEquals(int i) { return i == index; }$/;"	f	class:Cell
IndexEquals	node.h	/^  inline bool IndexEquals(int i) { return i == index; }$/;"	f	class:Node
InfoBar	infobar.h	/^  InfoBar(void) : Q3DockWindow() { $/;"	f	class:InfoBar
InfoBar	infobar.h	/^class InfoBar : public Q3DockWindow {$/;"	c
InnerProduct	vector.cpp	/^double InnerProduct(const Vector &v1, const Vector &v2) {$/;"	f
InsertModeP	canvas.h	/^  virtual bool InsertModeP(void) { return options->isItemChecked(insert_mode_id); }$/;"	f	class:Main
InsertNode	mesh.cpp	/^void Mesh::InsertNode(Edge &e) {$/;"	f	class:Mesh
InsertNodes	mesh.h	/^  void InsertNodes(void) {$/;"	f	class:Mesh
InstallFirstModel	modelcatalogue.cpp	/^void ModelCatalogue::InstallFirstModel() {$/;"	f	class:ModelCatalogue
InstallModel	modelcatalogue.cpp	/^void ModelCatalogue::InstallModel(QAction *modelaction) {$/;"	f	class:ModelCatalogue
InstallModel	modelcatalogue.cpp	/^void ModelCatalogue::InstallModel(SimPluginInterface *plugin) {$/;"	f	class:ModelCatalogue
IntersectsWithDivisionPlaneP	wallbase.cpp	/^bool WallBase::IntersectsWithDivisionPlaneP(const Vector &p1, const Vector &p2)$/;"	f	class:WallBase
IntersectsWithLineP	cell.cpp	/^bool Cell::IntersectsWithLineP(const Vector v1, const Vector v2)$/;"	f	class:Cell
Inverse	matrix.cpp	/^Matrix Matrix::Inverse(void) const$/;"	f	class:Matrix
ItList	cellbase.h	/^  typedef list < list<Node *>::iterator > ItList;$/;"	t	class:CellBase
Kill	wallbase.h	/^  inline void Kill(void) { dead = true; }$/;"	f	class:WallBase
LeafPrimordium	mesh.cpp	/^Cell &Mesh::LeafPrimordium(int nnodes, double pet_length) {$/;"	f	class:Mesh
Length	cellbase.cpp	/^double CellBase::Length(Vector *long_axis, double *width)  const$/;"	f	class:CellBase
Length	wallbase.h	/^  inline double Length(void) { return length; }$/;"	f	class:WallBase
LineIntersect	modified_division_algorithm.cpp	/^bool WallBase::LineIntersect(const Vector &p1, const Vector &p2){$/;"	f	class:WallBase
LoadPlugin	modelcatalogue.cpp	/^void ModelCatalogue::LoadPlugin(const char *model) {$/;"	f	class:ModelCatalogue
LoadPlugins	modelcatalogue.cpp	/^void ModelCatalogue::LoadPlugins() {$/;"	f	class:ModelCatalogue
LoopCells	mesh.h	/^  template<class Op1, class Op2, class Op3> void LoopCells(Op1 f, Op2 &g, Op3 &h) {$/;"	f	class:Mesh
LoopCells	mesh.h	/^  template<class Op1, class Op2> void LoopCells(Op1 f, Op2 &g) {$/;"	f	class:Mesh
LoopCells	mesh.h	/^  template<class Op> void LoopCells(Op f) {$/;"	f	class:Mesh
LoopCurrentCells	mesh.h	/^  template<class Op> void LoopCurrentCells(Op f) {$/;"	f	class:Mesh
LoopNodes	mesh.h	/^  template<class Op> void LoopNodes(Op f) {$/;"	f	class:Mesh
LoopWalls	mesh.h	/^  template<class Op> void LoopWalls(Op f) {$/;"	f	class:Mesh
MAKE	Makefile	/^	MAKE=make$/;"	m
MBIG	random.h	28;"	d
MEMORYCHECK	warning.h	28;"	d
MESS_BUF_SIZE	output.h	50;"	d
MSEED	random.h	29;"	d
MULTIPLE_NODES	cell.cpp	872;"	d	file:
MULTIPLE_NODES	modified_division_algorithm.cpp	840;"	d	file:
MZ	random.h	30;"	d
Magnification	cell.h	/^  static double Magnification(void) {$/;"	f	class:Cell
Main	canvas.cpp	/^Main::Main(QGraphicsScene& c, Mesh &m, QWidget* parent, const char* name, Qt::WindowFlags f) :$/;"	f	class:Main
Main	canvas.h	/^class Main : public Q3MainWindow, public MainBase {$/;"	c
MainBase	mainbase.h	/^ MainBase(QGraphicsScene &c, Mesh &m) : mesh(m), canvas(c) {$/;"	f	class:MainBase
MainBase	mainbase.h	/^class MainBase  {$/;"	c
MakeDir	output.cpp	/^void MakeDir(const char *dirname) {$/;"	f
ManhattanNorm	vector.h	/^  inline double ManhattanNorm(void) const {$/;"	f	class:Vector
Mark	cellbase.h	/^  inline void Mark(void)$/;"	f	class:CellBase
Mark	node.h	/^  inline void Mark(void) { marked=true; }$/;"	f	class:Node
MarkDead	cellbase.h	/^  inline void MarkDead(void) { dead  = true; }$/;"	f	class:CellBase
MarkDead	node.h	/^  inline void MarkDead(void) { dead=true; }$/;"	f	class:Node
Marked	cellbase.h	/^  inline bool Marked(void) const {$/;"	f	class:CellBase
Marked	node.h	/^  inline bool Marked(void) const { return marked; }$/;"	f	class:Node
Matrix	matrix.cpp	/^Matrix::Matrix(const Matrix &source)$/;"	f	class:Matrix
Matrix	matrix.cpp	/^Matrix::Matrix(const Vector &c1, const Vector &c2, const Vector &c3) {$/;"	f	class:Matrix
Matrix	matrix.cpp	/^Matrix::Matrix(void)$/;"	f	class:Matrix
Matrix	matrix.h	/^class Matrix {$/;"	c
Max	vector.cpp	/^double Vector::Max(void) {$/;"	f	class:Vector
Maxstp	forwardeuler.cpp	/^const double ForwardEuler::Maxstp = 10000000;$/;"	m	class:ForwardEuler	file:
Maxstp	forwardeuler.h	/^  static const double Maxstp;$/;"	m	class:ForwardEuler
Maxstp	rungekutta.cpp	/^const double RungeKutta::Maxstp = 10000;$/;"	m	class:RungeKutta	file:
Maxstp	rungekutta.h	/^  static const double Maxstp;$/;"	m	class:RungeKutta
MeanArea	cell.cpp	/^double Cell::MeanArea(void)$/;"	f	class:Cell
MeanArea	mesh.h	/^  double MeanArea(void) {$/;"	f	class:Mesh
Mesh	mesh.h	/^  Mesh(void) {$/;"	f	class:Mesh
Mesh	mesh.h	/^class Mesh {$/;"	c
Min	vector.cpp	/^double Vector::Min(void) {$/;"	f	class:Vector
ModelCatalogue	modelcatalogue.cpp	/^ModelCatalogue::ModelCatalogue(Mesh *_mesh, MainBase *_mainwin, const char *model=0) {$/;"	f	class:ModelCatalogue
ModelCatalogue	modelcatalogue.h	/^class ModelCatalogue : public QObject {$/;"	c
ModelElement	modelelement.h	/^class ModelElement {$/;"	c
ModelID	mesh.h	/^  QString ModelID(void) { return plugin?plugin->ModelID():QString("undefined"); }$/;"	f	class:Mesh
MousePressed	moc_canvas.cpp	/^void FigureEditor::MousePressed()$/;"	f	class:FigureEditor
MouseReleased	moc_canvas.cpp	/^void FigureEditor::MouseReleased()$/;"	f	class:FigureEditor
Move	cell.cpp	/^void Cell::Move(const Vector T) {$/;"	f	class:Cell
Move	cell.h	/^  void Move(double dx, double dy, double dz=0) {$/;"	f	class:Cell
MoveSelfIntersectsP	cell.cpp	/^bool Cell::MoveSelfIntersectsP(Node *moving_node_ind, Vector new_pos)$/;"	f	class:Cell
MovieFramesP	canvas.h	/^  virtual bool MovieFramesP(void) {return view->isItemChecked(movie_frames_id);}$/;"	f	class:Main
MovieFramesP	mainbase.h	/^  virtual bool MovieFramesP(void) {return movieframesp;}$/;"	f	class:MainBase
MyUrand	random.h	/^  MyUrand(long nn) {$/;"	f	class:MyUrand
MyUrand	random.h	/^  MyUrand(void){};$/;"	f	class:MyUrand
MyUrand	random.h	/^class MyUrand {$/;"	c
MyWarning	warning.h	/^  namespace MyWarning {$/;"	n
N1	wallbase.h	/^  inline Node *N1(void) const { return n1; }$/;"	f	class:WallBase
N2	wallbase.h	/^  inline Node *N2(void) const { return n2; }$/;"	f	class:WallBase
NCells	cellbase.h	/^  static inline int &NCells(void)$/;"	f	class:CellBase
NCells	mesh.h	/^  int NCells(void) const {$/;"	f	class:Mesh
NChem	cellbase.h	/^  static int &NChem(void) { return static_data_members->nchem; }$/;"	f	class:CellBase
NEqs	mesh.h	/^  int NEqs(void) {     int nwalls = walls.size();$/;"	f	class:Mesh
NNodes	cell.h	/^  inline int NNodes(void) const { return nodes.size(); }$/;"	f	class:Cell
NNodes	cellbase.h	/^  inline double NNodes(void) const {$/;"	f	class:CellBase
NNodes	mesh.h	/^  inline int NNodes(void) const {$/;"	f	class:Mesh
NWalls	cellbase.h	/^  inline double NWalls(void) const {$/;"	f	class:CellBase
Neighbor	Neighbor.cpp	/^Neighbor::Neighbor(Cell *c, Node *n1, Node *n2):$/;"	f	class:Neighbor
Neighbor	Neighbor.cpp	/^Neighbor::Neighbor(const Neighbor &src):$/;"	f	class:Neighbor
Neighbor	Neighbor.cpp	/^Neighbor::Neighbor(void):$/;"	f	class:Neighbor
Neighbor	Neighbor.h	/^class Neighbor {$/;"	c
NeighbourAngles	node.cpp	/^QVector<qreal> Node::NeighbourAngles(void)$/;"	f	class:Node
NewChem	cellbase.h	/^  inline double NewChem(int c) const { return new_chem[c]; }$/;"	f	class:CellBase
Node	node.cpp	/^Node::Node(const Node &src) : Vector(src)$/;"	f	class:Node
Node	node.cpp	/^Node::Node(const Vector &src) : Vector(src)$/;"	f	class:Node
Node	node.cpp	/^Node::Node(double x,double y, double z) : Vector (x,y,z)$/;"	f	class:Node
Node	node.cpp	/^Node::Node(int ind) : Vector()$/;"	f	class:Node
Node	node.cpp	/^Node::Node(void) : Vector()$/;"	f	class:Node
Node	node.h	/^class Node : public Vector {$/;"	c
NodeItem	nodeitem.cpp	/^NodeItem::NodeItem( Node *n, QGraphicsScene *canvas )$/;"	f	class:NodeItem
NodeItem	nodeitem.h	/^class NodeItem: public QGraphicsItem, public SimItemBase$/;"	c
NodeSet	nodeset.h	/^  NodeSet(void) {$/;"	f	class:NodeSet
NodeSet	nodeset.h	/^class NodeSet : public list<Node *> {$/;"	c
Noflux	cellbase.h	/^  enum boundary_type {None, Noflux, SourceSink, SAM};$/;"	e	enum:CellBase::boundary_type
None	cellbase.h	/^  enum boundary_type {None, Noflux, SourceSink, SAM};$/;"	e	enum:CellBase::boundary_type
Norm	vector.h	/^  inline double Norm(void) const {$/;"	f	class:Vector
Normal	wallbase.h	/^  enum WallType {Normal, SubstSource, SubstSink};$/;"	e	enum:WallBase::WallType
Normalise	vector.cpp	/^void Vector::Normalise(void) {$/;"	f	class:Vector
Normalised	vector.cpp	/^Vector Vector::Normalised(void) const {$/;"	f	class:Vector
NumberOfDivisions	cellbase.h	/^  inline int NumberOfDivisions(void) { return div_counter; }$/;"	f	class:CellBase
Offset	cell.h	/^  static Vector Offset(void) {$/;"	f	class:Cell
Offset	mesh.h	/^  inline Vector Offset(void) {$/;"	f	class:Mesh
OnClick	VirtualLeaf.cpp	/^void Cell::OnClick(QMouseEvent *e){$/;"	f	class:Cell
OnClick	apoplastitem.cpp	/^void ApoplastItem::OnClick(QMouseEvent *e) {}$/;"	f	class:ApoplastItem
OnClick	nodeitem.cpp	/^void NodeItem::OnClick(const Qt::MouseButton &mb)$/;"	f	class:NodeItem
OnClick	nodeitem.cpp	/^void NodeItem::OnClick(void)$/;"	f	class:NodeItem
OnClick	wallitem.cpp	/^void WallItem::OnClick(QMouseEvent *e) {$/;"	f	class:WallItem
OpenFileAndCheckExistance	output.cpp	/^int OpenFileAndCheckExistance(FILE **fp,const char *fname,char *ftype) {$/;"	f
OpenReadFile	output.cpp	/^FILE *OpenReadFile(const char *filename) $/;"	f
OpenWriteFile	output.cpp	/^FILE *OpenWriteFile(const char *filename) $/;"	f
OptionFileDialog	OptionFileDialog.cpp	/^OptionFileDialog::OptionFileDialog ( const QString & dirName, const QString & filter , $/;"	f	class:OptionFileDialog
OptionFileDialog	OptionFileDialog.cpp	/^OptionFileDialog::OptionFileDialog(QWidget *parent, const char *name, bool modal) : Q3FileDialog(parent, name, modal)$/;"	f	class:OptionFileDialog
OptionFileDialog	OptionFileDialog.h	/^class OptionFileDialog : public Q3FileDialog {$/;"	c
PARAMETER_DIALOG_H	pardialog.h	28;"	d
PGrow	forwardeuler.cpp	/^const double ForwardEuler::PGrow = -0.2;$/;"	m	class:ForwardEuler	file:
PGrow	forwardeuler.h	/^  static const double PGrow;$/;"	m	class:ForwardEuler
PGrow	rungekutta.cpp	/^const double RungeKutta::PGrow = -0.2;$/;"	m	class:RungeKutta	file:
PGrow	rungekutta.h	/^  static const double PGrow;$/;"	m	class:RungeKutta
PLOT_SIZE	data_plot.h	/^const int PLOT_SIZE = 1000; $/;"	v
PREFIX	canvas.h	57;"	d
PREFIX	canvas.h	59;"	d
Parameter	parameter.cpp	/^Parameter::Parameter() {$/;"	f	class:Parameter
Parameter	parameter.h	/^ class Parameter {$/;"	c
ParameterDialog	pardialog.cpp	/^ParameterDialog::ParameterDialog(QWidget *parent, const char *name, Qt::WindowFlags f) : QDialog(parent,name,false,f) {$/;"	f	class:ParameterDialog
ParameterDialog	pardialog.h	/^class ParameterDialog : public QDialog {$/;"	c
ParentInfo	cellbase.h	/^struct ParentInfo {$/;"	s
Parent_Index	cellbase.h	/^  inline int Parent_Index(void) const { return par_index; }$/;"	f	class:CellBase
ParsChanged	moc_canvas.cpp	/^void Main::ParsChanged()$/;"	f	class:Main
ParsePar	parse.cpp	/^char *ParsePar(FILE *fp, char *parameter, bool wrapflag) $/;"	f
PauseIfRunning	canvas.cpp	/^void Main::PauseIfRunning(void)$/;"	f	class:Main
PausedP	canvas.h	/^  virtual bool PausedP(void) {return run->isItemChecked(paused_id);}$/;"	f	class:Main
PausedP	mainbase.h	/^  virtual bool PausedP(void) {return false; }$/;"	f	class:MainBase
Perp2D	vector.h	/^  Vector Perp2D(void) const {$/;"	f	class:Vector
PerturbChem	mesh.cpp	/^void Mesh::PerturbChem(int chemnum, double range) {$/;"	f	class:Mesh
Pi	pi.h	/^const double Pi=3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170676;$/;"	v
Plot	VirtualLeaf.cpp	/^void MainBase::Plot(int resize_stride)$/;"	f	class:MainBase
PlotDialog	data_plot.cpp	/^PlotDialog::PlotDialog(QWidget *parent, const QString title, const QStringList curvenames):$/;"	f	class:PlotDialog
PlotDialog	data_plot.h	/^class PlotDialog : public QDialog {$/;"	c
Point	hull.h	/^  Point(float xx, float yy) {$/;"	f	class:Point
Point	hull.h	/^  Point(void) {$/;"	f	class:Point
Point	hull.h	/^class Point {$/;"	c
PopulateModelMenu	modelcatalogue.cpp	/^void ModelCatalogue::PopulateModelMenu() {$/;"	f	class:ModelCatalogue
PrintNode	VirtualLeaf.cpp	/^class PrintNode {$/;"	c	file:
PrintQueue	mesh.h	/^  void PrintQueue(ostream &os) {$/;"	f	class:Mesh
PrintWallList	mesh.cpp	/^void Mesh::PrintWallList( void ) {$/;"	f	class:Mesh
Pshrnk	forwardeuler.cpp	/^const double ForwardEuler::Pshrnk = -0.25;$/;"	m	class:ForwardEuler	file:
Pshrnk	forwardeuler.h	/^  static const double Pshrnk;$/;"	m	class:ForwardEuler
Pshrnk	rungekutta.cpp	/^const double RungeKutta::Pshrnk = -0.25;$/;"	m	class:RungeKutta	file:
Pshrnk	rungekutta.h	/^  static const double Pshrnk;$/;"	m	class:RungeKutta
QGraphicsArrowItem	qcanvasarrow.h	/^ QGraphicsArrowItem(QGraphicsItem *parent, QGraphicsScene *c) : QGraphicsLineItem(parent, c) {};$/;"	f	class:QGraphicsArrowItem
QGraphicsArrowItem	qcanvasarrow.h	/^class QGraphicsArrowItem : public QGraphicsLineItem {$/;"	c
QMAKE	Makefile	/^	QMAKE=qmake-qt4$/;"	m
QUOTE_ME	canvas.cpp	95;"	d	file:
QUOTE_ME_2NDLEV	canvas.cpp	96;"	d	file:
Quiet	warning.cpp	/^int Quiet=0;$/;"	v
RANDOM	random.cpp	/^double RANDOM(void)$/;"	f
RandomCounter	random.cpp	/^int RandomCounter(void) {$/;"	f
RandomNumber	random.cpp	/^long RandomNumber(long max)$/;"	f
Randomize	random.cpp	/^int Randomize(void) {$/;"	f
RandomizeChemicals	mesh.cpp	/^void Mesh::RandomizeChemicals(const vector<double> &max_chem, const vector<double> &max_transporters) {$/;"	f	class:Mesh
RandomizeMesh	canvas.cpp	/^void Main::RandomizeMesh(void) $/;"	f	class:Main
RandomlyLoopCells	mesh.h	/^  template<class Op> void RandomlyLoopCells(Op f) {$/;"	f	class:Mesh
RandomlyLoopNodes	mesh.h	/^  template<class Op> void RandomlyLoopNodes(Op f) {$/;"	f	class:Mesh
ReactDiffuse	mesh.cpp	/^void Mesh::ReactDiffuse(double delta_t) {$/;"	f	class:Mesh
Read	parameter.cpp	/^void Parameter::Read(const char *filename) {$/;"	f	class:Parameter
ReadDump	vector.h	/^  void ReadDump(istream &is) {$/;"	f	class:Vector
ReadLine	output.cpp	/^char *ReadLine(FILE *fp) $/;"	f
RecalcArea	cellbase.h	/^  double RecalcArea(void) { return area = CalcArea(); }$/;"	f	class:CellBase
RectangularCell	mesh.cpp	/^Cell *Mesh::RectangularCell(const Vector ll, const Vector ur, double rotation) {$/;"	f	class:Mesh
ReduceCellAndWalls	cellbase.h	/^  template<class P, class Op> P ReduceCellAndWalls(Op f)$/;"	f	class:CellBase
ReduceNeighbors	cellbase.h	/^  template<class P, class Op> P ReduceNeighbors(Op f) {$/;"	f	class:CellBase
ReduceWalls	cellbase.h	/^  template<class P, class Op> P ReduceWalls(Op f, P sum) {$/;"	f	class:CellBase
Refresh	canvas.h	/^  void Refresh(void) { Plot(); }$/;"	f	class:Main
RefreshInfoBar	canvas.cpp	/^void Main::RefreshInfoBar(void)$/;"	f	class:Main
RemoveWall	cell.cpp	/^list<Wall *>::iterator Cell::RemoveWall( Wall *w )$/;"	f	class:Cell
RepairBoundaryPolygon	mesh.cpp	/^void Mesh::RepairBoundaryPolygon(void) {$/;"	f	class:Mesh
ReserveMoreCells	mesh.h	/^  void ReserveMoreCells(int n) {$/;"	f	class:Mesh
Reset	pardialog.cpp	/^void ParameterDialog::Reset(void) {$/;"	f	class:ParameterDialog
ResetBoundary	cellbase.h	/^  boundary_type ResetBoundary(void) { return boundary=None; }$/;"	f	class:CellBase
ResetDone	nodeset.h	/^  inline void ResetDone(void) { done = false; }$/;"	f	class:NodeSet
RestartSim	canvas.cpp	/^void Main::RestartSim(void)$/;"	f	class:Main
Rot2D	matrix.cpp	/^void Matrix::Rot2D(double theta)$/;"	f	class:Matrix
Rotate	mesh.cpp	/^void Mesh::Rotate(double angle, Vector center) {$/;"	f	class:Mesh
RotationModeP	canvas.h	/^  virtual bool RotationModeP(void) { return options->isItemChecked(rotation_mode_id); }$/;"	f	class:Main
RungeKutta	rungekutta.h	/^  RungeKutta(void) {$/;"	f	class:RungeKutta
RungeKutta	rungekutta.h	/^class RungeKutta  {$/;"	c
SAM	cellbase.h	/^  enum boundary_type {None, Noflux, SourceSink, SAM};$/;"	e	enum:CellBase::boundary_type
SAM_P	wallbase.cpp	/^bool WallBase::SAM_P(void)$/;"	f	class:WallBase
SIGN	maxmin.h	/^inline double SIGN(double a, double b) { return b>=0.0 ? fabs(a) : -fabs(a); }$/;"	f
SQR	sqr.h	/^inline float SQR( float a ) {$/;"	f
Safety	forwardeuler.cpp	/^const double ForwardEuler::Safety  = 0.9;$/;"	m	class:ForwardEuler	file:
Safety	forwardeuler.h	/^  static const double Safety;$/;"	m	class:ForwardEuler
Safety	rungekutta.cpp	/^const double RungeKutta::Safety  = 0.9;$/;"	m	class:RungeKutta	file:
Safety	rungekutta.h	/^  static const double Safety;$/;"	m	class:RungeKutta
SamP	node.h	/^  inline bool SamP(void) const { return sam; }$/;"	f	class:Node
SameDirP	vector.cpp	/^bool Vector::SameDirP(const Vector &v) {$/;"	f	class:Vector
Save	canvas.cpp	/^void FigureEditor::Save(const char *fname, const char *format, int sizex, int sizey)$/;"	f	class:FigureEditor
Save	mainbase.cpp	/^int MainBase::Save(const char *fname, const char *format, int sizex, int sizey)$/;"	f	class:MainBase
Scale	cell.h	/^  static double Scale(const double scale) {$/;"	f	class:Cell
SearchToken	parse.cpp	/^char *SearchToken(FILE *fp, char *token,bool wrapflag) $/;"	f
Seed	random.cpp	/^int Seed(int seed)$/;"	f
SelfIntersect	cell.cpp	/^bool Cell::SelfIntersect(void)$/;"	f	class:Cell
SetBaseArea	mesh.cpp	/^void Mesh::SetBaseArea(void) {$/;"	f	class:Mesh
SetBoundary	cellbase.h	/^  boundary_type SetBoundary(boundary_type bound)$/;"	f	class:CellBase
SetBoundary	node.h	/^  inline void SetBoundary(void) { boundary = true; }$/;"	f	class:Node
SetCellType	cellbase.h	/^  inline void SetCellType(int ct) { cell_type = ct; }$/;"	f	class:CellBase
SetCellsStaticDatamembers	simplugin.cpp	/^void SimPluginInterface::SetCellsStaticDatamembers( CellsStaticDatamembers *cells_static_data_members_of_main)$/;"	f	class:SimPluginInterface
SetChemToNewchem	cellbase.h	/^  inline void SetChemToNewchem(void)$/;"	f	class:CellBase
SetChemical	cellbase.cpp	/^void CellBase::SetChemical(int c, double conc)$/;"	f	class:CellBase
SetChemical	mesh.h	/^  void SetChemical(int ch, double value) {$/;"	f	class:Mesh
SetIntegrals	cellbase.cpp	/^void CellBase::SetIntegrals(void) const$/;"	f	class:CellBase
SetLambdaLength	cellbase.h	/^  inline void SetLambdaLength(double lambda_length) { lambda_celllength = lambda_length; }$/;"	f	class:CellBase
SetLength	wallbase.cpp	/^void WallBase::SetLength(void)$/;"	f	class:WallBase
SetMagnification	cell.h	/^  static void SetMagnification(const double &magn) {$/;"	f	class:Cell
SetNChem	cellbase.h	/^  static void SetNChem(int new_nchem)$/;"	f	class:CellBase
SetNewChem	cellbase.h	/^  inline void SetNewChem(int chem, double conc)$/;"	f	class:CellBase
SetNewChemToChem	cellbase.h	/^  inline void SetNewChemToChem(void)$/;"	f	class:CellBase
SetParameters	simplugin.cpp	/^void SimPluginInterface::SetParameters(Parameter *pass_pars)$/;"	f	class:SimPluginInterface
SetSAM	node.h	/^  inline void SetSAM(void) { sam = true; }$/;"	f	class:Node
SetSimPlugin	mesh.h	/^  void SetSimPlugin(SimPluginInterface *new_plugin) {$/;"	f	class:Mesh
SetSource	cellbase.h	/^  void SetSource(int chem, double conc)$/;"	f	class:CellBase
SetStiffness	cellbase.h	/^  inline void SetStiffness(double stiff) { stiffness = stiff; }$/;"	f	class:CellBase
SetTargetArea	cellbase.h	/^  void SetTargetArea(double tar_ar) { target_area=tar_ar; }$/;"	f	class:CellBase
SetTargetLength	cellbase.h	/^  inline void SetTargetLength(double tar_l) { target_length=tar_l; }$/;"	f	class:CellBase
SetText	infobar.h	/^  void SetText(QString text) {$/;"	f	class:InfoBar
SetTransToNewTrans	wallbase.cpp	/^void WallBase::SetTransToNewTrans( void ){ $/;"	f	class:WallBase
SetTransporters	cellbase.cpp	/^void CellBase::SetTransporters(int ch, double conc)$/;"	f	class:CellBase
SetWallLengths	cell.cpp	/^void Cell::SetWallLengths(void)$/;"	f	class:Cell
SettoInitVals	mesh.cpp	/^void Mesh::SettoInitVals(void) {$/;"	f	class:Mesh
ShowBorderCellsP	canvas.h	/^  virtual bool ShowBorderCellsP(void) {return view->isItemChecked(border_id);}$/;"	f	class:Main
ShowBorderCellsP	mainbase.h	/^  virtual bool ShowBorderCellsP(void) {return showbordercellp; }$/;"	f	class:MainBase
ShowBoundaryOnlyP	canvas.h	/^  virtual bool ShowBoundaryOnlyP(void) {return view->isItemChecked(only_boundary_id);}$/;"	f	class:Main
ShowBoundaryOnlyP	mainbase.h	/^  virtual bool ShowBoundaryOnlyP(void) {return showboundaryonlyp;}$/;"	f	class:MainBase
ShowCellAxesP	canvas.h	/^  virtual bool ShowCellAxesP(void) {return view->isItemChecked(cell_axes_id);}$/;"	f	class:Main
ShowCellAxesP	mainbase.h	/^  virtual bool ShowCellAxesP(void) {return showcellsaxesp;}$/;"	f	class:MainBase
ShowCellNumbersP	canvas.h	/^  virtual bool ShowCellNumbersP(void) {return view->isItemChecked(cell_number_id);}$/;"	f	class:Main
ShowCellNumbersP	mainbase.h	/^  virtual bool ShowCellNumbersP(void) {return showcellnumbersp;}$/;"	f	class:MainBase
ShowCellStrainP	canvas.h	/^  virtual bool ShowCellStrainP(void) {return view->isItemChecked(cell_strain_id);}$/;"	f	class:Main
ShowCellStrainP	mainbase.h	/^  virtual bool ShowCellStrainP(void) {return showcellstrainp;}$/;"	f	class:MainBase
ShowCellThickP	canvas.h	/^  virtual bool ShowCellThickP(void) {return view->isItemChecked(cell_thick_id);}$/;"	f	class:Main
ShowCellThickP	mainbase.h	/^  virtual bool ShowCellThickP(void) {return showcellthickp;}$/;"	f	class:MainBase
ShowCentersP	canvas.h	/^  virtual bool ShowCentersP(void) {return view->isItemChecked(com_id);}$/;"	f	class:Main
ShowCentersP	mainbase.h	/^  virtual bool ShowCentersP(void) {return showcentersp;}$/;"	f	class:MainBase
ShowFluxesP	canvas.h	/^  virtual bool ShowFluxesP(void) { return view->isItemChecked(fluxes_id); }$/;"	f	class:Main
ShowFluxesP	mainbase.h	/^  virtual bool ShowFluxesP(void) { return showfluxesp; }$/;"	f	class:MainBase
ShowMeshP	canvas.h	/^  virtual bool ShowMeshP(void) {return view->isItemChecked(mesh_id);}$/;"	f	class:Main
ShowMeshP	mainbase.h	/^  virtual bool ShowMeshP(void) {return showmeshp; }$/;"	f	class:MainBase
ShowNodeNumbersP	canvas.h	/^  virtual bool ShowNodeNumbersP(void) {return view->isItemChecked(node_number_id);}$/;"	f	class:Main
ShowNodeNumbersP	mainbase.h	/^  virtual bool ShowNodeNumbersP(void) {return shownodenumbersp; }$/;"	f	class:MainBase
ShowStructure	wall.cpp	/^void Wall::ShowStructure(QGraphicsScene *c) {$/;"	f	class:Wall
ShowToolTipsP	canvas.h	/^  virtual bool ShowToolTipsP(void) { return helpmenu->isItemChecked(tooltips_id); }$/;"	f	class:Main
ShowToolTipsP	mainbase.h	/^  virtual bool ShowToolTipsP(void) {return showtooltipsp;}$/;"	f	class:MainBase
ShowWallsP	canvas.h	/^  virtual bool ShowWallsP(void) {return view->isItemChecked(cell_walls_id);}$/;"	f	class:Main
ShowWallsP	mainbase.h	/^  virtual bool ShowWallsP(void) {return showwallsp;}$/;"	f	class:MainBase
SignedAngle	vector.cpp	/^double Vector::SignedAngle(const Vector &v) const {$/;"	f	class:Vector
SimItemBase	simitembase.cpp	/^SimItemBase::SimItemBase( void *v, QGraphicsScene *canvas )$/;"	f	class:SimItemBase
SimItemBase	simitembase.h	/^class SimItemBase$/;"	c
SimPluginInterface	simplugin.h	/^class SimPluginInterface {$/;"	c
SimulationDone	moc_canvas.cpp	/^void Main::SimulationDone()$/;"	f	class:Main
SkipLine	parse.cpp	/^void SkipLine(FILE *fp) {$/;"	f
SkipToken	parse.cpp	/^void SkipToken(FILE *fp,char *token, bool wrapflag)$/;"	f
SolveMesh	mesh.cpp	/^  SolveMesh(Mesh *m_) {$/;"	f	class:SolveMesh
SolveMesh	mesh.cpp	/^class SolveMesh : public RungeKutta {$/;"	c	file:
Source	cellbase.h	/^  inline bool Source(void) { return source; }$/;"	f	class:CellBase
SourceSink	cellbase.h	/^  enum boundary_type {None, Noflux, SourceSink, SAM};$/;"	e	enum:CellBase::boundary_type
SqrNorm	vector.cpp	/^double Vector::SqrNorm(void) const {$/;"	f	class:Vector
StandardInit	mesh.cpp	/^void Mesh::StandardInit(void) {$/;"	f	class:Mesh
Stiffness	cellbase.h	/^  inline double Stiffness(void) { return stiffness; }$/;"	f	class:CellBase
SubstSink	wallbase.h	/^  enum WallType {Normal, SubstSource, SubstSink};$/;"	e	enum:WallBase::WallType
SubstSource	wallbase.h	/^  enum WallType {Normal, SubstSource, SubstSink};$/;"	e	enum:WallBase::WallType
SubstanceSink	wallbase.h	/^  inline bool SubstanceSink(void) const { return wall_type == SubstSink; }$/;"	f	class:WallBase
SubstanceSource	wallbase.h	/^  inline bool SubstanceSource(void) const { return wall_type == SubstSource; }$/;"	f	class:WallBase
SumChemical	mesh.cpp	/^double Mesh::SumChemical(int ch) {$/;"	f	class:Mesh
SumChemicalsOfNeighbors	cellbase.h	/^  double SumChemicalsOfNeighbors(int chem)$/;"	f	class:CellBase
SumFluxFromWalls	flux_function.h	38;"	d
SumLengthTransporters	cellbase.h	/^  double SumLengthTransporters(int ch)$/;"	f	class:CellBase
SumLengthTransportersChemical	cellbase.h	/^  double SumLengthTransportersChemical(int trch, int ch)$/;"	f	class:CellBase
SumTransporters	cellbase.h	/^  double SumTransporters(int ch)$/;"	f	class:CellBase
SwapWallContents	wallbase.cpp	/^void WallBase::SwapWallContents(WallBase *src)$/;"	f	class:WallBase
T	parameter.h	/^  double T;$/;"	m	class:Parameter
TIMESTEP	VirtualLeaf.cpp	67;"	d	file:
TIMESTEP	mainbase.h	141;"	d
TINY	tiny.h	28;"	d
TRANSP0Sum	VirtualLeaf.cpp	/^double TRANSP0Sum(Cell &c) {$/;"	f
TRANSP0_fixed	cellbase.h	/^  bool TRANSP0_fixed;$/;"	m	class:CellBase
TRANSP0dir	cellbase.h	/^inline Vector TRANSP0dir(CellBase *here, CellBase *nb, Wall *w)$/;"	f
TRANSP0endosome	cellbase.h	/^  double TRANSP0endosome;$/;"	m	struct:ParentInfo
TRANSP0membrane	cellbase.h	/^  double TRANSP0membrane;$/;"	m	struct:ParentInfo
TRUE	output.h	53;"	d
T_edit	pardialog.h	/^  QLineEdit *T_edit;$/;"	m	class:ParameterDialog
TargetArea	cellbase.h	/^  inline double TargetArea(void) { return target_area; }$/;"	f	class:CellBase
TargetLength	cellbase.h	/^  inline double TargetLength() const { return target_length; } $/;"	f	class:CellBase
TestIllegalWalls	mesh.cpp	/^void Mesh::TestIllegalWalls(void) {$/;"	f	class:Mesh
ThrowStringStream	xmlwrite.cpp	/^void ThrowStringStream(stringstream &s) {$/;"	f
TimeStepWrap	canvas.cpp	/^void Main::TimeStepWrap(void)$/;"	f	class:Main
Tiny	forwardeuler.cpp	/^const double ForwardEuler::Tiny = 1.0e-30;$/;"	m	class:ForwardEuler	file:
Tiny	forwardeuler.h	/^  static const double Tiny;$/;"	m	class:ForwardEuler
Tiny	rungekutta.cpp	/^const double RungeKutta::Tiny = 1.0e-30;$/;"	m	class:RungeKutta	file:
Tiny	rungekutta.h	/^  static const double Tiny;$/;"	m	class:RungeKutta
TokenInLineP	parse.cpp	/^int TokenInLineP(char *line,char *token) $/;"	f
Translate	cell.h	/^  static void Translate(const double &tx,const double &ty) {$/;"	f	class:Cell
TransporterDialog	transporterdialog.cpp	/^TransporterDialog::TransporterDialog(Wall *w, CellBase *c, int wn, QWidget *parent)$/;"	f	class:TransporterDialog
TransporterDialog	transporterdialog.h	/^class TransporterDialog : public QDialog$/;"	c
Transporters1	wallbase.h	/^  inline double Transporters1(int ch) { return transporters1[ch]; }$/;"	f	class:WallBase
Transporters2	wallbase.h	/^  inline double Transporters2(int ch) { return transporters2[ch]; }$/;"	f	class:WallBase
UNIDENTIFIED	warning.h	30;"	d
Unfix	cellbase.h	/^  inline bool Unfix(void) { UnfixNodes(); return (fixed=false);}$/;"	f	class:CellBase
Unfix	node.h	/^  inline void Unfix(void) { fixed=false; }$/;"	f	class:Node
UnfixNodes	cellbase.cpp	/^void CellBase::UnfixNodes(void)$/;"	f	class:CellBase
UniqueMessageBox	UniqueMessage.cpp	/^UniqueMessageBox::UniqueMessageBox ( \/* Icon icon,*\/ $/;"	f	class:UniqueMessageBox
UniqueMessageBox	UniqueMessage.h	/^class UniqueMessageBox : public QDialog {$/;"	c
Unmark	cellbase.h	/^  inline void Unmark(void)$/;"	f	class:CellBase
Unmark	node.h	/^  inline void Unmark(void) { marked=false; }$/;"	f	class:Node
UnsetBoundary	node.h	/^  inline void UnsetBoundary(void) { boundary = false; }$/;"	f	class:Node
UnsetSource	cellbase.h	/^  void UnsetSource(void) {$/;"	f	class:CellBase
UserMessage	canvas.cpp	/^void Main::UserMessage(QString message, int timeout)$/;"	f	class:Main
UserMessage	mainbase.h	/^  virtual void UserMessage(QString message, int timeout = 0) {$/;"	f	class:MainBase
Value	node.h	/^  inline int Value(void) const { return owners.size(); }$/;"	f	class:Node
Vector	vector.h	/^  explicit inline Vector(const double m[3]) {$/;"	f	class:Vector
Vector	vector.h	/^  inline Vector(const QPointF &p) {$/;"	f	class:Vector
Vector	vector.h	/^  inline Vector(const Vector &source) { $/;"	f	class:Vector
Vector	vector.h	/^  inline Vector(const double cx=0,const double cy=0,const double cz=0) {$/;"	f	class:Vector
Vector	vector.h	/^class Vector {$/;"	c
VertexAngles	mesh.cpp	/^QVector<qreal> Mesh::VertexAngles(void) {$/;"	f	class:Mesh
VertexAnglesValues	mesh.cpp	/^QVector< QPair<qreal,int> > Mesh::VertexAnglesValues(void) {$/;"	f	class:Mesh
VizFlux	wallbase.cpp	/^Vector WallBase::VizFlux(void)$/;"	f	class:WallBase
Wall	wall.h	/^ Wall(Node *sn1, Node *sn2, CellBase *sc1, CellBase *sc2) : WallBase(sn1, sn2, sc1, sc2) {}$/;"	f	class:Wall
Wall	wall.h	/^class Wall : public WallBase {$/;"	c
WallBase	wallbase.cpp	/^WallBase::WallBase(Node *sn1, Node *sn2, CellBase *sc1, CellBase *sc2)$/;"	f	class:WallBase
WallBase	wallbase.h	/^  WallBase(const WallBase &src) {$/;"	f	class:WallBase
WallBase	wallbase.h	/^  WallBase(void) {}$/;"	f	class:WallBase
WallBase	wallbase.h	/^class WallBase {$/;"	c
WallCircumference	cellbase.h	/^  inline double WallCircumference(void) const {$/;"	f	class:CellBase
WallItem	wallitem.cpp	/^WallItem::WallItem( Wall *w, int wallnumber, QGraphicsScene *canvas )$/;"	f	class:WallItem
WallItem	wallitem.h	/^class WallItem : public QGraphicsLineItem, public SimItemBase$/;"	c
WallType	wallbase.h	/^  enum WallType {Normal, SubstSource, SubstSink};$/;"	g	class:WallBase
WallTypeP	wallbase.h	/^  inline bool WallTypeP(void) {return wall_type;}$/;"	f	class:WallBase
WallTypetoStr	wall.cpp	/^string Wall::WallTypetoStr(const WallType &wt) const {$/;"	f	class:Wall
Width	cellbase.cpp	/^double CellBase::Width(void)  const$/;"	f	class:CellBase
Write	parameter.cpp	/^void Parameter::Write(ostream &os) const {$/;"	f	class:Parameter
XMLAdd	parameter.cpp	/^void Parameter::XMLAdd(xmlNode *root) const {$/;"	f	class:Parameter
XMLAdd	xmlwrite.cpp	/^void BoundaryPolygon::XMLAdd(xmlNodePtr parent_node) const {$/;"	f	class:BoundaryPolygon
XMLAdd	xmlwrite.cpp	/^void Cell::XMLAdd(xmlNodePtr cells_node) const {$/;"	f	class:Cell
XMLAdd	xmlwrite.cpp	/^void Neighbor::XMLAdd(xmlNodePtr neighbors_node) const {$/;"	f	class:Neighbor
XMLAdd	xmlwrite.cpp	/^void Node::XMLAdd(xmlNodePtr nodes_node) const { $/;"	f	class:Node
XMLAdd	xmlwrite.cpp	/^void NodeSet::XMLAdd(xmlNode *root) const {$/;"	f	class:NodeSet
XMLAdd	xmlwrite.cpp	/^void Wall::XMLAdd(xmlNode *parent) const { $/;"	f	class:Wall
XMLAddCore	xmlwrite.cpp	/^void Cell::XMLAddCore(xmlNodePtr xmlcell) const {$/;"	f	class:Cell
XMLIO	xmlwrite.h	/^namespace XMLIO {$/;"	n
XMLParseTree	xmlwrite.cpp	/^void Mesh::XMLParseTree(const xmlNode *root_node)$/;"	f	class:Mesh
XMLRead	xmlwrite.cpp	/^int Cell::XMLRead(xmlNode *cur)$/;"	f	class:Cell
XMLRead	xmlwrite.cpp	/^void Mesh::XMLRead(const char *docname, xmlNode **settings, bool geometry, bool pars, bool simtime)$/;"	f	class:Mesh
XMLRead	xmlwrite.cpp	/^void NodeSet::XMLRead(xmlNode *root, Mesh *m)$/;"	f	class:NodeSet
XMLRead	xmlwrite.cpp	/^void Parameter::XMLRead(xmlNode *root)$/;"	f	class:Parameter
XMLReadCells	xmlwrite.cpp	/^void Mesh::XMLReadCells(xmlNode *root)$/;"	f	class:Mesh
XMLReadGeometry	xmlwrite.cpp	/^void Mesh::XMLReadGeometry(const xmlNode * a_node)$/;"	f	class:Mesh
XMLReadNodeSets	xmlwrite.cpp	/^void Mesh::XMLReadNodeSets(xmlNode *root)$/;"	f	class:Mesh
XMLReadNodeSetsToNodes	xmlwrite.cpp	/^void Mesh::XMLReadNodeSetsToNodes(xmlNode *root)$/;"	f	class:Mesh
XMLReadNodes	xmlwrite.cpp	/^void Mesh::XMLReadNodes(xmlNode *root)$/;"	f	class:Mesh
XMLReadPars	xmlwrite.cpp	/^void Mesh::XMLReadPars(const xmlNode * a_node)$/;"	f	class:Mesh
XMLReadSettings	canvas.cpp	/^void Main::XMLReadSettings(xmlNode *settings) $/;"	f	class:Main
XMLReadSettings	mainbase.cpp	/^void MainBase::XMLReadSettings(xmlNode *settings)$/;"	f	class:MainBase
XMLReadSimtime	xmlwrite.cpp	/^void Mesh::XMLReadSimtime(const xmlNode *a_node)$/;"	f	class:Mesh
XMLReadValArray	xmlwrite.cpp	/^vector<double> XMLIO::XMLReadValArray(xmlNode *cur)$/;"	f	class:XMLIO
XMLReadViewport	mainbase.cpp	/^void MainBase::XMLReadViewport(xmlNode *settings) {$/;"	f	class:MainBase
XMLReadWalls	xmlwrite.cpp	/^void Mesh::XMLReadWalls(xmlNode *root, vector<Wall *> *tmp_walls)$/;"	f	class:Mesh
XMLReadWallsToCells	xmlwrite.cpp	/^void Mesh::XMLReadWallsToCells(xmlNode *root, vector<Wall *> *tmp_walls)$/;"	f	class:Mesh
XMLSave	xmlwrite.cpp	/^void Mesh::XMLSave(const char *docname, xmlNode *options) const$/;"	f	class:Mesh
XMLSettingsTree	canvas.cpp	/^xmlNode *Main::XMLSettingsTree(void) $/;"	f	class:Main
XMLSettingsTree	mainbase.cpp	/^xmlNode *MainBase::XMLSettingsTree(void) {$/;"	f	class:MainBase
XMLViewportTree	mainbase.cpp	/^xmlNode *MainBase::XMLViewportTree(QTransform &transform) const {$/;"	f	class:MainBase
YesNoP	output.cpp	/^int YesNoP(const char *message) {$/;"	f
_APOPLASTITEM_H_	apoplastitem.h	25;"	d
_CANVAS_H_	canvas.h	25;"	d
_CELLBASE_H_	cellbase.h	27;"	d
_CELLITEM_H_	cellitem.h	26;"	d
_CELL_H_	cell.h	25;"	d
_CURVECOLORS_H_	curvecolors.h	26;"	d
_DATA_PLOT_H_	data_plot.h	25;"	d
_FAR_MEM_5_h_	far_mem_5.h	25;"	d
_FLUX_FUNCTION_h_	flux_function.h	26;"	d
_FORWARDEULER_H_	forwardeuler.h	26;"	d
_HULL_H_	hull.h	2;"	d
_INFOBAR_H_	infobar.h	26;"	d
_MAINBASE_H_	mainbase.h	26;"	d
_MATRIX_H_	matrix.h	26;"	d
_MAXMIN_H_	maxmin.h	26;"	d
_MESH_H_	mesh.h	28;"	d
_MODELCATALOGUE_H_	modelcatalogue.h	25;"	d
_MODELELEMENT_H_	modelelement.h	26;"	d
_NEIGHBOR_H_	Neighbor.h	26;"	d
_NODEITEM_H_	nodeitem.h	26;"	d
_NODESET_H_	nodeset.h	26;"	d
_NODE_H_	node.h	26;"	d
_OPTIONFILEDIALOG_H_	OptionFileDialog.h	24;"	d
_OUTPUT_H_	output.h	26;"	d
_PARAMETER_H_	parameter.h	28;"	d
_PARSE_H_	parse.h	26;"	d
_PI_H_	pi.h	26;"	d
_QCANVASARROW_H_	qcanvasarrow.h	26;"	d
_RANDOM_H_	random.h	26;"	d
_RUNGEKUTTA_H_	rungekutta.h	26;"	d
_SIMITEMBASE_H_	simitembase.h	26;"	d
_SIMPLUGIN_H_	simplugin.h	26;"	d
_SQR_H_	sqr.h	27;"	d
_TINY_H_	tiny.h	26;"	d
_TRANSPORTERDIALOG_H_	transporterdialog.h	26;"	d
_UNIQUEMESSAGE_H_	UniqueMessage.h	26;"	d
_VECTOR_H_	vector.h	26;"	d
_VLEAFMODEL_H_	vleafmodel.h	25;"	d
_WALLBASE_H_	wallbase.h	27;"	d
_WALLITEM_H_	wallitem.h	26;"	d
_WALL_H_	wall.h	26;"	d
_WARNING_H_	warning.h	26;"	d
_XML_WRITE_H_	xmlwrite.h	26;"	d
about	canvas.cpp	/^void Main::about()$/;"	f	class:Main
aboutQt	canvas.cpp	/^void Main::aboutQt(){$/;"	f	class:Main
alignScales	data_plot.cpp	/^void DataPlot::alignScales()$/;"	f	class:DataPlot
alignment_lambda	parameter.h	/^  double alignment_lambda;$/;"	m	class:Parameter
alignment_lambda_edit	pardialog.h	/^  QLineEdit *alignment_lambda_edit;$/;"	m	class:ParameterDialog
area	cellbase.h	/^  mutable double area;$/;"	m	class:CellBase
area	mesh.cpp	/^  double area;$/;"	m	class:DeltaIntgrl	file:
argument_type1	far_mem_5.h	/^    typedef _Arg1 argument_type1;$/;"	t	struct:my_1_function
argument_type1	far_mem_5.h	/^    typedef _Arg1 argument_type1;$/;"	t	struct:my_2_function
argument_type1	far_mem_5.h	/^    typedef _Arg1 argument_type1;$/;"	t	struct:my_3_function
argument_type1	far_mem_5.h	/^    typedef _Arg1 argument_type1;$/;"	t	struct:my_4_function
argument_type1	far_mem_5.h	/^    typedef _Arg1 argument_type1;$/;"	t	struct:my_5_function
argument_type2	far_mem_5.h	/^    typedef _Arg2 argument_type2;$/;"	t	struct:my_2_function
argument_type2	far_mem_5.h	/^    typedef _Arg2 argument_type2;$/;"	t	struct:my_3_function
argument_type2	far_mem_5.h	/^    typedef _Arg2 argument_type2;$/;"	t	struct:my_4_function
argument_type2	far_mem_5.h	/^    typedef _Arg2 argument_type2;$/;"	t	struct:my_5_function
argument_type3	far_mem_5.h	/^    typedef _Arg3 argument_type3;$/;"	t	struct:my_3_function
argument_type3	far_mem_5.h	/^    typedef _Arg3 argument_type3;$/;"	t	struct:my_4_function
argument_type3	far_mem_5.h	/^    typedef _Arg3 argument_type3;$/;"	t	struct:my_5_function
argument_type4	far_mem_5.h	/^    typedef _Arg4 argument_type4;$/;"	t	struct:my_4_function
argument_type4	far_mem_5.h	/^    typedef _Arg4 argument_type4;$/;"	t	struct:my_5_function
argument_type5	far_mem_5.h	/^    typedef _Arg5 argument_type5;$/;"	t	struct:my_5_function
arrowcolor	parameter.h	/^  char * arrowcolor;$/;"	m	class:Parameter
arrowcolor_edit	pardialog.h	/^  QLineEdit *arrowcolor_edit;$/;"	m	class:ParameterDialog
arrowlength	parameter.h	/^  double arrowlength;$/;"	m	class:Parameter
arrowlength_edit	pardialog.h	/^  QLineEdit *arrowlength_edit;$/;"	m	class:ParameterDialog
at_boundary	cellbase.h	/^  bool at_boundary; $/;"	m	class:CellBase
base_area	cellbase.h	/^  double base_area;$/;"	m	class:CellsStaticDatamembers
batch	VirtualLeaf.cpp	/^bool batch=false;$/;"	v
bend_lambda	parameter.h	/^  double bend_lambda;$/;"	m	class:Parameter
bend_lambda_edit	pardialog.h	/^  QLineEdit *bend_lambda_edit;$/;"	m	class:ParameterDialog
bgetpar	parse.cpp	/^bool bgetpar(FILE *fp, char *parameter,  bool wrapflag) {$/;"	f
bgetpar	parse.cpp	/^bool bgetpar(FILE *fp, char *parameter, int default_val, bool wrapflag) {$/;"	f
bool_name	xmlwrite.h	/^inline const char *bool_name(bool q) { return q ? bool_names[0] : bool_names[1]; }$/;"	f
bool_names	xmlwrite.h	/^static const char * bool_names[2] = {"true","false"};$/;"	v
bool_str	parse.cpp	/^char *bool_str(bool bool_var) {$/;"	f
border_id	canvas.h	/^  int border_id; \/\/ view->Show border cells$/;"	m	class:Main
boundary	cellbase.h	/^  boundary_type boundary;$/;"	m	class:CellBase
boundary	node.h	/^  bool boundary; \/\/ true if node is at the edge of the leaf$/;"	m	class:Node
boundary_polygon	mesh.h	/^  BoundaryPolygon *boundary_polygon;$/;"	m	class:Mesh
boundary_type	cellbase.h	/^  enum boundary_type {None, Noflux, SourceSink, SAM};$/;"	g	class:CellBase
boundary_type_names	cellbase.cpp	/^const char* CellBase::boundary_type_names[4] = {"None", "NoFlux", "SourceSink", "SAM"};$/;"	m	class:CellBase	file:
boundary_type_names	cellbase.h	/^  static const char * boundary_type_names[4];$/;"	m	class:CellBase
boundingRect	cellitem.cpp	/^QRectF CellItem::boundingRect() const { return QGraphicsPolygonItem::boundingRect(); }$/;"	f	class:CellItem
boundingRect	nodeitem.cpp	/^QRectF NodeItem::boundingRect() const$/;"	f	class:NodeItem
boxtext	UniqueMessage.h	/^  QString boxtext;$/;"	m	class:UniqueMessageBox
brush	nodeitem.h	/^  QBrush brush;$/;"	m	class:NodeItem
c1	wallbase.h	/^  CellBase *c1, *c2;$/;"	m	class:WallBase
c2	wallbase.h	/^  CellBase *c1, *c2;$/;"	m	class:WallBase
canvas	mainbase.h	/^  QGraphicsScene &canvas;$/;"	m	class:MainBase
caption	canvas.h	/^  static const QString caption;$/;"	m	class:Main
caption_with_file	canvas.h	/^  static const QString caption_with_file;$/;"	m	class:Main
cell	Neighbor.h	/^  Cell *cell;$/;"	m	class:Neighbor
cell	transporterdialog.h	/^  CellBase *cell;$/;"	m	class:TransporterDialog
cell_axes_id	canvas.h	/^  int cell_axes_id; \/\/ view->Show cell axes$/;"	m	class:Main
cell_index_adapter	mesh.h	/^  template<class Op> void cell_index_adapter(Op f,int i) {$/;"	f	class:Mesh
cell_number_id	canvas.h	/^  int cell_number_id; \/\/ view->Show Cell numbers$/;"	m	class:Main
cell_outline_color	parameter.h	/^  char * cell_outline_color;$/;"	m	class:Parameter
cell_outline_color_edit	pardialog.h	/^  QLineEdit *cell_outline_color_edit;$/;"	m	class:ParameterDialog
cell_outline_pen	cell.h	/^  static QPen *cell_outline_pen;$/;"	m	class:Cell
cell_strain_id	canvas.h	/^  int cell_strain_id; \/\/ view->Show cell strain$/;"	m	class:Main
cell_thick_id	canvas.h	/^  int cell_thick_id; \/\/ view->Show cell wall THickness$/;"	m	class:Main
cell_type	cellbase.h	/^  int cell_type;$/;"	m	class:CellBase
cell_walls_id	canvas.h	/^  int cell_walls_id; \/\/ view -> Show transporters$/;"	m	class:Main
cellnodes	cellbase.h	/^  list<Node *> cellnodes(void){$/;"	f	class:CellBase
cellnumsize	parameter.h	/^  int cellnumsize;$/;"	m	class:Parameter
cellnumsize_edit	pardialog.h	/^  QLineEdit *cellnumsize_edit;$/;"	m	class:ParameterDialog
cells	mesh.h	/^  vector<Cell *> cells;$/;"	m	class:Mesh
cellvec	cellbase.h	/^  Vector cellvec;$/;"	m	class:CellBase
chainHull_2D	hull.cpp	/^chainHull_2D( Point* P, int n, Point* H )$/;"	f
chem	cellbase.h	/^  double *chem;$/;"	m	class:CellBase
class_cast	simitembase.h	/^TYPE class_cast(void * symbol)$/;"	f
clear	canvas.cpp	/^void FigureEditor::clear()$/;"	f	class:FigureEditor
clear	canvas.cpp	/^void Main::clear()$/;"	f	class:Main
clear	mainbase.h	/^  virtual void clear(void) {$/;"	f	class:MainBase
clear	mesh.h	/^ void clear(void) {$/;"	f	class:unique_queue
collapse_node_threshold	parameter.h	/^  double collapse_node_threshold;$/;"	m	class:Parameter
collapse_node_threshold_edit	pardialog.h	/^  QLineEdit *collapse_node_threshold_edit;$/;"	m	class:ParameterDialog
colors	curvecolors.h	/^  QStringList colors;$/;"	m	class:CurveColors
com_id	canvas.h	/^  int com_id; \/\/ view->Show centers$/;"	m	class:Main
construct_string_constant_from_file	perl/make_xmlwritecode.pl	/^sub construct_string_constant_from_file {$/;"	s
copy_wall	parameter.h	/^  bool copy_wall;$/;"	m	class:Parameter
copy_wall_edit	pardialog.h	/^  QLineEdit *copy_wall_edit;$/;"	m	class:ParameterDialog
counter	random.cpp	/^static int counter=0;$/;"	v	file:
currentFile	canvas.h	/^  QString currentFile;$/;"	m	class:Main
curvecolors	data_plot.h	/^  CurveColors curvecolors;$/;"	m	class:DataPlot
curves	data_plot.h	/^  QwtPlotCurve *curves;$/;"	m	class:DataPlot
cycleWallType	wallbase.h	/^  inline void cycleWallType(void) { $/;"	f	class:WallBase
d_interval	data_plot.h	/^  int d_interval; \/\/ timer in ms$/;"	m	class:DataPlot
d_t	data_plot.h	/^  double *d_t; $/;"	m	class:DataPlot
d_timerId	data_plot.h	/^  int d_timerId;$/;"	m	class:DataPlot
d_x	data_plot.h	/^  double **d_x; $/;"	m	class:DataPlot
data_pos	data_plot.h	/^  int data_pos;$/;"	m	class:DataPlot
datadir	parameter.h	/^  char * datadir;$/;"	m	class:Parameter
datadir_edit	pardialog.h	/^  QLineEdit *datadir_edit;$/;"	m	class:ParameterDialog
datfile	data_plot.h	/^  QFile *datfile;$/;"	m	class:DataPlot
datstream	data_plot.h	/^  QTextStream datstream;$/;"	m	class:DataPlot
dbf_id	canvas.h	/^  int dbf_id; \/\/ options->Double Buffer$/;"	m	class:Main
dead	cellbase.h	/^  bool dead; $/;"	m	class:CellBase
dead	node.h	/^  bool dead;$/;"	m	class:Node
dead	wallbase.h	/^  bool dead;$/;"	m	class:WallBase
deref_ptr	mesh.h	/^template<class P> P& deref_ptr ( P *obj) { return *obj; }$/;"	f
derivs	mesh.cpp	/^  virtual void derivs(double x, double *y, double *dydx) {$/;"	f	class:SolveMesh
dgetparlist	parse.cpp	/^double *dgetparlist(FILE *fp,char *parameter, int n, bool wrapflag) $/;"	f
display	UniqueMessage.h	/^  bool display;$/;"	m	class:UniqueMessageBox
dist	modified_division_algorithm.cpp	/^double dist(const Vector &p1, const Vector &p2){$/;"	f
div_counter	cellbase.h	/^  int div_counter;$/;"	m	class:CellBase
division_axis	cellbase.h	/^  Vector *division_axis;$/;"	m	class:CellBase
done	nodeset.h	/^  bool done;$/;"	m	class:NodeSet
dot	modified_division_algorithm.cpp	/^double dot(const Vector &p1, const Vector &p2){$/;"	f
dt	parameter.h	/^  double dt;$/;"	m	class:Parameter
dt_edit	pardialog.h	/^  QLineEdit *dt_edit;$/;"	m	class:ParameterDialog
duplicates_copy	wallbase.h	/^template<class In, class Out> Out duplicates_copy(In first, In last, Out res) {$/;"	f
dxsav	forwardeuler.h	/^  double *xp,**yp,dxsav;$/;"	m	class:ForwardEuler
dxsav	mesh.cpp	/^  double *xp,**yp,dxsav;$/;"	m	class:SolveMesh	file:
dxsav	rungekutta.h	/^  double *xp,**yp,dxsav;$/;"	m	class:RungeKutta
dyn_cells_id	canvas.h	/^  int dyn_cells_id;$/;"	m	class:Main
dynamicscellsp	mainbase.h	/^  bool dynamicscellsp;$/;"	m	class:MainBase
editor	canvas.h	/^  FigureEditor *editor;$/;"	m	class:Main
editors	transporterdialog.h	/^  QVector <QLineEdit*> editors;$/;"	m	class:TransporterDialog
ellipsesize	nodeitem.h	/^  QRectF ellipsesize;$/;"	m	class:NodeItem
energy_threshold	parameter.h	/^  double energy_threshold;$/;"	m	class:Parameter
energy_threshold_edit	pardialog.h	/^  QLineEdit *energy_threshold_edit;$/;"	m	class:ParameterDialog
enlarge	canvas.cpp	/^void Main::enlarge()$/;"	f	class:Main
error	warning.cpp	/^void MyWarning::error(char * fmt, ...)$/;"	f	class:MyWarning
error	warning.cpp	/^void MyWarning::error(const char *fmt, ...)$/;"	f	class:MyWarning
exec	UniqueMessage.cpp	/^int UniqueMessageBox::exec(void)  {$/;"	f	class:UniqueMessageBox
exportCellData	canvas.cpp	/^void Main::exportCellData() {$/;"	f	class:Main
exportCellData	canvas.cpp	/^void Main::exportCellData(QString fileName) {$/;"	f	class:Main
export_fn_prefix	parameter.h	/^  char * export_fn_prefix;$/;"	m	class:Parameter
export_fn_prefix_edit	pardialog.h	/^  QLineEdit *export_fn_prefix_edit;$/;"	m	class:ParameterDialog
export_interval	parameter.h	/^  int export_interval;$/;"	m	class:Parameter
export_interval_edit	pardialog.h	/^  QLineEdit *export_interval_edit;$/;"	m	class:ParameterDialog
f	mesh.cpp	/^  double f(double a, double b) {$/;"	f
factor	cell.cpp	/^double Cell::factor=1.;$/;"	m	class:Cell	file:
factor	cell.h	/^  static double factor;$/;"	m	class:Cell
far_1_arg_mem_fun	far_mem_5.h	/^  class Param1>far_1_arg_mem_fun_t<Result,Type,Param1> far_1_arg_mem_fun(Type &ir_typ, Result (Type::*i_pmf)(Param1) )$/;"	f
far_1_arg_mem_fun_t	far_mem_5.h	/^    explicit far_1_arg_mem_fun_t(Type &ir_typ, Result (Type::*i_pmf)(Param1)) {$/;"	f	class:far_1_arg_mem_fun_t
far_1_arg_mem_fun_t	far_mem_5.h	/^  class far_1_arg_mem_fun_t : public my_1_function<Param1, Result> {$/;"	c
far_2_arg_mem_fun	far_mem_5.h	/^  class Param2>far_2_arg_mem_fun_t<Result,Type,Param1, Param2> far_2_arg_mem_fun(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2) ) {$/;"	f
far_2_arg_mem_fun_t	far_mem_5.h	/^    explicit far_2_arg_mem_fun_t(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2)) {$/;"	f	class:far_2_arg_mem_fun_t
far_2_arg_mem_fun_t	far_mem_5.h	/^  class far_2_arg_mem_fun_t : public my_2_function<Param1, Param2, Result> {$/;"	c
far_3_arg_mem_fun	far_mem_5.h	/^class Param3>far_3_arg_mem_fun_t<Result,Type,Param1, Param2, Param3> far_3_arg_mem_fun(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2, Param3) ) {$/;"	f
far_3_arg_mem_fun_t	far_mem_5.h	/^    explicit far_3_arg_mem_fun_t(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2, Param3)) {$/;"	f	class:far_3_arg_mem_fun_t
far_3_arg_mem_fun_t	far_mem_5.h	/^  class far_3_arg_mem_fun_t : public my_3_function<Param1, Param2, Param3, Result> {$/;"	c
far_4_arg_mem_fun	far_mem_5.h	/^template <class Result, class Type, class Param1, class Param2, class Param3, class Param4>far_4_arg_mem_fun_t<Result,Type,Param1, Param2, Param3, Param4> far_4_arg_mem_fun(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2, Param3, Param4) ) {$/;"	f
far_4_arg_mem_fun_t	far_mem_5.h	/^    explicit far_4_arg_mem_fun_t(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2, Param3, Param4)) {$/;"	f	class:far_4_arg_mem_fun_t
far_4_arg_mem_fun_t	far_mem_5.h	/^  class far_4_arg_mem_fun_t : public my_4_function<Param1, Param2, Param3, Param4, Result> {$/;"	c
far_5_arg_mem_fun	far_mem_5.h	/^template <class Result, class Type, class Param1, class Param2, class Param3, class Param4, class Param5>far_5_arg_mem_fun_t<Result,Type,Param1, Param2, Param3, Param4, Param5> far_5_arg_mem_fun(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2, Param3, Param4, Param5) ) {$/;"	f
far_5_arg_mem_fun_t	far_mem_5.h	/^    explicit far_5_arg_mem_fun_t(Type &ir_typ, Result (Type::*i_pmf)(Param1, Param2, Param3, Param4, Param5)) {$/;"	f	class:far_5_arg_mem_fun_t
far_5_arg_mem_fun_t	far_mem_5.h	/^  class far_5_arg_mem_fun_t : public my_5_function<Param1, Param2, Param3, Param4, Param5, Result> {$/;"	c
fgetpar	parse.cpp	/^float fgetpar(FILE *fp, char *parameter, double default_val, bool wrapflag) $/;"	f
fgetpar	parse.cpp	/^float fgetpar(FILE *fp,char *parameter, bool wrapflag) {$/;"	f
findNextBoundaryNode	mesh.cpp	/^Node* Mesh::findNextBoundaryNode(Node* boundary_node) {$/;"	f	class:Mesh
first	node.h	/^  Node *first, *second;$/;"	m	class:Edge
fixed	cellbase.h	/^  bool fixed;$/;"	m	class:CellBase
fixed	node.h	/^  bool fixed;$/;"	m	class:Node
flag_for_divide	cellbase.h	/^  bool flag_for_divide;$/;"	m	class:CellBase
flux_arrow_size	canvas.h	/^  double flux_arrow_size;$/;"	m	class:Main
fluxes_id	canvas.h	/^  int fluxes_id;$/;"	m	class:Main
geometrycheck	OptionFileDialog.h	/^  QCheckBox *geometrycheck;	$/;"	m	class:OptionFileDialog
getCell	Neighbor.cpp	/^Cell* Neighbor::getCell(void) const { return cell; } $/;"	f	class:Neighbor
getCell	cellitem.h	/^  Cell &getCell(void) const { return *class_cast<Cell*>(obj); }$/;"	f	class:CellItem
getCell	mesh.h	/^  inline Cell &getCell(int i) {$/;"	f	class:Mesh
getCell	node.cpp	/^Cell &Node::getCell(const Neighbor &i)$/;"	f	class:Node
getCells	nodeset.h	/^  list <Cell *> getCells(void) {$/;"	f	class:NodeSet
getFluxArrowsize	canvas.h	/^  virtual double getFluxArrowsize(void)$/;"	f	class:Main
getFluxArrowsize	mainbase.h	/^  virtual double getFluxArrowsize(void) { return 10.;}$/;"	f	class:MainBase
getInfluxVector	wallbase.cpp	/^Vector WallBase::getInfluxVector(CellBase *c)$/;"	f	class:WallBase
getIntersectedCells	canvas.cpp	/^vector <CellItem *> FigureEditor::getIntersectedCells(void)$/;"	f	class:FigureEditor
getMesh	cell.h	/^  inline Mesh& getMesh(void) const { return *m; }$/;"	f	class:Cell
getNode	mesh.h	/^  inline Node &getNode(int i) {$/;"	f	class:Mesh
getNode	nodeitem.h	/^  Node &getNode(void) const { return *class_cast<Node*>(obj); }$/;"	f	class:NodeItem
getNodes	cellbase.h	/^  QList<Node *> getNodes(void) {$/;"	f	class:CellBase
getOtherCell	wallbase.h	/^  inline CellBase *getOtherCell(CellBase *c) { return c1 == c ? c2 : c1; }$/;"	f	class:WallBase
getStaticMetaObject	moc_OptionFileDialog.cpp	/^const QMetaObject &OptionFileDialog::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:OptionFileDialog
getStaticMetaObject	moc_UniqueMessage.cpp	/^const QMetaObject &UniqueMessageBox::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:UniqueMessageBox
getStaticMetaObject	moc_canvas.cpp	/^const QMetaObject &FigureEditor::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:FigureEditor
getStaticMetaObject	moc_canvas.cpp	/^const QMetaObject &Main::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Main
getStaticMetaObject	moc_cell.cpp	/^const QMetaObject &Cell::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Cell
getStaticMetaObject	moc_cellbase.cpp	/^const QMetaObject &CellBase::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:CellBase
getStaticMetaObject	moc_infobar.cpp	/^const QMetaObject &InfoBar::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:InfoBar
getStaticMetaObject	moc_modelcatalogue.cpp	/^const QMetaObject &ModelCatalogue::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:ModelCatalogue
getStaticMetaObject	moc_pardialog.cpp	/^const QMetaObject &ParameterDialog::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:ParameterDialog
getStaticMetaObject	moc_transporterdialog.cpp	/^const QMetaObject &TransporterDialog::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:TransporterDialog
getTime	mesh.h	/^  inline double getTime(void) const { return time; }$/;"	f	class:Mesh
getTimeHours	mesh.cpp	/^string Mesh::getTimeHours(void) const {$/;"	f	class:Mesh
getTransporter	wallbase.h	/^  inline double getTransporter(CellBase *c, int ch) const$/;"	f	class:WallBase
getValues	mesh.cpp	/^double *Mesh::getValues(int *neqs) {$/;"	f	class:Mesh
getWall	apoplastitem.h	/^  Wall &getWall(void) const { return *class_cast<Wall*>(obj); }$/;"	f	class:ApoplastItem
getWall	wallitem.h	/^  Wall &getWall(void) const { return *class_cast<Wall*>(obj); }$/;"	f	class:WallItem
getWallVector	wallbase.cpp	/^Vector WallBase::getWallVector(CellBase *c)$/;"	f	class:WallBase
getWalls	cellbase.h	/^  QList<WallBase *> getWalls(void) {$/;"	f	class:CellBase
get_frameworks	perl/deployapp.pl	/^sub get_frameworks {$/;"	s
get_frameworks	perl/deploymodel.pl	/^sub get_frameworks {$/;"	s
getmcsx	node.h	/^  inline double getmcsx(void) const {return mcsx; }$/;"	f	class:Node
getmcsy	node.h	/^  inline double getmcsy(void) const {return mcsy; }$/;"	f	class:Node
getnodeset	xmlwrite.cpp	/^getnodeset (xmlDocPtr doc, xmlChar *xpath){$/;"	f
getthickness	wallbase.h	/^  inline double getthickness(void) const {return thickness; }$/;"	f	class:WallBase
gifanim	canvas.h	/^  QFile *gifanim;$/;"	m	class:Main
gpl	canvas.cpp	/^void Main::gpl()$/;"	f	class:Main
helpmenu	canvas.h	/^  Q3PopupMenu *helpmenu;$/;"	m	class:Main
hide_cells_id	canvas.h	/^  int hide_cells_id; \/\/ view->Hide Cells$/;"	m	class:Main
hidecellsp	mainbase.h	/^  bool hidecellsp;$/;"	m	class:MainBase
idum	random.cpp	/^static int idum = -1;$/;"	v	file:
igetpar	parse.cpp	/^int igetpar(FILE *fp,char *parameter, bool wrapflag) {$/;"	f
igetpar	parse.cpp	/^int igetpar(FILE *fp,char *parameter, int default_val, bool wrapflag) $/;"	f
imageRTTI	canvas.cpp	/^static const int imageRTTI = 984376;$/;"	v	file:
index	cellbase.h	/^  int index;$/;"	m	class:CellBase
index	node.h	/^  int index;$/;"	m	class:Node
infobar	canvas.h	/^  InfoBar *infobar;$/;"	m	class:Main
init	canvas.cpp	/^void Main::init()$/;"	f	class:Main
initval	parameter.h	/^  double * initval;$/;"	m	class:Parameter
initval_edit	pardialog.h	/^  QLineEdit *initval_edit;$/;"	m	class:ParameterDialog
insertNode	canvas.cpp	/^void FigureEditor::insertNode(QPointF p)$/;"	f	class:FigureEditor
insert_mode	canvas.h	/^  bool insert_mode;$/;"	m	class:FigureEditor
insert_mode_id	canvas.h	/^  int insert_mode_id;$/;"	m	class:Main
intersection_line	canvas.h	/^  QGraphicsLineItem *intersection_line;$/;"	m	class:FigureEditor
intgrl_x	cellbase.h	/^  mutable double intgrl_xx, intgrl_xy, intgrl_yy, intgrl_x, intgrl_y;$/;"	m	class:CellBase
intgrl_xx	cellbase.h	/^  mutable double intgrl_xx, intgrl_xy, intgrl_yy, intgrl_x, intgrl_y;$/;"	m	class:CellBase
intgrl_xy	cellbase.h	/^  mutable double intgrl_xx, intgrl_xy, intgrl_yy, intgrl_x, intgrl_y;$/;"	m	class:CellBase
intgrl_y	cellbase.h	/^  mutable double intgrl_xx, intgrl_xy, intgrl_yy, intgrl_x, intgrl_y;$/;"	m	class:CellBase
intgrl_yy	cellbase.h	/^  mutable double intgrl_xx, intgrl_xy, intgrl_yy, intgrl_x, intgrl_y;$/;"	m	class:CellBase
isLeft	hull.cpp	/^isLeft( Point P0, Point P1, Point P2 )$/;"	f
is_wall_of_cell_p	wallbase.h	/^  bool is_wall_of_cell_p ( const CellBase *c ) {$/;"	f	class:WallBase
issued_messages	UniqueMessage.cpp	/^QStringList UniqueMessageBox::issued_messages;$/;"	m	class:UniqueMessageBox	file:
issued_messages	UniqueMessage.h	/^  static QStringList issued_messages;$/;"	m	class:UniqueMessageBox
ix	mesh.cpp	/^  double ix, iy;$/;"	m	class:DeltaIntgrl	file:
ixx	mesh.cpp	/^  double ixx,ixy,iyy;$/;"	m	class:DeltaIntgrl	file:
ixy	mesh.cpp	/^  double ixx,ixy,iyy;$/;"	m	class:DeltaIntgrl	file:
iy	mesh.cpp	/^  double ix, iy;$/;"	m	class:DeltaIntgrl	file:
iyy	mesh.cpp	/^  double ixx,ixy,iyy;$/;"	m	class:DeltaIntgrl	file:
k1	parameter.h	/^  double k1;$/;"	m	class:Parameter
k10	parameter.h	/^  double k10;$/;"	m	class:Parameter
k10_edit	pardialog.h	/^  QLineEdit *k10_edit;$/;"	m	class:ParameterDialog
k1_edit	pardialog.h	/^  QLineEdit *k1_edit;$/;"	m	class:ParameterDialog
k2	parameter.h	/^  double k2;$/;"	m	class:Parameter
k2_edit	pardialog.h	/^  QLineEdit *k2_edit;$/;"	m	class:ParameterDialog
k3	parameter.h	/^  double k3;$/;"	m	class:Parameter
k3_edit	pardialog.h	/^  QLineEdit *k3_edit;$/;"	m	class:ParameterDialog
k4	parameter.h	/^  double k4;$/;"	m	class:Parameter
k4_edit	pardialog.h	/^  QLineEdit *k4_edit;$/;"	m	class:ParameterDialog
k5	parameter.h	/^  double k5;$/;"	m	class:Parameter
k5_edit	pardialog.h	/^  QLineEdit *k5_edit;$/;"	m	class:ParameterDialog
k6	parameter.h	/^  double k6;$/;"	m	class:Parameter
k6_edit	pardialog.h	/^  QLineEdit *k6_edit;$/;"	m	class:ParameterDialog
k7	parameter.h	/^  double k7;$/;"	m	class:Parameter
k7_edit	pardialog.h	/^  QLineEdit *k7_edit;$/;"	m	class:ParameterDialog
k8	parameter.h	/^  double k8;$/;"	m	class:Parameter
k8_edit	pardialog.h	/^  QLineEdit *k8_edit;$/;"	m	class:ParameterDialog
k9	parameter.h	/^  double k9;$/;"	m	class:Parameter
k9_edit	pardialog.h	/^  QLineEdit *k9_edit;$/;"	m	class:ParameterDialog
kmax	forwardeuler.h	/^  int kmax,kount;$/;"	m	class:ForwardEuler
kmax	mesh.cpp	/^  int kmax,kount;$/;"	m	class:SolveMesh	file:
kmax	rungekutta.h	/^  int kmax,kount;$/;"	m	class:RungeKutta
kount	forwardeuler.h	/^  int kmax,kount;$/;"	m	class:ForwardEuler
kount	mesh.cpp	/^  int kmax,kount;$/;"	m	class:SolveMesh	file:
kount	rungekutta.h	/^  int kmax,kount;$/;"	m	class:RungeKutta
label	UniqueMessage.h	/^  QLabel *label;$/;"	m	class:UniqueMessageBox
label	transporterdialog.h	/^  QLabel *label;$/;"	m	class:TransporterDialog
lambda_celllength	cellbase.h	/^  double lambda_celllength;$/;"	m	class:CellBase
lambda_celllength	parameter.h	/^  double lambda_celllength;$/;"	m	class:Parameter
lambda_celllength_edit	pardialog.h	/^  QLineEdit *lambda_celllength_edit;$/;"	m	class:ParameterDialog
lambda_length	parameter.h	/^  double lambda_length;$/;"	m	class:Parameter
lambda_length_edit	pardialog.h	/^  QLineEdit *lambda_length_edit;$/;"	m	class:ParameterDialog
length	wallbase.h	/^  double length;$/;"	m	class:WallBase
list_index	xmlwrite.h	/^  template<class For, class E> long list_index (For beg, For end, E *elem) {$/;"	f	namespace:XMLIO
m	cell.h	/^  Mesh *m;$/;"	m	class:Cell
m	mesh.cpp	/^  Mesh *m;$/;"	m	class:SolveMesh	file:
m	node.h	/^  Mesh *m;$/;"	m	class:Node
m_pmf	far_mem_5.h	/^    Result (Type::*m_pmf)(Param1);$/;"	m	class:far_1_arg_mem_fun_t
m_pmf	far_mem_5.h	/^    Result (Type::*m_pmf)(Param1, Param2);$/;"	m	class:far_2_arg_mem_fun_t
m_pmf	far_mem_5.h	/^    Result (Type::*m_pmf)(Param1, Param2, Param3);$/;"	m	class:far_3_arg_mem_fun_t
m_pmf	far_mem_5.h	/^    Result (Type::*m_pmf)(Param1, Param2, Param3, Param4);$/;"	m	class:far_4_arg_mem_fun_t
m_pmf	far_mem_5.h	/^    Result (Type::*m_pmf)(Param1, Param2, Param3, Param4, Param5);$/;"	m	class:far_5_arg_mem_fun_t
m_ptyp	far_mem_5.h	/^    Type *m_ptyp;$/;"	m	class:far_1_arg_mem_fun_t
m_ptyp	far_mem_5.h	/^    Type *m_ptyp;$/;"	m	class:far_2_arg_mem_fun_t
m_ptyp	far_mem_5.h	/^    Type *m_ptyp;$/;"	m	class:far_3_arg_mem_fun_t
m_ptyp	far_mem_5.h	/^    Type *m_ptyp;$/;"	m	class:far_4_arg_mem_fun_t
m_ptyp	far_mem_5.h	/^    Type *m_ptyp;$/;"	m	class:far_5_arg_mem_fun_t
main	VirtualLeaf.cpp	/^int main(int argc,char **argv) {$/;"	f
main	rseed.cpp	/^int main() {$/;"	f
main	vector.cpp	/^void main() {$/;"	f
main	warning.cpp	/^main(int argc, char * argv[])$/;"	f
mainCount	canvas.cpp	/^static uint mainCount = 0;$/;"	v	file:
main_window	VirtualLeaf.cpp	/^MainBase *main_window = 0;$/;"	v
mainwin	modelcatalogue.h	/^  MainBase *mainwin;$/;"	m	class:ModelCatalogue
marked	cellbase.h	/^  bool marked;$/;"	m	class:CellBase
marked	node.h	/^  bool marked;$/;"	m	class:Node
mat	matrix.h	/^  double **mat;$/;"	m	class:Matrix
max_chem	mesh.h	/^  double max_chem;$/;"	m	class:Mesh
maxt	parameter.h	/^  double maxt;$/;"	m	class:Parameter
maxt_edit	pardialog.h	/^  QLineEdit *maxt_edit;$/;"	m	class:ParameterDialog
mc_cell_stepsize	parameter.h	/^  double mc_cell_stepsize;$/;"	m	class:Parameter
mc_cell_stepsize_edit	pardialog.h	/^  QLineEdit *mc_cell_stepsize_edit;$/;"	m	class:ParameterDialog
mc_stepsize	parameter.h	/^  double mc_stepsize;$/;"	m	class:Parameter
mc_stepsize_edit	pardialog.h	/^  QLineEdit *mc_stepsize_edit;$/;"	m	class:ParameterDialog
mcsx	node.h	/^  double mcsx;$/;"	m	class:Node
mcsy	node.h	/^  double mcsy;$/;"	m	class:Node
mesh	VirtualLeaf.cpp	/^Mesh mesh;$/;"	v
mesh	canvas.h	/^  Mesh &mesh;$/;"	m	class:FigureEditor
mesh	canvas.h	/^  Mesh &mesh;$/;"	m	class:Main
mesh	mainbase.h	/^  Mesh &mesh;$/;"	m	class:MainBase
mesh	modelcatalogue.h	/^  Mesh *mesh;$/;"	m	class:ModelCatalogue
mesh_id	canvas.h	/^  int mesh_id; \/\/ view->Show mesh$/;"	m	class:Main
metaObject	moc_OptionFileDialog.cpp	/^const QMetaObject *OptionFileDialog::metaObject() const$/;"	f	class:OptionFileDialog
metaObject	moc_UniqueMessage.cpp	/^const QMetaObject *UniqueMessageBox::metaObject() const$/;"	f	class:UniqueMessageBox
metaObject	moc_canvas.cpp	/^const QMetaObject *FigureEditor::metaObject() const$/;"	f	class:FigureEditor
metaObject	moc_canvas.cpp	/^const QMetaObject *Main::metaObject() const$/;"	f	class:Main
metaObject	moc_cell.cpp	/^const QMetaObject *Cell::metaObject() const$/;"	f	class:Cell
metaObject	moc_cellbase.cpp	/^const QMetaObject *CellBase::metaObject() const$/;"	f	class:CellBase
metaObject	moc_infobar.cpp	/^const QMetaObject *InfoBar::metaObject() const$/;"	f	class:InfoBar
metaObject	moc_modelcatalogue.cpp	/^const QMetaObject *ModelCatalogue::metaObject() const$/;"	f	class:ModelCatalogue
metaObject	moc_pardialog.cpp	/^const QMetaObject *ParameterDialog::metaObject() const$/;"	f	class:ParameterDialog
metaObject	moc_transporterdialog.cpp	/^const QMetaObject *TransporterDialog::metaObject() const$/;"	f	class:TransporterDialog
modelmenu	canvas.h	/^  QMenu *modelmenu;$/;"	m	class:Main
models	modelcatalogue.h	/^  QVector<SimPluginInterface *> models;$/;"	m	class:ModelCatalogue
monitor_window	mesh.cpp	/^  bool monitor_window;$/;"	m	class:SolveMesh	file:
mouseMoveEvent	canvas.cpp	/^void FigureEditor::mouseMoveEvent(QMouseEvent* e)$/;"	f	class:FigureEditor
mousePressEvent	canvas.cpp	/^void FigureEditor::mousePressEvent(QMouseEvent* e)$/;"	f	class:FigureEditor
movie	parameter.h	/^  bool movie;$/;"	m	class:Parameter
movie_edit	pardialog.h	/^  QLineEdit *movie_edit;$/;"	m	class:ParameterDialog
movie_frames_id	canvas.h	/^  int movie_frames_id;$/;"	m	class:Main
movieframesp	mainbase.h	/^  bool movieframesp;$/;"	m	class:MainBase
moving	canvas.h	/^  SimItemBase *moving;$/;"	m	class:FigureEditor
moving_start	canvas.h	/^  QPointF moving_start;$/;"	m	class:FigureEditor
my_1_function	far_mem_5.h	/^  struct my_1_function$/;"	s
my_2_function	far_mem_5.h	/^  struct my_2_function$/;"	s
my_3_function	far_mem_5.h	/^  struct my_3_function$/;"	s
my_4_function	far_mem_5.h	/^  struct my_4_function$/;"	s
my_5_function	far_mem_5.h	/^  struct my_5_function$/;"	s
n	random.h	/^  long n;$/;"	m	class:MyUrand
n1	wallbase.h	/^  Node *n1, *n2;$/;"	m	class:WallBase
n2	wallbase.h	/^  Node *n1, *n2;$/;"	m	class:WallBase
nb1	Neighbor.h	/^  Node *nb1, *nb2;$/;"	m	class:Neighbor
nb2	Neighbor.h	/^  Node *nb1, *nb2;$/;"	m	class:Neighbor
ncells	cellbase.h	/^  int ncells;$/;"	m	class:CellsStaticDatamembers
nchem	cellbase.h	/^  int nchem;$/;"	m	class:CellsStaticDatamembers
ncurves	data_plot.h	/^  int ncurves;$/;"	m	class:DataPlot
neighbor_cell_eq	Neighbor.cpp	/^bool neighbor_cell_eq(const Neighbor &n1, const Neighbor &n2) {$/;"	f
neighbors	cellbase.h	/^  list<CellBase *> neighbors;$/;"	m	class:CellBase
newView	canvas.cpp	/^void Main::newView()$/;"	f	class:Main
new_chem	cellbase.h	/^  double *new_chem;$/;"	m	class:CellBase
new_transporters1	wallbase.h	/^  double *new_transporters1, *new_transporters2;$/;"	m	class:WallBase
new_transporters2	wallbase.h	/^  double *new_transporters1, *new_transporters2;$/;"	m	class:WallBase
nit	parameter.h	/^  int nit;$/;"	m	class:Parameter
nit_edit	pardialog.h	/^  QLineEdit *nit_edit;$/;"	m	class:ParameterDialog
nnodes	mesh.h	/^  inline int nnodes(void) {$/;"	f	class:Mesh
nnodes	node.cpp	/^int Node::nnodes=0;$/;"	m	class:Node	file:
nnodes	node.h	/^  static int nnodes;$/;"	m	class:Node
no	mesh.cpp	/^  int no;$/;"	m	class:node_owners_eq	file:
node_insertion_queue	mesh.h	/^  unique_queue<Edge> node_insertion_queue;$/;"	m	class:Mesh
node_mag	parameter.h	/^  double node_mag;$/;"	m	class:Parameter
node_mag_edit	pardialog.h	/^  QLineEdit *node_mag_edit;$/;"	m	class:ParameterDialog
node_number_id	canvas.h	/^  int node_number_id; \/\/ view->Show Node numbers$/;"	m	class:Main
node_owners_eq	mesh.cpp	/^  explicit node_owners_eq(int nn) { no=nn; }$/;"	f	class:node_owners_eq
node_owners_eq	mesh.cpp	/^class node_owners_eq : public unary_function<Node, bool> {$/;"	c	file:
node_set	canvas.h	/^  NodeSet *node_set;$/;"	m	class:Main
node_set	node.h	/^  NodeSet *node_set; $/;"	m	class:Node
node_sets	mesh.h	/^  vector<NodeSet *> node_sets;$/;"	m	class:Mesh
nodenumsize	parameter.h	/^  int nodenumsize;$/;"	m	class:Parameter
nodenumsize_edit	pardialog.h	/^  QLineEdit *nodenumsize_edit;$/;"	m	class:ParameterDialog
nodes	cellbase.h	/^  list<Node *> nodes;$/;"	m	class:CellBase
nodes	mesh.h	/^  vector<Node *> nodes;$/;"	m	class:Mesh
ntransporters	transporterdialog.h	/^  int ntransporters;$/;"	m	class:TransporterDialog
nwalls	wallbase.cpp	/^int WallBase::nwalls=0;$/;"	m	class:WallBase	file:
nwalls	wallbase.h	/^  static int nwalls;$/;"	m	class:WallBase
obj	simitembase.h	/^  void *obj; $/;"	m	class:SimItemBase
ode_accuracy	parameter.h	/^  double ode_accuracy;$/;"	m	class:Parameter
ode_accuracy_edit	pardialog.h	/^  QLineEdit *ode_accuracy_edit;$/;"	m	class:ParameterDialog
odeint	forwardeuler.cpp	/^void ForwardEuler::odeint(double *ystart, int nvar, double x1, double x2, double eps, double h1, double hmin, int *nok, int *nbad)$/;"	f	class:ForwardEuler
odeint	rungekutta.cpp	/^void RungeKutta::odeint(double *ystart, int nvar, double x1, double x2, double eps, double h1, double hmin, int *nok, int *nbad)$/;"	f	class:RungeKutta
offset	cell.cpp	/^double Cell::offset[3]={0,0,0};$/;"	m	class:Cell	file:
offset	cell.h	/^  static double offset[3];$/;"	m	class:Cell
okButton	UniqueMessage.h	/^  QPushButton *okButton;$/;"	m	class:UniqueMessageBox
only_boundary_id	canvas.h	/^  int only_boundary_id; \/\/ view ->Show only leaf boundary$/;"	m	class:Main
operator ()	VirtualLeaf.cpp	/^  void operator() (Cell &c) {$/;"	f	class:EdgeSource
operator ()	VirtualLeaf.cpp	/^  void operator() (Cell &c,QGraphicsScene &canvas, MainBase &m) const {$/;"	f	class:DrawCell
operator ()	VirtualLeaf.cpp	/^  void operator() (Cell &c,std::ostream &os) const {$/;"	f	class:CellInfo
operator ()	VirtualLeaf.cpp	/^  void operator() (const Node &n) const $/;"	f	class:PrintNode
operator ()	far_mem_5.h	/^    Result operator()(Param1 i_prm1) { return (m_ptyp->*(m_pmf))(i_prm1); };$/;"	f	class:far_1_arg_mem_fun_t
operator ()	far_mem_5.h	/^    Result operator()(Param1 i_prm1, Param2 i_prm2) { return (m_ptyp->*(m_pmf))(i_prm1, i_prm2); };$/;"	f	class:far_2_arg_mem_fun_t
operator ()	far_mem_5.h	/^    Result operator()(Param1 i_prm1, Param2 i_prm2, Param3 i_prm3) { return (m_ptyp->*(m_pmf))(i_prm1, i_prm2, i_prm3); };$/;"	f	class:far_3_arg_mem_fun_t
operator ()	far_mem_5.h	/^    Result operator()(Param1 i_prm1, Param2 i_prm2, Param3 i_prm3, Param4 i_prm4) { return (m_ptyp->*(m_pmf))(i_prm1, i_prm2, i_prm3, i_prm4); };$/;"	f	class:far_4_arg_mem_fun_t
operator ()	far_mem_5.h	/^    Result operator()(Param1 i_prm1, Param2 i_prm2, Param3 i_prm3, Param4 i_prm4, Param5 i_prm5) { return (m_ptyp->*(m_pmf))(i_prm1, i_prm2, i_prm3, i_prm4, i_prm5); };$/;"	f	class:far_5_arg_mem_fun_t
operator ()	mesh.cpp	/^  bool operator() (const Node &n) const {$/;"	f	class:node_owners_eq
operator ()	random.h	/^  long operator()(long nn) { return RandomNumber(nn)-1; }$/;"	f	class:MyUrand
operator ()	random.h	/^  long operator()(void) { return RandomNumber(n); }$/;"	f	class:MyUrand
operator *	matrix.cpp	/^Vector Matrix::operator*(const Vector &v) const$/;"	f	class:Matrix
operator *	vector.cpp	/^Vector Vector::operator*(const Vector &v) const {$/;"	f	class:Vector
operator *	vector.cpp	/^Vector Vector::operator*(const double multiplier) const {$/;"	f	class:Vector
operator *	vector.cpp	/^Vector operator*(const double multiplier, const Vector &v) {$/;"	f
operator *=	vector.cpp	/^Vector &Vector::operator*=(const double multiplier) {$/;"	f	class:Vector
operator +	vector.cpp	/^Vector Vector::operator+(const Vector &v) const {$/;"	f	class:Vector
operator +=	vector.h	/^  inline Vector &operator+=(const Vector &v) {$/;"	f	class:Vector
operator -	vector.h	/^  inline Vector operator-(const Vector &v) const { $/;"	f	class:Vector
operator -=	vector.cpp	/^Vector& Vector::operator-=(const Vector &v) {$/;"	f	class:Vector
operator /	vector.cpp	/^Vector Vector::operator\/(const double divisor) const {$/;"	f	class:Vector
operator /=	vector.cpp	/^Vector &Vector::operator\/=(const double divisor) {$/;"	f	class:Vector
operator <	hull.cpp	/^bool operator<(const Point & p1, const Point & p2) {$/;"	f
operator <	vector.cpp	/^bool Vector::operator< (const Vector &v) const {$/;"	f	class:Vector
operator <<	cellbase.cpp	/^ostream &operator<<(ostream &os, const CellBase &c)$/;"	f
operator <<	matrix.cpp	/^ostream &operator<<(ostream &os, Matrix &v) {$/;"	f
operator <<	node.cpp	/^ostream &operator<<(ostream &os, const Neighbor &n) {$/;"	f
operator <<	node.cpp	/^ostream &operator<<(ostream &os, const Node &n) {$/;"	f
operator <<	node.h	/^inline ostream &operator<<(ostream &os, const Edge &e) {$/;"	f
operator <<	nodeset.cpp	/^ostream &operator<<(ostream &os, const NodeSet &ns)  {$/;"	f
operator <<	parameter.cpp	/^ostream &operator<<(ostream &os, Parameter &p) {$/;"	f
operator <<	vector.cpp	/^ostream &operator<<(ostream &os, const Vector &v) {$/;"	f
operator <<	wallbase.cpp	/^ostream &operator<<(ostream &os, const WallBase &w) { $/;"	f
operator =	cell.cpp	/^Cell Cell::operator=(const Cell &src) $/;"	f	class:Cell
operator =	cell.h	/^  BoundaryPolygon &operator=(Cell &src) {$/;"	f	class:BoundaryPolygon
operator =	cellbase.cpp	/^CellBase CellBase::operator=(const CellBase &src)$/;"	f	class:CellBase
operator =	matrix.cpp	/^void Matrix::operator=(const Matrix &source)$/;"	f	class:Matrix
operator =	vector.cpp	/^void Vector::operator=(const Vector &source) {$/;"	f	class:Vector
operator =	vector.h	/^  void operator=(const double &s) {$/;"	f	class:Vector
operator ==	matrix.cpp	/^bool Matrix::operator==(Matrix &m) const$/;"	f	class:Matrix
operator ==	node.h	/^  inline bool operator==(const Edge &e) {$/;"	f	class:Edge
operator ==	vector.cpp	/^bool Vector::operator==(const Vector &v) const {$/;"	f	class:Vector
operator QPointF	vector.h	/^  inline operator QPointF() const {$/;"	f	class:Vector
operator []	curvecolors.h	/^  QString &operator[](int i) {$/;"	f	class:CurveColors
options	canvas.h	/^  Q3PopupMenu* options;$/;"	m	class:Main
outlinewidth	parameter.h	/^  double outlinewidth;$/;"	m	class:Parameter
outlinewidth_edit	pardialog.h	/^  QLineEdit *outlinewidth_edit;$/;"	m	class:ParameterDialog
owners	node.h	/^  list< Neighbor > owners;$/;"	m	class:Node
paint	nodeitem.cpp	/^void NodeItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *)$/;"	f	class:NodeItem
paint	qcanvasarrow.h	/^  void paint ( QPainter *p, const QStyleOptionGraphicsItem *option,$/;"	f	class:QGraphicsArrowItem
par	VirtualLeaf.cpp	/^Parameter par;$/;"	v
par	simplugin.h	/^  class Parameter *par;$/;"	m	class:SimPluginInterface	typeref:class:SimPluginInterface::Parameter
par_index	cellbase.h	/^  int par_index;$/;"	m	class:CellBase
parcheck	OptionFileDialog.h	/^  QCheckBox *parcheck;$/;"	m	class:OptionFileDialog
paused_id	canvas.h	/^  int paused_id; \/\/ run->Simulation paused$/;"	m	class:Main
periclinal	cell.cpp	/^Vector Cell::periclinal(void) const$/;"	f	class:Cell
plot	data_plot.h	/^  DataPlot *plot;$/;"	m	class:PlotDialog
plugin	mesh.h	/^  SimPluginInterface *plugin;$/;"	m	class:Mesh
polarization	cellbase.h	/^  Vector polarization;$/;"	m	struct:ParentInfo
print	canvas.cpp	/^void Main::print()$/;"	f	class:Main
print	cellbase.cpp	/^ostream &CellBase::print(ostream &os) const$/;"	f	class:CellBase
print	matrix.cpp	/^void Matrix::print(ostream *os)$/;"	f	class:Matrix
print	node.cpp	/^ostream &Edge::print(ostream &os) const {$/;"	f	class:Edge
print	node.cpp	/^ostream &Neighbor::print(ostream &os) const {$/;"	f	class:Neighbor
print	node.cpp	/^ostream &Node::print(ostream &os) const {$/;"	f	class:Node
print	nodeset.h	/^  void print(ostream &os) const {$/;"	f	class:NodeSet
print	vector.cpp	/^ostream &Vector::print(ostream &os) const {$/;"	f	class:Vector
print	wallbase.cpp	/^ostream &WallBase::print(ostream &os) const {$/;"	f	class:WallBase
printednodelist	cellbase.cpp	/^QString CellBase::printednodelist(void)$/;"	f	class:CellBase
printer	canvas.h	/^  QPrinter* printer;$/;"	m	class:Main
private	perl/make_parameter_source.pl	/^ private:$/;"	l
private	perl/make_pardialog_source.pl	/^  private:$/;"	l
public	perl/make_parameter_source.pl	/^ public: $/;"	l
public	perl/make_pardialog_source.pl	/^      public:$/;"	l
push	mesh.h	/^ void push(const value_type &x) {$/;"	f	class:unique_queue
qt_meta_data_Cell	moc_cell.cpp	/^static const uint qt_meta_data_Cell[] = {$/;"	v	file:
qt_meta_data_CellBase	moc_cellbase.cpp	/^static const uint qt_meta_data_CellBase[] = {$/;"	v	file:
qt_meta_data_FigureEditor	moc_canvas.cpp	/^static const uint qt_meta_data_FigureEditor[] = {$/;"	v	file:
qt_meta_data_InfoBar	moc_infobar.cpp	/^static const uint qt_meta_data_InfoBar[] = {$/;"	v	file:
qt_meta_data_Main	moc_canvas.cpp	/^static const uint qt_meta_data_Main[] = {$/;"	v	file:
qt_meta_data_ModelCatalogue	moc_modelcatalogue.cpp	/^static const uint qt_meta_data_ModelCatalogue[] = {$/;"	v	file:
qt_meta_data_OptionFileDialog	moc_OptionFileDialog.cpp	/^static const uint qt_meta_data_OptionFileDialog[] = {$/;"	v	file:
qt_meta_data_ParameterDialog	moc_pardialog.cpp	/^static const uint qt_meta_data_ParameterDialog[] = {$/;"	v	file:
qt_meta_data_TransporterDialog	moc_transporterdialog.cpp	/^static const uint qt_meta_data_TransporterDialog[] = {$/;"	v	file:
qt_meta_data_UniqueMessageBox	moc_UniqueMessage.cpp	/^static const uint qt_meta_data_UniqueMessageBox[] = {$/;"	v	file:
qt_meta_stringdata_Cell	moc_cell.cpp	/^static const char qt_meta_stringdata_Cell[] = {$/;"	v	file:
qt_meta_stringdata_CellBase	moc_cellbase.cpp	/^static const char qt_meta_stringdata_CellBase[] = {$/;"	v	file:
qt_meta_stringdata_FigureEditor	moc_canvas.cpp	/^static const char qt_meta_stringdata_FigureEditor[] = {$/;"	v	file:
qt_meta_stringdata_InfoBar	moc_infobar.cpp	/^static const char qt_meta_stringdata_InfoBar[] = {$/;"	v	file:
qt_meta_stringdata_Main	moc_canvas.cpp	/^static const char qt_meta_stringdata_Main[] = {$/;"	v	file:
qt_meta_stringdata_ModelCatalogue	moc_modelcatalogue.cpp	/^static const char qt_meta_stringdata_ModelCatalogue[] = {$/;"	v	file:
qt_meta_stringdata_OptionFileDialog	moc_OptionFileDialog.cpp	/^static const char qt_meta_stringdata_OptionFileDialog[] = {$/;"	v	file:
qt_meta_stringdata_ParameterDialog	moc_pardialog.cpp	/^static const char qt_meta_stringdata_ParameterDialog[] = {$/;"	v	file:
qt_meta_stringdata_TransporterDialog	moc_transporterdialog.cpp	/^static const char qt_meta_stringdata_TransporterDialog[] = {$/;"	v	file:
qt_meta_stringdata_UniqueMessageBox	moc_UniqueMessage.cpp	/^static const char qt_meta_stringdata_UniqueMessageBox[] = {$/;"	v	file:
qt_metacall	moc_OptionFileDialog.cpp	/^int OptionFileDialog::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:OptionFileDialog
qt_metacall	moc_UniqueMessage.cpp	/^int UniqueMessageBox::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:UniqueMessageBox
qt_metacall	moc_canvas.cpp	/^int FigureEditor::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:FigureEditor
qt_metacall	moc_canvas.cpp	/^int Main::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Main
qt_metacall	moc_cell.cpp	/^int Cell::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Cell
qt_metacall	moc_cellbase.cpp	/^int CellBase::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:CellBase
qt_metacall	moc_infobar.cpp	/^int InfoBar::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:InfoBar
qt_metacall	moc_modelcatalogue.cpp	/^int ModelCatalogue::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ModelCatalogue
qt_metacall	moc_pardialog.cpp	/^int ParameterDialog::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ParameterDialog
qt_metacall	moc_transporterdialog.cpp	/^int TransporterDialog::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:TransporterDialog
qt_metacast	moc_OptionFileDialog.cpp	/^void *OptionFileDialog::qt_metacast(const char *_clname)$/;"	f	class:OptionFileDialog
qt_metacast	moc_UniqueMessage.cpp	/^void *UniqueMessageBox::qt_metacast(const char *_clname)$/;"	f	class:UniqueMessageBox
qt_metacast	moc_canvas.cpp	/^void *FigureEditor::qt_metacast(const char *_clname)$/;"	f	class:FigureEditor
qt_metacast	moc_canvas.cpp	/^void *Main::qt_metacast(const char *_clname)$/;"	f	class:Main
qt_metacast	moc_cell.cpp	/^void *Cell::qt_metacast(const char *_clname)$/;"	f	class:Cell
qt_metacast	moc_cellbase.cpp	/^void *CellBase::qt_metacast(const char *_clname)$/;"	f	class:CellBase
qt_metacast	moc_infobar.cpp	/^void *InfoBar::qt_metacast(const char *_clname)$/;"	f	class:InfoBar
qt_metacast	moc_modelcatalogue.cpp	/^void *ModelCatalogue::qt_metacast(const char *_clname)$/;"	f	class:ModelCatalogue
qt_metacast	moc_pardialog.cpp	/^void *ParameterDialog::qt_metacast(const char *_clname)$/;"	f	class:ParameterDialog
qt_metacast	moc_transporterdialog.cpp	/^void *TransporterDialog::qt_metacast(const char *_clname)$/;"	f	class:TransporterDialog
qt_static_metacall	moc_OptionFileDialog.cpp	/^void OptionFileDialog::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:OptionFileDialog
qt_static_metacall	moc_UniqueMessage.cpp	/^void UniqueMessageBox::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:UniqueMessageBox
qt_static_metacall	moc_canvas.cpp	/^void FigureEditor::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:FigureEditor
qt_static_metacall	moc_canvas.cpp	/^void Main::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Main
qt_static_metacall	moc_cell.cpp	/^void Cell::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Cell
qt_static_metacall	moc_cellbase.cpp	/^void CellBase::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:CellBase
qt_static_metacall	moc_infobar.cpp	/^void InfoBar::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:InfoBar
qt_static_metacall	moc_modelcatalogue.cpp	/^void ModelCatalogue::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ModelCatalogue
qt_static_metacall	moc_pardialog.cpp	/^void ParameterDialog::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ParameterDialog
qt_static_metacall	moc_transporterdialog.cpp	/^void TransporterDialog::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:TransporterDialog
rd_dt	parameter.h	/^  double rd_dt;$/;"	m	class:Parameter
rd_dt_edit	pardialog.h	/^  QLineEdit *rd_dt_edit;$/;"	m	class:ParameterDialog
readFirstStateXML	canvas.cpp	/^void Main::readFirstStateXML()$/;"	f	class:Main
readGeometryP	OptionFileDialog.h	/^  bool readGeometryP(void) const { return geometrycheck->checkState()==Qt::Checked; }$/;"	f	class:OptionFileDialog
readLastStateXML	canvas.cpp	/^void Main::readLastStateXML()$/;"	f	class:Main
readNextStateXML	canvas.cpp	/^void Main::readNextStateXML()$/;"	f	class:Main
readParametersP	OptionFileDialog.h	/^  bool readParametersP(void) const { return parcheck->checkState()==Qt::Checked; }$/;"	f	class:OptionFileDialog
readPars	canvas.cpp	/^void Main::readPars()$/;"	f	class:Main
readPrevStateXML	canvas.cpp	/^void Main::readPrevStateXML()$/;"	f	class:Main
readStateXML	canvas.cpp	/^int Main::readStateXML(const char *filename, bool geometry, bool pars, bool simtime)$/;"	f	class:Main
readStateXML	canvas.cpp	/^void Main::readStateXML()$/;"	f	class:Main
rel_perimeter_stiffness	parameter.h	/^  double rel_perimeter_stiffness;$/;"	m	class:Parameter
rel_perimeter_stiffness_edit	pardialog.h	/^  QLineEdit *rel_perimeter_stiffness_edit;$/;"	m	class:ParameterDialog
resize_stride	parameter.h	/^  int resize_stride;$/;"	m	class:Parameter
resize_stride_edit	pardialog.h	/^  QLineEdit *resize_stride_edit;$/;"	m	class:ParameterDialog
result_type	far_mem_5.h	/^    typedef _Result result_type;  \/\/\/<  result_type is the return type$/;"	t	struct:my_1_function
result_type	far_mem_5.h	/^    typedef _Result result_type;  \/\/\/<  result_type is the return type$/;"	t	struct:my_2_function
result_type	far_mem_5.h	/^    typedef _Result result_type;  \/\/\/<  result_type is the return type$/;"	t	struct:my_3_function
result_type	far_mem_5.h	/^    typedef _Result result_type;  \/\/\/<  result_type is the return type$/;"	t	struct:my_4_function
result_type	far_mem_5.h	/^    typedef _Result result_type;  \/\/\/<  result_type is the return type$/;"	t	struct:my_5_function
rkck	rungekutta.cpp	/^void RungeKutta::rkck(double *y, double *dydx, int n, double x, double h, double *yout, double *yerr)$/;"	f	class:RungeKutta
rkqs	rungekutta.cpp	/^void RungeKutta::rkqs(double *y, double *dydx, int n, double *x, double htry, double eps,$/;"	f	class:RungeKutta
rot_angle	canvas.h	/^  double rot_angle;$/;"	m	class:FigureEditor
rotation_mode	canvas.h	/^  bool rotation_mode;$/;"	m	class:FigureEditor
rotation_mode_id	canvas.h	/^  int rotation_mode_id;$/;"	m	class:Main
rseed	parameter.h	/^  int rseed;$/;"	m	class:Parameter
rseed_edit	pardialog.h	/^  QLineEdit *rseed_edit;$/;"	m	class:ParameterDialog
run	canvas.h	/^  Q3PopupMenu *run;$/;"	m	class:Main
running	canvas.h	/^  bool running;$/;"	m	class:Main
sam	node.h	/^  bool sam; \/\/ true if node is connected to the shoot$/;"	m	class:Node
savePars	canvas.cpp	/^void Main::savePars()$/;"	f	class:Main
saveStateXML	canvas.cpp	/^void Main::saveStateXML()$/;"	f	class:Main
sbool	parameter.cpp	/^const char *sbool(const bool &p) {$/;"	f
scale	canvas.cpp	/^void Main::scale(double factor)$/;"	f	class:Main
scaleView	canvas.cpp	/^void FigureEditor::scaleView (qreal scaleFactor)$/;"	f	class:FigureEditor
second	node.h	/^  Node *first, *second;$/;"	m	class:Edge
seed	random.h	/^  void seed(long s) {$/;"	f	class:MyUrand
selectedNodeItem	canvas.cpp	/^NodeItem *FigureEditor::selectedNodeItem(QList<QGraphicsItem *> graphicItems) const$/;"	f	class:FigureEditor
setBrush	nodeitem.h	/^  void setBrush( QBrush newbrush) { brush = newbrush; }$/;"	f	class:NodeItem
setCellVec	cellbase.h	/^  inline void setCellVec(Vector cv) { cellvec = cv; }$/;"	f	class:CellBase
setColor	apoplastitem.cpp	/^void ApoplastItem::setColor(void) {$/;"	f	class:ApoplastItem
setColor	nodeitem.cpp	/^void NodeItem::setColor(void)$/;"	f	class:NodeItem
setColor	wallitem.cpp	/^void WallItem::setColor(void) {$/;"	f	class:WallItem
setFluxArrowSize	canvas.cpp	/^void Main::setFluxArrowSize(int size)$/;"	f	class:Main
setNewTransporters1	wallbase.h	/^  inline void setNewTransporters1(int ch, double val) { new_transporters1[ch]=val; }$/;"	f	class:WallBase
setNewTransporters2	wallbase.h	/^  inline void setNewTransporters2(int ch, double val) { new_transporters2[ch]=val; }$/;"	f	class:WallBase
setOffset	cell.h	/^  static void setOffset(double ox, double oy) {$/;"	f	class:Cell
setPos	node.h	/^  inline void setPos( Vector p ) { $/;"	f	class:Node
setTime	mesh.h	/^  inline void setTime(double t) { time = t; }$/;"	f	class:Mesh
setTransporter	wallbase.h	/^  inline void setTransporter(CellBase *c, int ch, double val) { $/;"	f	class:WallBase
setTransporterValues	transporterdialog.cpp	/^void TransporterDialog::setTransporterValues()$/;"	f	class:TransporterDialog
setTransporters1	wallbase.h	/^  inline void setTransporters1(int ch, double val) { transporters1[ch]=val; }$/;"	f	class:WallBase
setTransporters2	wallbase.h	/^  inline void setTransporters2(int ch, double val) { transporters2[ch]=val; }$/;"	f	class:WallBase
setValues	mesh.cpp	/^void Mesh::setValues(double x, double *y) {$/;"	f	class:Mesh
setVizFlux	wallbase.h	/^  inline void setVizFlux( double value ) { viz_flux = value; } $/;"	f	class:WallBase
setmcsx	node.h	/^  inline void setmcsx(double new_mcss) {mcsx = new_mcss; }$/;"	f	class:Node
setmcsy	node.h	/^  inline void setmcsy(double new_mcss) {mcsy = new_mcss; }$/;"	f	class:Node
sgetpar	parse.cpp	/^char *sgetpar(FILE *fp, char *parameter, const char *default_val, bool wrapflag) {$/;"	f
sgetpar	parse.cpp	/^char *sgetpar(FILE *fp,char *parameter, bool wrapflag) $/;"	f
shape	cellitem.cpp	/^QPainterPath CellItem::shape() const { return QGraphicsPolygonItem::shape(); }$/;"	f	class:CellItem
shape	nodeitem.cpp	/^QPainterPath NodeItem::shape() const$/;"	f	class:NodeItem
show_again	UniqueMessage.h	/^  QCheckBox *show_again;$/;"	m	class:UniqueMessageBox
showbordercellp	mainbase.h	/^  bool showbordercellp;$/;"	m	class:MainBase
showboundaryonlyp	mainbase.h	/^  bool showboundaryonlyp;$/;"	m	class:MainBase
showcellnumbersp	mainbase.h	/^  bool showcellnumbersp;$/;"	m	class:MainBase
showcellsaxesp	mainbase.h	/^  bool showcellsaxesp;$/;"	m	class:MainBase
showcellstrainp	mainbase.h	/^  bool showcellstrainp;$/;"	m	class:MainBase
showcellthickp	mainbase.h	/^  bool showcellthickp;$/;"	m	class:MainBase
showcentersp	mainbase.h	/^  bool showcentersp;$/;"	m	class:MainBase
showfluxesp	mainbase.h	/^  bool showfluxesp;$/;"	m	class:MainBase
showmeshp	mainbase.h	/^  bool showmeshp;$/;"	m	class:MainBase
shownodenumbersp	mainbase.h	/^  bool shownodenumbersp;$/;"	m	class:MainBase
showtooltipsp	mainbase.h	/^  bool showtooltipsp;$/;"	m	class:MainBase
showwallsp	mainbase.h	/^  bool showwallsp;$/;"	m	class:MainBase
shrink	canvas.cpp	/^void Main::shrink()$/;"	f	class:Main
shuffled_cells	mesh.h	/^  vector<Cell *> shuffled_cells;$/;"	m	class:Mesh
shuffled_nodes	mesh.h	/^  vector<Node *> shuffled_nodes;$/;"	m	class:Mesh
size	mesh.h	/^  inline int size(void) {$/;"	f	class:Mesh
snapshot	canvas.cpp	/^void Main::snapshot()$/;"	f	class:Main
source	cellbase.h	/^  bool source;$/;"	m	class:CellBase
source_chem	cellbase.h	/^  int source_chem;$/;"	m	class:CellBase
source_conc	cellbase.h	/^  double source_conc;$/;"	m	class:CellBase
startSimulation	canvas.cpp	/^void Main::startSimulation(void)$/;"	f	class:Main
staticMetaObject	moc_OptionFileDialog.cpp	/^const QMetaObject OptionFileDialog::staticMetaObject = {$/;"	m	class:OptionFileDialog	file:
staticMetaObject	moc_UniqueMessage.cpp	/^const QMetaObject UniqueMessageBox::staticMetaObject = {$/;"	m	class:UniqueMessageBox	file:
staticMetaObject	moc_canvas.cpp	/^const QMetaObject FigureEditor::staticMetaObject = {$/;"	m	class:FigureEditor	file:
staticMetaObject	moc_canvas.cpp	/^const QMetaObject Main::staticMetaObject = {$/;"	m	class:Main	file:
staticMetaObject	moc_cell.cpp	/^const QMetaObject Cell::staticMetaObject = {$/;"	m	class:Cell	file:
staticMetaObject	moc_cellbase.cpp	/^const QMetaObject CellBase::staticMetaObject = {$/;"	m	class:CellBase	file:
staticMetaObject	moc_infobar.cpp	/^const QMetaObject InfoBar::staticMetaObject = {$/;"	m	class:InfoBar	file:
staticMetaObject	moc_modelcatalogue.cpp	/^const QMetaObject ModelCatalogue::staticMetaObject = {$/;"	m	class:ModelCatalogue	file:
staticMetaObject	moc_pardialog.cpp	/^const QMetaObject ParameterDialog::staticMetaObject = {$/;"	m	class:ParameterDialog	file:
staticMetaObject	moc_transporterdialog.cpp	/^const QMetaObject TransporterDialog::staticMetaObject = {$/;"	m	class:TransporterDialog	file:
staticMetaObjectExtraData	moc_OptionFileDialog.cpp	/^const QMetaObjectExtraData OptionFileDialog::staticMetaObjectExtraData = {$/;"	m	class:OptionFileDialog	file:
staticMetaObjectExtraData	moc_UniqueMessage.cpp	/^const QMetaObjectExtraData UniqueMessageBox::staticMetaObjectExtraData = {$/;"	m	class:UniqueMessageBox	file:
staticMetaObjectExtraData	moc_canvas.cpp	/^const QMetaObjectExtraData FigureEditor::staticMetaObjectExtraData = {$/;"	m	class:FigureEditor	file:
staticMetaObjectExtraData	moc_canvas.cpp	/^const QMetaObjectExtraData Main::staticMetaObjectExtraData = {$/;"	m	class:Main	file:
staticMetaObjectExtraData	moc_cell.cpp	/^const QMetaObjectExtraData Cell::staticMetaObjectExtraData = {$/;"	m	class:Cell	file:
staticMetaObjectExtraData	moc_cellbase.cpp	/^const QMetaObjectExtraData CellBase::staticMetaObjectExtraData = {$/;"	m	class:CellBase	file:
staticMetaObjectExtraData	moc_infobar.cpp	/^const QMetaObjectExtraData InfoBar::staticMetaObjectExtraData = {$/;"	m	class:InfoBar	file:
staticMetaObjectExtraData	moc_modelcatalogue.cpp	/^const QMetaObjectExtraData ModelCatalogue::staticMetaObjectExtraData = {$/;"	m	class:ModelCatalogue	file:
staticMetaObjectExtraData	moc_pardialog.cpp	/^const QMetaObjectExtraData ParameterDialog::staticMetaObjectExtraData = {$/;"	m	class:ParameterDialog	file:
staticMetaObjectExtraData	moc_transporterdialog.cpp	/^const QMetaObjectExtraData TransporterDialog::staticMetaObjectExtraData = {$/;"	m	class:TransporterDialog	file:
static_data_members	cellbase.cpp	/^CellsStaticDatamembers *CellBase::static_data_members = 0;$/;"	m	class:CellBase	file:
static_data_members	cellbase.cpp	/^CellsStaticDatamembers *CellBase::static_data_members = new CellsStaticDatamembers();$/;"	m	class:CellBase	file:
static_data_members	cellbase.h	/^  static CellsStaticDatamembers *static_data_members;$/;"	m	class:CellBase
status	moc_canvas.cpp	/^void FigureEditor::status(const QString & _t1)$/;"	f	class:FigureEditor
stiffness	cellbase.h	/^  double stiffness; \/\/ stiffness like in Hogeweg (2000)$/;"	m	class:CellBase
stopSimulation	canvas.cpp	/^void Main::stopSimulation(void)$/;"	f	class:Main
storage_stride	parameter.h	/^  int storage_stride;$/;"	m	class:Parameter
storage_stride_edit	pardialog.h	/^  QLineEdit *storage_stride_edit;$/;"	m	class:ParameterDialog
strtobool	xmlwrite.h	/^inline bool strtobool(const char *str) { $/;"	f
target_area	cellbase.h	/^  double target_area;$/;"	m	class:CellBase
target_length	cellbase.h	/^  double target_length;$/;"	m	class:CellBase
target_length	node.cpp	/^double Node::target_length=1;$/;"	m	class:Node	file:
target_length	node.h	/^  static double target_length;$/;"	m	class:Node
target_length	parameter.h	/^  double target_length;$/;"	m	class:Parameter
target_length_edit	pardialog.h	/^  QLineEdit *target_length_edit;$/;"	m	class:ParameterDialog
textcolor	parameter.h	/^  char * textcolor;$/;"	m	class:Parameter
textcolor_edit	pardialog.h	/^  QLineEdit *textcolor_edit;$/;"	m	class:ParameterDialog
thicken	wallbase.h	/^  inline void thicken(double new_thickness) {thickness += new_thickness; }$/;"	f	class:WallBase
thickness	wallbase.h	/^  double thickness;$/;"	m	class:WallBase
time	mesh.h	/^  double time;$/;"	m	class:Mesh
timer	canvas.h	/^  QTimer *timer;$/;"	m	class:Main
toggleBoundary	node.h	/^  inline void toggleBoundary(void) {$/;"	f	class:Node
toggleCellAxes	canvas.cpp	/^void Main::toggleCellAxes(void)$/;"	f	class:Main
toggleCellNumbers	canvas.cpp	/^void Main::toggleCellNumbers(void)$/;"	f	class:Main
toggleCellStrain	canvas.cpp	/^void Main::toggleCellStrain(void)$/;"	f	class:Main
toggleCellThick	canvas.cpp	/^void Main::toggleCellThick(void)$/;"	f	class:Main
toggleDynCells	canvas.cpp	/^void Main::toggleDynCells() {}$/;"	f	class:Main
toggleHideCells	canvas.cpp	/^void Main::toggleHideCells(void)$/;"	f	class:Main
toggleLeafBoundary	canvas.cpp	/^void Main::toggleLeafBoundary(){}$/;"	f	class:Main
toggleMovieFrames	canvas.cpp	/^void Main::toggleMovieFrames(){}$/;"	f	class:Main
toggleNodeNumbers	canvas.cpp	/^void Main::toggleNodeNumbers(void)$/;"	f	class:Main
togglePaused	canvas.cpp	/^void Main::togglePaused()$/;"	f	class:Main
toggleShowApoplasts	canvas.cpp	/^void Main::toggleShowApoplasts()$/;"	f	class:Main
toggleShowBorderCells	canvas.cpp	/^void Main::toggleShowBorderCells()$/;"	f	class:Main
toggleShowCellCenters	canvas.cpp	/^void Main::toggleShowCellCenters()$/;"	f	class:Main
toggleShowFluxes	canvas.cpp	/^void Main::toggleShowFluxes(void)$/;"	f	class:Main
toggleShowNodes	canvas.cpp	/^void Main::toggleShowNodes()$/;"	f	class:Main
toggleShowWalls	canvas.cpp	/^void Main::toggleShowWalls()$/;"	f	class:Main
tooltips_id	canvas.h	/^  int tooltips_id; \/\/ help -> Show Cell Info$/;"	m	class:Main
transporters1	wallbase.h	/^  double *transporters1, *transporters2;$/;"	m	class:WallBase
transporters2	wallbase.h	/^  double *transporters1, *transporters2;$/;"	m	class:WallBase
unique_queue	mesh.h	/^template<class T, class C = deque<T> > class unique_queue : public queue<T,C> {$/;"	c
unique_warning	warning.cpp	/^void MyWarning::unique_warning(const char *fmt, ...) {$/;"	f	class:MyWarning
userMove	cellitem.cpp	/^void CellItem::userMove(double dx, double dy)$/;"	f	class:CellItem
userMove	nodeitem.cpp	/^void NodeItem::userMove(double dx, double dy)$/;"	f	class:NodeItem
userMove	simitembase.cpp	/^void SimItemBase::userMove(double dx, double dy){};$/;"	f	class:SimItemBase
value_type	mesh.h	/^ typedef typename C::value_type value_type;$/;"	t	class:unique_queue
view	canvas.h	/^  Q3PopupMenu *view;$/;"	m	class:Main
viewport	mainbase.h	/^  QTransform viewport;$/;"	m	class:MainBase
virtleaf	infobar.h	/^  QLabel *virtleaf;$/;"	m	class:InfoBar
viz_flux	wallbase.h	/^  double viz_flux;$/;"	m	class:WallBase
vlMessageOutput	VirtualLeaf.cpp	/^void vlMessageOutput(QtMsgType type, const char *msg)$/;"	f
wall	transporterdialog.h	/^  Wall *wall;$/;"	m	class:TransporterDialog
wall_index	wallbase.h	/^  int wall_index;$/;"	m	class:WallBase
wall_num	transporterdialog.h	/^  int wall_num;$/;"	m	class:TransporterDialog
wall_strain	wallbase.h	/^  double wall_strain;\/\/WORTEL$/;"	m	class:WallBase
wall_strength	wallbase.h	/^  double wall_strength;\/\/WORTEL$/;"	m	class:WallBase
wall_type	wallbase.h	/^  WallType wall_type;$/;"	m	class:WallBase
walls	cellbase.h	/^  list<Wall *> walls;$/;"	m	class:CellBase
walls	mesh.h	/^  list<Wall *> walls; \/\/ we need to erase elements from this container frequently, hence a list.$/;"	m	class:Mesh
warning	warning.cpp	/^void MyWarning::warning(const char * fmt, ...)$/;"	f	class:MyWarning
warning	warning.cpp	/^void MyWarning::warning(const char *fmt, ...)$/;"	f	class:MyWarning
wheelEvent	canvas.cpp	/^void FigureEditor::wheelEvent(QWheelEvent *event)$/;"	f	class:FigureEditor
wk1	parameter.h	/^  double wk1;$/;"	m	class:Parameter
wk10	parameter.h	/^  double wk10;$/;"	m	class:Parameter
wk10_edit	pardialog.h	/^  QLineEdit *wk10_edit;$/;"	m	class:ParameterDialog
wk1_edit	pardialog.h	/^  QLineEdit *wk1_edit;$/;"	m	class:ParameterDialog
wk2	parameter.h	/^  double wk2;$/;"	m	class:Parameter
wk2_edit	pardialog.h	/^  QLineEdit *wk2_edit;$/;"	m	class:ParameterDialog
wk3	parameter.h	/^  double wk3;$/;"	m	class:Parameter
wk3_edit	pardialog.h	/^  QLineEdit *wk3_edit;$/;"	m	class:ParameterDialog
wk4	parameter.h	/^  double wk4;$/;"	m	class:Parameter
wk4_edit	pardialog.h	/^  QLineEdit *wk4_edit;$/;"	m	class:ParameterDialog
wk5	parameter.h	/^  double wk5;$/;"	m	class:Parameter
wk5_edit	pardialog.h	/^  QLineEdit *wk5_edit;$/;"	m	class:ParameterDialog
wk6	parameter.h	/^  double wk6;$/;"	m	class:Parameter
wk6_edit	pardialog.h	/^  QLineEdit *wk6_edit;$/;"	m	class:ParameterDialog
wk7	parameter.h	/^  double wk7;$/;"	m	class:Parameter
wk7_edit	pardialog.h	/^  QLineEdit *wk7_edit;$/;"	m	class:ParameterDialog
wk8	parameter.h	/^  double wk8;$/;"	m	class:Parameter
wk8_edit	pardialog.h	/^  QLineEdit *wk8_edit;$/;"	m	class:ParameterDialog
wk9	parameter.h	/^  double wk9;$/;"	m	class:Parameter
wk9_edit	pardialog.h	/^  QLineEdit *wk9_edit;$/;"	m	class:ParameterDialog
wn	apoplastitem.h	/^  int wn;$/;"	m	class:ApoplastItem
wn	wallitem.h	/^  int wn;$/;"	m	class:WallItem
working_dir	canvas.h	/^  const QDir *working_dir;$/;"	m	class:Main
write	pardialog.cpp	/^void ParameterDialog::write(void) {$/;"	f	class:ParameterDialog
x	hull.h	/^  float x,y;$/;"	m	class:Point
x	vector.h	/^  double x,y,z;$/;"	m	class:Vector
xml_storage_stride	parameter.h	/^  int xml_storage_stride;$/;"	m	class:Parameter
xml_storage_stride_edit	pardialog.h	/^  QLineEdit *xml_storage_stride_edit;$/;"	m	class:ParameterDialog
xp	forwardeuler.h	/^  double *xp,**yp,dxsav;$/;"	m	class:ForwardEuler
xp	mesh.cpp	/^  double *xp,**yp,dxsav;$/;"	m	class:SolveMesh	file:
xp	rungekutta.h	/^  double *xp,**yp,dxsav;$/;"	m	class:RungeKutta
y	hull.h	/^  float x,y;$/;"	m	class:Point
y	vector.h	/^  double x,y,z;$/;"	m	class:Vector
yielding_threshold	parameter.h	/^  double yielding_threshold;$/;"	m	class:Parameter
yielding_threshold_edit	pardialog.h	/^  QLineEdit *yielding_threshold_edit;$/;"	m	class:ParameterDialog
yp	forwardeuler.h	/^  double *xp,**yp,dxsav;$/;"	m	class:ForwardEuler
yp	mesh.cpp	/^  double *xp,**yp,dxsav;$/;"	m	class:SolveMesh	file:
yp	rungekutta.h	/^  double *xp,**yp,dxsav;$/;"	m	class:RungeKutta
z	vector.h	/^  double x,y,z;$/;"	m	class:Vector
zoomIn	canvas.cpp	/^void Main::zoomIn()$/;"	f	class:Main
zoomOut	canvas.cpp	/^void Main::zoomOut()$/;"	f	class:Main
~ApoplastItem	apoplastitem.h	/^  virtual ~ApoplastItem() {}$/;"	f	class:ApoplastItem
~CellBase	cellbase.h	/^  virtual ~CellBase() {$/;"	f	class:CellBase
~CellItem	cellitem.h	/^  virtual ~CellItem() {}$/;"	f	class:CellItem
~CellsStaticDatamembers	cellbase.h	/^  ~CellsStaticDatamembers() {$/;"	f	class:CellsStaticDatamembers
~DataPlot	data_plot.cpp	/^DataPlot::~DataPlot(void)$/;"	f	class:DataPlot
~ForwardEuler	forwardeuler.h	/^  virtual ~ForwardEuler() {}$/;"	f	class:ForwardEuler
~Main	canvas.cpp	/^Main::~Main()$/;"	f	class:Main
~MainBase	mainbase.h	/^  virtual ~MainBase() {};$/;"	f	class:MainBase
~Matrix	matrix.cpp	/^Matrix::~Matrix()$/;"	f	class:Matrix
~Mesh	mesh.h	/^  ~Mesh(void) {$/;"	f	class:Mesh
~ModelElement	modelelement.h	/^  virtual ~ModelElement() {};$/;"	f	class:ModelElement
~Node	node.h	/^  virtual ~Node() {}$/;"	f	class:Node
~NodeItem	nodeitem.h	/^  ~NodeItem() {}$/;"	f	class:NodeItem
~Parameter	parameter.cpp	/^Parameter::~Parameter() {$/;"	f	class:Parameter
~ParameterDialog	pardialog.cpp	/^ParameterDialog::~ParameterDialog(void) {$/;"	f	class:ParameterDialog
~PlotDialog	data_plot.cpp	/^PlotDialog::~PlotDialog(void)$/;"	f	class:PlotDialog
~RungeKutta	rungekutta.h	/^  virtual ~RungeKutta() {}$/;"	f	class:RungeKutta
~SimItemBase	simitembase.cpp	/^SimItemBase::~SimItemBase(void) {};$/;"	f	class:SimItemBase
~SimPluginInterface	simplugin.h	/^  virtual ~SimPluginInterface() { }$/;"	f	class:SimPluginInterface
~UniqueMessageBox	UniqueMessage.cpp	/^UniqueMessageBox::~UniqueMessageBox(void)  {$/;"	f	class:UniqueMessageBox
~Vector	vector.h	/^  virtual ~Vector() {$/;"	f	class:Vector
~WallItem	wallitem.h	/^  virtual ~WallItem() {}$/;"	f	class:WallItem

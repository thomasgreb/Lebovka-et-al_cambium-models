<?xml version="1.0" encoding="UTF-8"?>

<!-- 
  $Rev: 79f94eaa3b9e $:  Revision of last commit
  $Author: michael $:  Author of last commit
  $Source: meinhardt_init.xml $:  Source file
  $Date: 2010/04/14 05:51:02 $:  Date of last commit

  This file is part of the Virtual Leaf.

  The Virtual Leaf is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  The Virtual Leaf is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.

  Copyright 2010 Roeland Merks.
-->

<leaf name="/Users/roel/VLeafClean_plugin/meinhardt_init.xml" date="Wed Aug 26 15:32:10 2009" simtime="0">
  <parameter>
    <par name="arrowcolor" val="blue"/>
    <par name="arrowsize" val="100"/>
    <par name="textcolor" val="orange"/>
    <par name="cellnumsize" val="1"/>
    <par name="nodenumsize" val="1"/>
    <par name="node_mag" val="1"/>
    <par name="outlinewidth" val="1"/>
    <par name="cell_outline_color" val="forestgreen"/>
    <par name="resize_stride" val="10"/>
    <par name="T" val="10"/>
    <par name="lambda_length" val="100"/>
    <par name="lambda_celllength" val="0"/>
    <par name="target_length" val="0"/>
    <par name="cell_expansion_rate" val="1"/>
    <par name="cell_div_expansion_rate" val="0"/>
    <par name="auxin_dependent_growth" val="true"/>
    <par name="ode_accuracy" val="0.0001"/>
    <par name="mc_stepsize" val="1"/>
    <par name="mc_cell_stepsize" val="0.1"/>
    <par name="energy_threshold" val="5"/>
    <par name="bend_lambda" val="0"/>
    <par name="alignment_lambda" val="0"/>
    <par name="rel_cell_div_threshold" val="2"/>
    <par name="rel_perimeter_stiffness" val="2"/>
    <par name="collapse_node_threshold" val="0.05"/>
    <par name="morphogen_div_threshold" val="0.2"/>
    <par name="morphogen_expansion_threshold" val="0.01"/>
    <par name="copy_wall" val="true"/>
    <par name="source" val="1"/>
    <par name="D">
      <valarray>
        <val v="0"/>
        <val v="0.002"/>
        <val v="0.018"/>
        <val v="0.02"/>
      </valarray>
    </par>
    <par name="initval">
      <valarray>
        <val v="0"/>
        <val v="0"/>
        <val v="10"/>
        <val v="100"/>
      </valarray>
    </par>
    <par name="k1" val="1"/>
    <par name="k2" val="0.3"/>
    <par name="r" val="1"/>
    <par name="kr" val="1"/>
    <par name="km" val="1"/>
    <par name="Pi_tot" val="1"/>
    <par name="transport" val="0.036"/>
    <par name="ka" val="1"/>
    <par name="pin_prod" val="0.001"/>
    <par name="pin_prod_in_epidermis" val="0.1"/>
    <par name="pin_breakdown" val="0.001"/>
    <par name="pin_breakdown_internal" val="0.001"/>
    <par name="aux1prod" val="0.001"/>
    <par name="aux1prodmeso" val="0"/>
    <par name="aux1decay" val="0.001"/>
    <par name="aux1decaymeso" val="0.1"/>
    <par name="aux1transport" val="0.036"/>
    <par name="aux_cons" val="0"/>
    <par name="aux_breakdown" val="0"/>
    <par name="kaux1" val="1"/>
    <par name="kap" val="1"/>
    <par name="leaf_tip_source" val="0.001"/>
    <par name="sam_efflux" val="0.0001"/>
    <par name="sam_auxin" val="10"/>
    <par name="sam_auxin_breakdown" val="0"/>
    <par name="dt" val="0.05"/>
    <par name="rd_dt" val="5"/>
    <par name="datadir" val="meinhardt_data"/>
    <par name="movie" val="false"/>
    <par name="nit" val="100000"/>
    <par name="maxt" val="1000"/>
    <par name="storage_stride" val="100"/>
    <par name="xml_storage_stride" val="500"/>
    <par name="rseed" val="-1"/>
    <par name="constituous_expansion_limit" val="16"/>
    <par name="vessel_inh_level" val="1"/>
    <par name="vessel_expansion_rate" val="0.25"/>
    <par name="d" val="0.002"/>
    <par name="e" val="0.1"/>
    <par name="f" val="10"/>
    <par name="c" val="0.004"/>
    <par name="mu" val="0.12"/>
    <par name="nu" val="0.04"/>
    <par name="rho0" val="0.03"/>
    <par name="rho1" val="0.0003"/>
    <par name="c0" val="0.02"/>
    <par name="gamma" val="0.02"/>
    <par name="eps" val="0.4"/>
  </parameter>
  <code name="VirtualLeaf.cpp">#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;cstring&gt;
#include &lt;functional&gt; 
#include &lt;getopt.h&gt;
#include &lt;cerrno&gt;
#include "mesh.h"
#include "parameter.h"
#include "random.h"
#include "pi.h"
#include "cellitem.h"
#include "canvas.h"
#include "cell.h"
#include "output.h"
#include &lt;qwidget.h&gt;
#include &lt;q3process.h&gt;
#include &lt;qapplication.h&gt;
#include &lt;QDesktopWidget&gt;
#include &lt;QGraphicsScene&gt;
#include &lt;QMessageBox&gt;
//Added by qt3to4:
#include &lt;QMouseEvent&gt;

#include &lt;unistd.h&gt;
#include &lt;q3textstream.h&gt; 


#ifdef HAVE_QWT
#include "data_plot.h"
#endif
#include &lt;QPalette&gt;
#include &lt;QBrush&gt;
#include &lt;QToolTip&gt;
#include "simplugin.h"
#include "testplugin.h"

/* #define _xstr_(s) _str_(s)
#define _str_(s) #s
#include _xstr_(REACTIONS_HEADER)
*/
extern Parameter par;

MainBase *main_window = 0;
double auxin_account = 0.;



TestPlugin *plugin = new TestPlugin();

#ifdef XFIGGRAPHICS
#define TIMESTEP double Graphics::TimeStep(void)
#endif

class PrintNode {
public:
  void operator() (const Node &amp;n) const 
  {
    cerr &lt;&lt; n.Index() &lt;&lt; ": " &lt;&lt; n &lt;&lt;  endl;
  }
};


class EdgeSource {
	
public:
  void operator() (Cell &amp;c) {
		
    if (c.AtBoundaryP()) {
      cerr &lt;&lt; "Cell " &lt;&lt; c.Index() &lt;&lt; " is a source cell.\n";
      c.SetSource(0,par.source);
    } else {
      cerr &lt;&lt; "Cell " &lt;&lt; c.Index() &lt;&lt; " is _not_ a source cell.\n";
    }
  }
	
};



class CellInfo {
public:
  void operator() (Cell &amp;c,std::ostream &amp;os) const {
    os &lt;&lt; "Cell " &lt;&lt; c.index &lt;&lt; " says: " &lt;&lt; endl;
    os &lt;&lt; "c.nodes.size() = " &lt;&lt; c.nodes.size() &lt;&lt; endl;
    for (list&lt;Node *&gt;::iterator i=c.nodes.begin();
	 i!=c.nodes.end();
	 i++) {
      cerr &lt;&lt; (*i)-&gt;Index() &lt;&lt; " ";
    }
    cerr &lt;&lt; endl;
  }
};

double PINSum(Cell &amp;c) {
	
	return c.Chemical(1) + c.SumTransporters(1);// + c.ReduceCellAndWalls&lt;double&gt;( complex_PijAj );
	
}


class DrawCell {
public:
  void operator() (Cell &amp;c,QGraphicsScene &amp;canvas, MainBase &amp;m) const {
    if (m.ShowBorderCellsP() || c.Boundary()==Cell::None) {
      if (!m.ShowBoundaryOnlyP() &amp;&amp; !m.HideCellsP()) 
	if (m.ShowToolTipsP()) {
	  QString info_string=QString("Cell %1, chemicals: ( %2, %3, %4, %5, %6)\n %7 of PIN1 at walls.\n Area is %8\n PIN sum is %9\n Circumference is %10\n Boundary type is %11").arg(c.Index()).arg(c.Chemical(0)).arg(c.Chemical(1)).arg(c.Chemical(2)).arg(c.Chemical(3)).arg(c.Chemical(4)).arg(c.SumTransporters(1)).arg(c.Area()).arg(PINSum(c)).arg(c.Circumference()).arg(c.BoundaryStr());
					
	  info_string += "\n" + c.printednodelist();
					
	  c.Draw(&amp;canvas, info_string);
	} else {
	  c.Draw(&amp;canvas);
	}
      if (m.ShowCentersP())
	c.DrawCenter(&amp;canvas);
    if (m.ShowFluxesP())
	c.DrawFluxes(&amp;canvas, par.arrowsize);
			
       }
 
  }
	
};

Mesh mesh;
bool batch=false;


void MainBase::Plot(int resize_stride) {
	
  clear();
    
	
  static int count=0;
  if (resize_stride) {
    if ( !((++count)%resize_stride) ) {
      FitLeafToCanvas();
    }
  }
  mesh.LoopCells(DrawCell(),canvas,*this);
	
  if (ShowNodeNumbersP()) 
    mesh.LoopNodes( bind2nd (mem_fun_ref ( &amp;Node::DrawIndex), &amp;canvas ) ) ;
  if (ShowCellNumbersP()) 
    mesh.LoopCells( bind2nd (mem_fun_ref ( &amp;Cell::DrawIndex), &amp;canvas ) ) ;
	
  if (ShowCellAxesP()) 
    mesh.LoopCells( bind2nd (mem_fun_ref ( &amp;Cell::DrawAxis), &amp;canvas ) );
	
  if (ShowCellStrainP()) 
    mesh.LoopCells( bind2nd (mem_fun_ref ( &amp;Cell::DrawStrain), &amp;canvas ) );
	
  if (ShowWallsP())
  
    mesh.LoopWalls( bind2nd( mem_fun_ref( &amp;Wall::Draw ), &amp;canvas ) );
	
	if (ShowApoplastsP()) 
		mesh.LoopWalls( bind2nd( mem_fun_ref( &amp;Wall::DrawApoplast ), &amp;canvas ) );
 
	if (ShowMeshP()) 
    mesh.DrawNodes(&amp;canvas);
	
  if (ShowBoundaryOnlyP()) 
    mesh.DrawBoundary(&amp;canvas);

  
	if ( ( batch || MovieFramesP() )) {
		
		static int frame = 0;
		// frame numbers are sequential for the most frequently written file type.
		// for the less frequently written file type they match the other type
		if (!(count%par.storage_stride) )  {
		
			stringstream fname;
			fname &lt;&lt; par.datadir &lt;&lt; "/leaf.";
			fname.fill('0');
			fname.width(6);
	
			/* 
			 fname &lt;&lt; frame &lt;&lt; ".pdf";
			if (par.storage_stride &lt;= par.xml_storage_stride) {
				frame++;
			}
			
			// Write high-res JPG snapshot every plot step
			Save(fname.str().c_str(), "PDF");
			*/
			
			fname &lt;&lt; frame &lt;&lt; ".jpg";
			if (par.storage_stride &lt;= par.xml_storage_stride) {
				frame++;
			}
			
			// Write high-res JPG snapshot every plot step
			Save(fname.str().c_str(), "JPEG",1024,768);
			
		}
	
		if (!(count%par.xml_storage_stride)) {
			stringstream fname;
			fname &lt;&lt; par.datadir &lt;&lt; "/leaf.";
			fname.fill('0');
			fname.width(6);
			fname &lt;&lt; frame &lt;&lt; ".xml";
	
			if (par.xml_storage_stride &lt; par.storage_stride) {
				frame++;
			}
			// Write XML file every ten plot steps
			mesh.XMLSave(fname.str().c_str(), XMLSettingsTree());
		}
		
	}
}


void Cell::Flux(double *flux, double *D)  {
	

  // loop over cell edges
	
  for (int c=0;c&lt;Cell::nchem;c++) flux[c]=0.;
	
  for (list&lt;Wall *&gt;::iterator i=walls.begin();
       i!=walls.end();
       i++) {
		
		
    // leaf cannot take up chemicals from environment ("no flux boundary")
    if ((*i)-&gt;c2-&gt;BoundaryPolP()) continue;
		
  	
    // flux depends on edge length and concentration difference
    for (int c=0;c&lt;Cell::nchem;c++) {
      double phi = (*i)-&gt;length * ( D[c] ) * ( (*i)-&gt;c2-&gt;chem[c] - chem[c] );
			
      if ((*i)-&gt;c1!=this) {
	cerr &lt;&lt; "Warning, bad cells boundary: " &lt;&lt; (*i)-&gt;c1-&gt;index &lt;&lt; ", " &lt;&lt; index &lt;&lt; endl;
      }
			
      flux[c] += phi;
    }    
  }
	
}

INIT {
	
	if (leaffile) { 
    xmlNode *settings;
    mesh.XMLRead(leaffile, &amp;settings);
    main_window-&gt;XMLReadSettings(settings);
    xmlFree(settings);
    main_window-&gt;UserMessage(QString("Ready. Time is %1").arg(mesh.getTimeHours().c_str()));
		
  } else {
		
	  Cell &amp;circle=mesh.CircularCell(0,0,10,10);
    		
    circle.SetTargetArea(circle.CalcArea());
	  mesh.SetBaseArea();
	// clean up chemicals 
	  for (int c=0; c&lt;Cell::NChem(); c++) {
		  circle.SetChemical(c, 0.);
      }
  }
}

TIMESTEP {
	
  static int i=0;
  static int t=0;
  static int ncells;
	
  if (!batch) {
    UserMessage(QString("Time: %1").arg(mesh.getTimeHours().c_str()),0);
  }
			 
  ncells=mesh.NCells();
		
				
  double dh;
  		
  if(DynamicCellsP()) {
    dh = mesh.DisplaceNodes();
			
    // Only allow for node insertion, cell division and cell growth
    // if the system has equillibrized
    // i.e. cell wall tension equillibrization is much faster
    // than biological processes, including division, cell wall yielding
    // and cell expansion
    mesh.InsertNodes(); // (this amounts to cell wall yielding)
			
    if ( (-dh) &lt; par.energy_threshold) {
				
      mesh.IncreaseCellCapacityIfNecessary();
		mesh.LoopCurrentCells(&amp;TestPlugin::CellHouseKeeping); // this includes cell division
				
      // Reaction diffusion	
		/*CelltoCellTransport *transport_f = &amp;TestPlugin::CelltoCellTransport;
      CellReaction *cellreaction_f = new plugin-&gt;CellDynamics();
      WallReaction *wall_f = new WallDynamics();*/
				
      mesh.ReactDiffuse(plugin, par.rd_dt);
		
				
      t++;
				
      Plot(par.resize_stride);
		
		/*QVector&lt; QPair&lt;double, int&gt; &gt; angles=mesh.VertexAnglesValues();
		QString afname=QString("Angles/anglesvalues%1.dat").arg(t,6,10,QChar('0'));
		ofstream af(afname.toStdString().c_str());
		*/
		
		/*for (QVector&lt; QPair&lt;qreal, int&gt; &gt;::const_iterator v=angles.begin();
			 v!=angles.end();
			 v++) {
			af &lt;&lt; v-&gt;first &lt;&lt; " " &lt;&lt; v-&gt;second &lt;&lt; endl;
			}
			*/
			}
		
			} else {
			
  /*  TransportFunction *transport_f = new CelltoCellTransport();
    CellReaction *cellreaction_f = new CellDynamics();
    WallReaction *wall_f = new WallDynamics();
			
    mesh.ReactDiffuse_New(transport_f, cellreaction_f, wall_f, par.rd_dt);*/
				mesh.ReactDiffuse(plugin, par.rd_dt);
		
    Plot(par.resize_stride);
			
  }
	
	

		
		
  i++;
  return mesh.getTime();
		
}
		
		
				
/* Called if a cell is clicked */
void Cell::OnClick(QMouseEvent *e) {
					
}
				
				

void Wall::OnWallInsert(void) {
				  

}

				
				
				
int main(int argc,char **argv) {
					
  try {
						

    int c;

						
    char *leaffile=0;

						
    while (1) {
							
      //int this_option_optind = optind ? optind : 1;
      int option_index = 0;
      static struct option long_options[] = {
	{"batch", 0, 0, 0},
	{"leaffile", 2, 0, 0}
      };
		
      // short option 'p' creates trouble for non-commandline usage on MacOSX. Option -p changed to -P (capital)
      static char *short_options = "bl";
      c = getopt_long (argc, argv, "bl:",
		       long_options, &amp;option_index);
      if (c == -1)
	break;
		
		
      if (c==0) {
	printf ("option %s", long_options[option_index].name);
	if (optarg)
	  printf (" with arg %s", optarg);
	printf ("\n");
			
	c = short_options[option_index];
      }
		
      switch (c) {
      case 'b':
	cerr &lt;&lt; "Running in batch mode\n";
	batch=true;
	break;
				
      case 'l':
	leaffile=strdup(optarg);
	if (!leaffile) {
	  throw("Out of memory");
	}
	printf("Reading leaf state file '%s'\n", leaffile);
	break;
				
      case '?':
	break;
				
      default:
	printf ("?? getopt returned character code 0%o ??\n", c);
      }
    }
	  
	  
    if (optind &lt; argc) {
      printf ("non-option ARGV-elements: ");
      while (optind &lt; argc)
	printf ("%s ", argv[optind++]);
      printf ("\n");
    }
	  
	  MakeDir("Angles");
    bool useGUI = !batch;
    QApplication app(argc,argv,useGUI);
						

    
    QPalette tooltippalette = QToolTip::palette();
    QColor transparentcolor = QColor(tooltippalette.brush(QPalette::Window).color());

    tooltippalette.setBrush (QPalette::Window, QBrush (transparentcolor) );
    QToolTip::setPalette( tooltippalette );

    QGraphicsScene canvas(0,0,8000,6000);

    if (useGUI) {
         main_window=new Main(canvas, mesh);
      if ( QApplication::desktop()-&gt;width() &gt; ((Main *)main_window)-&gt;width() + 10
	   &amp;&amp; QApplication::desktop()-&gt;height() &gt; ((Main *)main_window)-&gt;height() +30 ) {

	((Main *)main_window)-&gt;show();
	((Main *)main_window)-&gt;resize( ((Main *)main_window)-&gt;sizeHint());
    } else {
        ((Main *)main_window)-&gt;showMaximized();
    }
  } else {
        main_window=new MainBase(canvas, mesh);

 }

    
	  
    canvas.setSceneRect(QRectF());
    if (!batch) {
      QObject::connect( qApp, SIGNAL(lastWindowClosed()), qApp, SLOT(quit()) );
    }

						
 		
    main_window-&gt;Init(leaffile);
	  
    Cell::SetMagnification(1);
    Cell::setOffset(0,0);
						
    main_window-&gt;FitLeafToCanvas();
						
				
						
    main_window-&gt;Plot();

						

    if (batch) {
      double t=0.;
      do {
	t = main_window-&gt;TimeStep();
      } while (t &lt; par.maxt);
							
    } else
      return app.exec();
	  
						
  } catch (const char *message) {
    if (batch) { 
      cerr &lt;&lt; "Exception caught:" &lt;&lt; endl;
      cerr &lt;&lt; message &lt;&lt; endl;
      abort();
    } else {
      QString qmess=QString("Exception caught: %1").arg(message);
      QMessageBox::critical(0, "Critical Error", qmess);
      abort();
    }
  } catch (ios_base::failure) {
    stringstream error_message;
    error_message &lt;&lt; "I/O failure: " &lt;&lt; strerror(errno);
    if (batch) {
      cerr &lt;&lt; error_message.str() &lt;&lt;endl;
      abort();
    } else {
      QString qmess(error_message.str().c_str());
      QMessageBox::critical(0, "I/O Error", qmess );
      abort();
    }
  }
					
}
</code>
  <code name="reactions_pce_growth.h">

// Executed after the cellular mechanics steps have equillibrized
class CellHouseKeeping {
public:
	void operator() (Cell &amp;c) const {
		
		c.EnlargeTargetArea(par.cell_expansion_rate);
		
		if (c.Area() &gt; par.rel_cell_div_threshold * c.BaseArea() ) {
			c.Divide();
		}
	}
};

// The number of chemical species in the cels
const int Cell::nchem = 0;

// Differential equations describing transport of chemicals from cell to cell
class CelltoCellTransport : public TransportFunction {

 public:
	virtual void operator()(Wall *w, double *dchem_c1, double *dchem_c2) {}
    
 };

// Differential equations describing chemical reactions taking place at or near the cell walls
// (e.g. PIN accumulation)
class WallDynamics : public WallReaction {
 public:
	virtual void operator()(Wall *w, double *dw1, double *dw2) {}; 
	
};


// Differential equations describing chemical reactions inside the cells
class CellDynamics : public CellReaction {
 public:
	virtual void operator()(Cell *c, double *dchem) {
	
	};
	
};

// Rules for cell coloring
void Cell::SetColor(QColor &amp;color) { }

// To be executed after cell division
void Cell::OnDivide(ParentInfo &amp;parent_info, Cell &amp;daughter) {}

</code>
  <nodes n="73" target_length="3.09017">
    <node x="31.5996" y="-7.96112" fixed="false" boundary="true" sam="false"/>
    <node x="21.7713" y="29.219" fixed="false" boundary="true" sam="false"/>
    <node x="-2.80832" y="38.966" fixed="false" boundary="true" sam="false"/>
    <node x="-10.8684" y="36.7154" fixed="false" boundary="true" sam="false"/>
    <node x="-20.1506" y="35.8156" fixed="false" boundary="true" sam="false"/>
    <node x="-33.7534" y="11.467" fixed="false" boundary="true" sam="false"/>
    <node x="-33.3378" y="-15.7862" fixed="false" boundary="true" sam="false"/>
    <node x="-24.7566" y="-32.1209" fixed="false" boundary="true" sam="false"/>
    <node x="-7.69346" y="-40.3405" fixed="false" boundary="true" sam="false"/>
    <node x="24.7748" y="-25.9936" fixed="false" boundary="true" sam="false"/>
    <node x="31.1043" y="1.91442" fixed="false" boundary="true" sam="false"/>
    <node x="-32.9847" y="1.72357" fixed="false" boundary="true" sam="false"/>
    <node x="23.794" y="1.33246" fixed="false" boundary="false" sam="false"/>
    <node x="-20.0518" y="-2.18842" fixed="false" boundary="false" sam="false"/>
    <node x="-5.62613" y="-4.37596" fixed="false" boundary="false" sam="false"/>
    <node x="-1.68712" y="-31.5047" fixed="false" boundary="false" sam="false"/>
    <node x="2.5544" y="-27.4976" fixed="false" boundary="false" sam="false"/>
    <node x="0.710657" y="1.68711" fixed="false" boundary="false" sam="false"/>
    <node x="-5.06429" y="25.9448" fixed="false" boundary="false" sam="false"/>
    <node x="-1.18928" y="21.7018" fixed="false" boundary="false" sam="false"/>
    <node x="-17.289" y="-38.1198" fixed="false" boundary="true" sam="false"/>
    <node x="31.7427" y="12.0804" fixed="false" boundary="true" sam="false"/>
    <node x="1.83859" y="-42.2113" fixed="false" boundary="true" sam="false"/>
    <node x="-27.4504" y="29.3203" fixed="false" boundary="true" sam="false"/>
    <node x="27.8044" y="-16.8904" fixed="false" boundary="true" sam="false"/>
    <node x="4.26427" y="-17.1365" fixed="false" boundary="false" sam="false"/>
    <node x="21.6409" y="-14.6047" fixed="false" boundary="false" sam="false"/>
    <node x="10.1109" y="-15.5188" fixed="false" boundary="false" sam="false"/>
    <node x="-29.6165" y="20.1877" fixed="false" boundary="true" sam="false"/>
    <node x="-1.11495" y="9.94926" fixed="false" boundary="false" sam="false"/>
    <node x="-17.5561" y="15.0063" fixed="false" boundary="false" sam="false"/>
    <node x="-7.02044" y="10.1874" fixed="false" boundary="false" sam="false"/>
    <node x="-28.8493" y="-23.5034" fixed="false" boundary="true" sam="false"/>
    <node x="-2.69057" y="-12.4412" fixed="false" boundary="false" sam="false"/>
    <node x="-18.4582" y="-20.7521" fixed="false" boundary="false" sam="false"/>
    <node x="-7.51372" y="-17.0992" fixed="false" boundary="false" sam="false"/>
    <node x="26.9329" y="20.9556" fixed="false" boundary="true" sam="false"/>
    <node x="2.72108" y="17.9083" fixed="false" boundary="false" sam="false"/>
    <node x="21.0243" y="18.4885" fixed="false" boundary="false" sam="false"/>
    <node x="8.67514" y="17.3276" fixed="false" boundary="false" sam="false"/>
    <node x="-34.8413" y="-6.95727" fixed="false" boundary="true" sam="false"/>
    <node x="5.75743" y="38.0934" fixed="false" boundary="true" sam="false"/>
    <node x="11.2012" y="-39.708" fixed="false" boundary="true" sam="false"/>
    <node x="9.82335" y="-0.483784" fixed="false" boundary="false" sam="false"/>
    <node x="15.4777" y="-12.1117" fixed="false" boundary="false" sam="false"/>
    <node x="13.1126" y="-5.94963" fixed="false" boundary="false" sam="false"/>
    <node x="6.08733" y="-23.1188" fixed="false" boundary="false" sam="false"/>
    <node x="18.1372" y="-33.4573" fixed="false" boundary="true" sam="false"/>
    <node x="10.6287" y="-26.0454" fixed="false" boundary="false" sam="false"/>
    <node x="14.7106" y="-29.3403" fixed="false" boundary="false" sam="false"/>
    <node x="16.5419" y="1.59627" fixed="false" boundary="false" sam="false"/>
    <node x="15.0224" y="16.2127" fixed="false" boundary="false" sam="false"/>
    <node x="15.8788" y="6.40861" fixed="false" boundary="false" sam="false"/>
    <node x="15.5074" y="11.2701" fixed="false" boundary="false" sam="false"/>
    <node x="-8.82725" y="29.9411" fixed="false" boundary="false" sam="false"/>
    <node x="-21.8914" y="18.7632" fixed="false" boundary="false" sam="false"/>
    <node x="-12.4252" y="25.1861" fixed="false" boundary="false" sam="false"/>
    <node x="-16.6871" y="21.2713" fixed="false" boundary="false" sam="false"/>
    <node x="-6.37334" y="-34.5771" fixed="false" boundary="false" sam="false"/>
    <node x="-12.6016" y="-21.2436" fixed="false" boundary="false" sam="false"/>
    <node x="-9.77308" y="-30.9302" fixed="false" boundary="false" sam="false"/>
    <node x="-11.7883" y="-26.1145" fixed="false" boundary="false" sam="false"/>
    <node x="-14.3443" y="-4.26168" fixed="false" boundary="false" sam="false"/>
    <node x="-23.8608" y="-19.3447" fixed="false" boundary="false" sam="false"/>
    <node x="-19.1447" y="-8.14921" fixed="false" boundary="false" sam="false"/>
    <node x="-22.6558" y="-13.4727" fixed="false" boundary="false" sam="false"/>
    <node x="-25.4783" y="0.710059" fixed="false" boundary="false" sam="false"/>
    <node x="-13.4696" y="11.0983" fixed="false" boundary="false" sam="false"/>
    <node x="-21.2203" y="3.97295" fixed="false" boundary="false" sam="false"/>
    <node x="-17.2369" y="7.16107" fixed="false" boundary="false" sam="false"/>
    <node x="13.06" y="33.8513" fixed="false" boundary="true" sam="false"/>
    <node x="8.51596" y="29.4054" fixed="false" boundary="false" sam="false"/>
    <node x="5.35735" y="23.8442" fixed="false" boundary="false" sam="false"/>
  </nodes>
  <cells n="16" offsetx="0" offsety="0" magnification="1" base_area="293.893" nchem="4">
    <cell index="0" area="250.215" target_area="332.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="34"/>
      <node n="59"/>
      <node n="35"/>
      <node n="33"/>
      <node n="14"/>
      <node n="62"/>
      <node n="64"/>
      <node n="65"/>
      <node n="63"/>
      <wall w="10"/>
      <wall w="24"/>
      <wall w="22"/>
      <wall w="37"/>
      <wall w="28"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="1" area="257.534" target_area="332.493" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="39"/>
      <node n="37"/>
      <node n="29"/>
      <node n="17"/>
      <node n="43"/>
      <node n="50"/>
      <node n="52"/>
      <node n="53"/>
      <node n="51"/>
      <wall w="11"/>
      <wall w="35"/>
      <wall w="2"/>
      <wall w="5"/>
      <wall w="6"/>
      <wall w="14"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="2" area="282.233" target_area="344.993" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="9"/>
      <node n="24"/>
      <node n="26"/>
      <node n="44"/>
      <node n="27"/>
      <node n="25"/>
      <node n="46"/>
      <node n="48"/>
      <node n="49"/>
      <node n="47"/>
      <wall w="0"/>
      <wall w="25"/>
      <wall w="9"/>
      <wall w="7"/>
      <wall w="12"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="3" area="269.189" target_area="334.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="30"/>
      <node n="67"/>
      <node n="31"/>
      <node n="29"/>
      <node n="37"/>
      <node n="19"/>
      <node n="18"/>
      <node n="54"/>
      <node n="56"/>
      <node n="57"/>
      <node n="55"/>
      <wall w="2"/>
      <wall w="34"/>
      <wall w="42"/>
      <wall w="18"/>
      <wall w="32"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="4" area="283.214" target_area="348.493" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="26"/>
      <node n="24"/>
      <node n="0"/>
      <node n="10"/>
      <node n="12"/>
      <node n="50"/>
      <node n="43"/>
      <node n="45"/>
      <node n="44"/>
      <wall w="1"/>
      <wall w="6"/>
      <wall w="7"/>
      <wall w="8"/>
      <wall w="16"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="5" area="261.721" target_area="333.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="30"/>
      <node n="55"/>
      <node n="28"/>
      <node n="5"/>
      <node n="11"/>
      <node n="66"/>
      <node n="68"/>
      <node n="69"/>
      <node n="67"/>
      <wall w="29"/>
      <wall w="3"/>
      <wall w="20"/>
      <wall w="32"/>
      <wall w="33"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="6" area="275.722" target_area="332.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="34"/>
      <node n="63"/>
      <node n="32"/>
      <node n="7"/>
      <node n="20"/>
      <node n="8"/>
      <node n="58"/>
      <node n="60"/>
      <node n="61"/>
      <node n="59"/>
      <wall w="4"/>
      <wall w="21"/>
      <wall w="22"/>
      <wall w="23"/>
      <wall w="31"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="7" area="255.047" target_area="329.993" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="39"/>
      <node n="51"/>
      <node n="38"/>
      <node n="36"/>
      <node n="1"/>
      <node n="70"/>
      <node n="71"/>
      <node n="72"/>
      <node n="37"/>
      <wall w="5"/>
      <wall w="17"/>
      <wall w="39"/>
      <wall w="40"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="8" area="262.168" target_area="346.493" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="17"/>
      <node n="14"/>
      <node n="33"/>
      <node n="25"/>
      <node n="27"/>
      <node n="44"/>
      <node n="45"/>
      <node n="43"/>
      <wall w="8"/>
      <wall w="9"/>
      <wall w="10"/>
      <wall w="36"/>
      <wall w="11"/>
      <wall w="26"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="9" area="279.575" target_area="342.993" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="16"/>
      <node n="15"/>
      <node n="58"/>
      <node n="8"/>
      <node n="22"/>
      <node n="42"/>
      <node n="47"/>
      <node n="49"/>
      <node n="48"/>
      <node n="46"/>
      <wall w="12"/>
      <wall w="27"/>
      <wall w="13"/>
      <wall w="21"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="10" area="260.558" target_area="330.493" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="12"/>
      <node n="10"/>
      <node n="21"/>
      <node n="36"/>
      <node n="38"/>
      <node n="51"/>
      <node n="53"/>
      <node n="52"/>
      <node n="50"/>
      <wall w="14"/>
      <wall w="15"/>
      <wall w="16"/>
      <wall w="17"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="11" area="243.214" target_area="332.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="3"/>
      <node n="4"/>
      <node n="23"/>
      <node n="28"/>
      <node n="55"/>
      <node n="57"/>
      <node n="56"/>
      <node n="54"/>
      <wall w="18"/>
      <wall w="19"/>
      <wall w="43"/>
      <wall w="20"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="12" area="249.141" target_area="330.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="15"/>
      <node n="16"/>
      <node n="46"/>
      <node n="25"/>
      <node n="33"/>
      <node n="35"/>
      <node n="59"/>
      <node n="61"/>
      <node n="60"/>
      <node n="58"/>
      <wall w="23"/>
      <wall w="24"/>
      <wall w="25"/>
      <wall w="26"/>
      <wall w="27"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="13" area="281.524" target_area="331.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="13"/>
      <node n="66"/>
      <node n="11"/>
      <node n="40"/>
      <node n="6"/>
      <node n="32"/>
      <node n="63"/>
      <node n="65"/>
      <node n="64"/>
      <node n="62"/>
      <wall w="28"/>
      <wall w="29"/>
      <wall w="30"/>
      <wall w="31"/>
      <wall w="38"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="14" area="273.847" target_area="332.243" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="13"/>
      <node n="62"/>
      <node n="14"/>
      <node n="17"/>
      <node n="29"/>
      <node n="31"/>
      <node n="67"/>
      <node n="69"/>
      <node n="68"/>
      <node n="66"/>
      <wall w="33"/>
      <wall w="34"/>
      <wall w="35"/>
      <wall w="36"/>
      <wall w="37"/>
      <wall w="38"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <cell index="15" area="271.936" target_area="329.993" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="true" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="41"/>
      <node n="2"/>
      <node n="3"/>
      <node n="54"/>
      <node n="18"/>
      <node n="19"/>
      <node n="37"/>
      <node n="72"/>
      <node n="71"/>
      <node n="70"/>
      <wall w="40"/>
      <wall w="41"/>
      <wall w="42"/>
      <wall w="43"/>
      <chem n="4">
        <val v="1"/>
        <val v="0"/>
        <val v="7.0879e-215"/>
        <val v="1"/>
      </chem>
    </cell>
    <boundary_polygon index="-1" area="4256.84" target_area="1" target_length="0" lambda_celllength="0" stiffness="0" fixed="false" pin_fixed="false" at_boundary="false" dead="false" source="false" boundary="None" div_counter="0" cell_type="0">
      <node n="0"/>
      <node n="10"/>
      <node n="21"/>
      <node n="36"/>
      <node n="1"/>
      <node n="70"/>
      <node n="41"/>
      <node n="2"/>
      <node n="3"/>
      <node n="4"/>
      <node n="23"/>
      <node n="28"/>
      <node n="5"/>
      <node n="11"/>
      <node n="40"/>
      <node n="6"/>
      <node n="32"/>
      <node n="7"/>
      <node n="20"/>
      <node n="8"/>
      <node n="22"/>
      <node n="42"/>
      <node n="47"/>
      <node n="9"/>
      <node n="24"/>
      <wall w="1"/>
      <wall w="3"/>
      <wall w="4"/>
      <wall w="41"/>
      <wall w="0"/>
      <wall w="19"/>
      <wall w="30"/>
      <wall w="15"/>
      <wall w="13"/>
      <wall w="39"/>
      <chem n="4">
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </chem>
    </boundary_polygon>
  </cells>
  <walls n="44">
    <wall index="0" c1="2" c2="-1" n1="47" n2="24" length="19.5823" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="1" c1="4" c2="-1" n1="24" n2="10" length="19.5903" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="2" c1="1" c2="3" n1="37" n2="29" length="8.83528" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="3" c1="5" c2="-1" n1="28" n2="11" length="19.4259" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="4" c1="6" c2="-1" n1="32" n2="8" length="28.9679" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="5" c1="1" c2="7" n1="51" n2="37" length="12.4268" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="6" c1="4" c2="1" n1="50" n2="43" length="7.03315" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="7" c1="2" c2="4" n1="24" n2="44" length="13.2219" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="8" c1="4" c2="8" n1="43" n2="44" length="12.9796" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="9" c1="2" c2="8" n1="44" n2="25" length="12.4233" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="10" c1="0" c2="8" n1="33" n2="14" length="8.58283" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="11" c1="8" c2="1" n1="43" n2="17" length="9.3677" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="12" c1="2" c2="9" n1="46" n2="47" length="16.0049" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="13" c1="9" c2="-1" n1="8" n2="47" length="28.7424" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="14" c1="1" c2="10" n1="50" n2="51" length="14.6998" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="15" c1="10" c2="-1" n1="10" n2="36" length="20.2807" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="16" c1="4" c2="10" n1="10" n2="50" length="14.5904" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="17" c1="10" c2="7" n1="36" n2="51" length="12.8218" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="18" c1="3" c2="11" n1="54" n2="55" length="17.527" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="19" c1="11" c2="-1" n1="3" n2="28" length="28.4829" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="20" c1="11" c2="5" n1="28" n2="55" length="7.85528" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="21" c1="6" c2="9" n1="8" n2="58" length="5.91265" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="22" c1="0" c2="6" n1="63" n2="59" length="11.4601" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="23" c1="6" c2="12" n1="58" n2="59" length="15.1445" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="24" c1="0" c2="12" n1="59" n2="33" length="13.2674" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="25" c1="12" c2="2" n1="46" n2="25" length="6.25387" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="26" c1="12" c2="8" n1="25" n2="33" length="8.39143" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="27" c1="12" c2="9" n1="58" n2="46" length="17.065" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="28" c1="0" c2="13" n1="62" n2="63" length="18.5486" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="29" c1="13" c2="5" n1="66" n2="11" length="7.57452" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="30" c1="13" c2="-1" n1="11" n2="32" length="26.7608" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="31" c1="13" c2="6" n1="32" n2="63" length="6.49463" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="32" c1="3" c2="5" n1="55" n2="67" length="11.391" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="33" c1="5" c2="14" n1="66" n2="67" length="15.9158" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="34" c1="3" c2="14" n1="67" n2="29" length="12.4235" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="35" c1="1" c2="14" n1="29" n2="17" length="8.46144" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="36" c1="8" c2="14" n1="17" n2="14" length="8.77016" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="37" c1="0" c2="14" n1="14" n2="62" length="8.71893" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="38" c1="13" c2="14" n1="62" n2="66" length="12.2244" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="39" c1="7" c2="-1" n1="36" n2="70" length="19.6093" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="40" c1="7" c2="15" n1="70" n2="37" length="19.2478" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="41" c1="15" c2="-1" n1="70" n2="3" length="25.4238" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="42" c1="15" c2="3" n1="54" n2="37" length="16.6833" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
    <wall index="43" c1="15" c2="11" n1="3" n2="54" length="7.07513" viz_flux="0" wall_type="normal">
      <transporters1>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters1>
      <transporters2>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </transporters2>
      <apoplast>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
        <val v="0"/>
      </apoplast>
    </wall>
  </walls>
  <nodesets n="0"/>
  <settings>
    <setting name="show_cell_centers" val="false"/>
    <setting name="show_nodes" val="false"/>
    <setting name="show_node_numbers" val="false"/>
    <setting name="show_cell_numbers" val="false"/>
    <setting name="show_border_cells" val="false"/>
    <setting name="show_cell_axes" val="false"/>
    <setting name="show_cell_strain" val="false"/>
    <setting name="show_fluxes" val="false"/>
    <setting name="show_walls" val="false"/>
    <setting name="show_apoplasts" val="false"/>
    <setting name="save_movie_frames" val="false"/>
    <setting name="show_only_leaf_boundary" val="false"/>
    <setting name="cell_growth" val="true"/>
    <setting name="hide_cells" val="false"/>
  </settings>
</leaf>
